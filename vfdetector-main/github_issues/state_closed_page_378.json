[{"number": 42663, "title": "Add TF_Log for gcs", "body": "@mihaimaruseac \r\nThis PR add loggging for gcs filesystem", "comments": ["As part of the final evaluation, I must provide a link to the work I have done. Since the blog post isn't finished yet. I've created a small gist and once we finish the blog post, we could add its link to the gist. Could you take a look at it ? Here is the link: https://gist.github.com/vnvo2409/dc1e3d98c8958efe8ebac2773f9a33fd Thank you!", "Sorry for the delay, have been out of GitHub in the past few days.\r\n\r\nThe Gist looks good so far, make sure you fix typos. Under Link, you can say that these are links to the implementation. If possible, you can also add other links for all the PRs you have done or a link to the search page that lists all the PRs.\r\n\r\nYou also have contributions to Bazel and aws I recall. We should include them too in the gist."]}, {"number": 42662, "title": "Problems with custom learning rate schedules and it's not clear why", "body": "### System information\r\n\r\n-   **Have I written custom code (as opposed to using a stock example script\r\n    provided in TensorFlow)**: Yes\r\n-   **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Colab\r\n-   **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue\r\n    happens on a mobile device**:\r\n-   **TensorFlow installed from (source or binary)**:\r\n-   **TensorFlow version (use command below)**: 2.3.0\r\n-   **Python version**:\r\n-   **Bazel version (if compiling from source)**:\r\n-   **GCC/Compiler version (if compiling from source)**:\r\n-   **CUDA/cuDNN version**:\r\n-   **GPU model and memory**:\r\n-   **Exact command to reproduce**:\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with:\r\n\r\n```bash\r\npython -c \"import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)\"\r\n```\r\n\r\n### Describe the problem\r\n\r\nI referred to [this example](https://www.tensorflow.org/tutorials/text/transformer) and especially the callback presented here. So, I decided to write out a callback inspired by [this one](https://github.com/facebookresearch/swav/blob/master/main_swav.py#L175). Basically it combines warm-ups and cosine decays. \r\n\r\nHere's how I coded it up - \r\n\r\n```python\r\nclass CustomSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\r\n    def __init__(self, base_lr=0.1, end_lr=0.001, warmup_steps=390*5):\r\n        super(CustomSchedule, self).__init__()\r\n\r\n        self.base_lr = base_lr\r\n        self.end_lr = end_lr\r\n        self.warmup_steps = warmup_steps\r\n    \r\n    def __call__(self, step=390*35):\r\n        warmup_lr_schedule = tf.linspace(0., self.base_lr, self.warmup_steps)\r\n        iters = tf.range(step, dtype=tf.float32) \r\n        cosine_lr_schedule = tf.convert_to_tensor([self.end_lr + 0.5 * (self.base_lr - self.end_lr) * (1 + \\\r\n                        tf.math.cos(tf.constant(math.pi) * t / (step))) for t in iters])\r\n        lr_schedule = tf.concat([warmup_lr_schedule, cosine_lr_schedule], axis=0)\r\n        \r\n        return lr_schedule\r\n```\r\n\r\nI verified if this is the one I wanted and indeed it is - \r\n\r\n![image](https://user-images.githubusercontent.com/22957388/91200950-761e8180-e71d-11ea-93aa-abee10df7f2b.png)\r\n\r\nBut when I pass this callback inside an optimizer I run into weird stuff - \r\n\r\n```\r\nOperatorNotAllowedInGraphError: iterating over `tf.Tensor` is not allowed: AutoGraph did convert this function. This might indicate you are trying to use an unsupported feature.\r\n```\r\n\r\nWhat am I missing out on?\r\n\r\n### Source code / logs\r\n\r\n[Colab Notebook](https://colab.research.google.com/gist/sayakpaul/0f75d0177cf6824f80fcc62cd49dc78f/scratchpad.ipynb)\r\n", "comments": ["Was able to reproduce the issue with TF v2.3 and TF-nightly. Please find the gist of it [here](https://colab.research.google.com/gist/amahendrakar/b8ab5045ae609f60d75e430479f3d868/42662.ipynb). Thanks!", "Any updates? ", "TF: 2.3.0\r\nSimilar issue:\r\n```\r\nclass CustomSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\r\n  def __init__(self, warmup_steps=1e4):\r\n    super().__init__()\r\n\r\n    self.warmup_steps = tf.cast(warmup_steps, tf.float32)\r\n    \r\n  def __call__(self, step):\r\n    step = tf.cast(step, tf.float32)\r\n    m = tf.maximum(self.warmup_steps, step)\r\n    m = tf.cast(m, tf.float32)\r\n    lr = tf.math.rsqrt(m)\r\n    \r\n    return lr\r\n\r\n```\r\n### Function output:\r\n```\r\nschedule = CustomSchedule()\r\nplt.plot(schedule(tf.range(25000, dtype=tf.float32)))\r\n```\r\n![lr_schedule](https://user-images.githubusercontent.com/17620536/92232869-b671c280-eec8-11ea-9f20-9c274cadcddc.png)\r\n\r\n\r\n\r\n```\r\nlearning_rate_fn = CustomSchedule()\r\noptimizer = tf.keras.optimizer.Adam(learning_rate_fn)\r\n\r\nmodel.compile(optimizer=optimizer, ...)\r\nmodel.fit(dataset, epochs=1)\r\n```\r\n\r\n### Error:\r\n**TypeError: To be compatible with tf.eager.defun, Python functions must return zero or more Tensors; in compilation of <function Model.make_train_function.<locals>.train_function at 0x7fdf2c2b9c80>, found return value of type <class '__main__.CustomSchedule'>, which is not a Tensor.**\r\n", "@sayakpaul Thanks for the issue! The `LearningRateSchedule.__call__` method should accept a `Tensor` `step` argument and output a `Tensor` that represents the learning rate to use for that particular step. It looks like your subclass is outputting an entire schedule every step rather than the learning rate for that particular step.", "@omalleyt12 any hints to my issue?", "@omalleyt12 okay. So, how should I approach it if I were to use the schedule I mentioned in the first place? "]}, {"number": 42661, "title": "Out of memory situation with tf keras Model.fit using tcmalloc library", "body": "<em>\r\nThis is a bug related to memory management\r\n</em>\r\n\r\n**System information**\r\n- I have created my own code for tf.Keras model building and compiling and run model.fit train and eval:\r\n- Red Hat 7.8 (Maipo):\r\n- Not a mobile device:\r\n- From binary:\r\n- v2.0.0-rc2-26-g64c3d38 2.0.0:\r\n- 3.6.9:\r\n- Bazel version (if compiling from source):\r\n- GCC/Compiler version (if compiling from source):\r\n- Cuda 10.0/cuDNN 7.X:\r\n- Tesla P-100, 16 GB:\r\n\r\nYou can collect some of this information using our environment capture\r\n[script](https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh)\r\nYou can also obtain the TensorFlow version with:\r\n1. TF 1.0: `python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"`\r\n2. TF 2.0: `python -c \"import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)\"`\r\n\r\n\r\n**\r\nCurrently the model.fit training and eval aborts due to out of memory error.  I found from stackoverflow that this error is due to the inability of malloc to efficiently collect garbage.  As suggested [here](https://github.com/tensorflow/tensorflow/issues/2942), I used tcmalloc through LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libtcmalloc_minimal.so.4 before running the tensorflow training script.  The problem is alleviated but not eliminated completely.  Compared to just using gcc malloc, the tcmalloc allows for training a few more epochs, but ultimately gets into an out of memory situation.  The CPU memory that I have available is ~377 GB.  As the training proceeds over epochs, the memory usage increases until the limit and the whole program aborts.  Also, the speed of training decreases with every epoch\r\n**\r\n\r\n**\r\nI expect the out of memory issue to never occur.  Also, I expect the speed of training to be consistent across the epochs.\r\n**\r\n\r\n**\r\n`\r\nif __name__=='__main__':\r\n    tf.keras.backend.clear_session()\r\n    tf.config.optimizer.set_jit(True)\r\n    from tf_tools import read_h5\r\n    from glob import glob\r\n    import os\r\n    from Feature_compression import build_model\r\n    train_data_folder = os.path.join(os.environ['FAST_DRIVE'],'DATA','DSIFT','train','Visible','imagery')\r\n    test_data_folder = os.path.join(os.environ['FAST_DRIVE'],'DATA','DSIFT','test','Visible','imagery')\r\n    vis_model_folder = os.path.join(os.environ['FAST_DRIVE'],'MODEL','Visible2')\r\n    with h5py.File(os.path.join(train_data_folder,'All_train_visible_data.h5'),'r') as f:\r\n        num_samples = len(f['DSIFT_image'])*(len(f['DSIFT_image'])-1)//2\r\n    strategy = tf.distribute.MirroredStrategy()\r\n    BATCH_SIZE_PER_REPLICA =512\r\n    BATCH_SIZE = BATCH_SIZE_PER_REPLICA * strategy.num_replicas_in_sync\r\n    EPOCHS =15 \r\n    STEPS_PER_EPOCH = 5000 #int(num_samples/EPOCHS) \r\n    model_folder = os.path.join(os.environ['FAST_DRIVE'],'MODEL','Visible_2_Visible')\r\n    os.makedirs(model_folder,exist_ok=True)\r\n    csv_logger = CSVLogger(os.path.join(model_folder,'DSIFT_training.log'),append=True)\r\n    checkpoint_dir = os.path.join(model_folder,'training_checkpoints')\r\n    checkpoint_prefix = os.path.join(checkpoint_dir, \"ckpt_{epoch}\")\r\n    early_stop = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy',patience=3,min_delta=1E-5,baseline=0.999)\r\n    #tf.keras.callbacks.TensorBoard(log_dir='./logs'),\r\n    callbacks = [tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_prefix, save_weights_only=True),csv_logger]#,early_stop]\r\n#====================== Preparing the dataset optimizaion options =============================================================================#\r\n    dataset_options = tf.data.Options()\r\n    dataset_options.experimental_threading.private_threadpool_size = 60#mp.cpu_count()\r\n    dataset_options.experimental_threading.max_intra_op_parallelism = 1 #mp.cpu_count()\r\n    dataset_options.experimental_optimization.apply_default_optimizations = True\r\n    dataset_options.experimental_optimization.map_vectorization.enabled = True\r\n#====================== Preparing the training dataset =============================================================================#\r\n    train = read_h5(h5py.File(os.path.join(train_data_folder,'All_train_visible_data.h5'),'r'),dataset=['DSIFT_image','labels'],label_str='labels')\r\n\r\n    train_input_pds=tf.data.Dataset.from_generator(train.gen_func_pairwise(cls='positive'),output_types=(tf.uint8,tf.float32),\r\n                     output_shapes=(tf.TensorShape((2,24,24,64)),tf.TensorShape((2,))))\r\n    \r\n    train_input_nds=tf.data.Dataset.from_generator(train.gen_func_pairwise(cls='negative'),output_types=(tf.uint8,tf.float32),\r\n                     output_shapes=(tf.TensorShape((2,24,24,64)),tf.TensorShape((2,))))\r\n\r\n    train_balanced_ds = tf.data.experimental.sample_from_datasets([train_input_pds.repeat(),train_input_nds.repeat()], [0.5,0.5]).batch(BATCH_SIZE)\r\n    train_dataset = train_balanced_ds.map(lambda features,labels: (tf.concat(tf.unstack(features,axis=1),axis=0)/255,\r\n                                        tf.cast(tf.equal(*tf.unstack(labels,axis=1)), dtype=tf.float32)),\r\n                                        num_parallel_calls=tf.data.experimental.AUTOTUNE).prefetch(tf.data.experimental.AUTOTUNE)\r\n    train_dataset.with_options(dataset_options)\r\n#==================================================================================================================================#\r\n#====================== Preparing the testing dataset =============================================================================#\r\n    test = read_h5(h5py.File(os.path.join(test_data_folder,'All_test_visible_data.h5'),'r'),dataset=['DSIFT_image','labels'],label_str='labels')\r\n\r\n    test_input_pds=tf.data.Dataset.from_generator(test.gen_func_pairwise(cls='positive'),output_types=(tf.uint8,tf.float32),\r\n                     output_shapes=(tf.TensorShape((2,24,24,64)),tf.TensorShape((2,))))\r\n    \r\n    test_input_nds=tf.data.Dataset.from_generator(test.gen_func_pairwise(cls='negative'),output_types=(tf.uint8,tf.float32),\r\n                     output_shapes=(tf.TensorShape((2,24,24,64)),tf.TensorShape((2,))))\r\n\r\n    test_balanced_ds = tf.data.experimental.sample_from_datasets([test_input_pds.repeat(),test_input_nds.repeat()], [0.5,0.5]).batch(BATCH_SIZE) \r\n    test_dataset = test_balanced_ds.map(lambda features,labels: (tf.concat(tf.unstack(features,axis=1),axis=0)/255,tf.cast(tf.equal(*tf.unstack(labels,axis=1)), dtype=tf.float32)),num_parallel_calls=tf.data.experimental.AUTOTUNE).prefetch(tf.data.experimental.AUTOTUNE)\r\n\r\n    test_dataset.with_options(dataset_options)\r\n#==================================================================================================================================#\r\n    with strategy.scope():\r\n        CNN_model = build_model(num_classes=473)\r\n        df = pd.read_csv(os.path.join(vis_model_folder,'DSIFT_Training_History.csv'),delimiter=',')\r\n        CNN_model.load_weights(os.path.join(vis_model_folder,'training_checkpoints',f'ckpt_{1+df[\"val_accuracy\"].argmax()}'))\r\n        CNN_base_model = tf.keras.Sequential(CNN_model.layers[:-1])\r\n        dnn_model = build_vis2vis_model(layer_shape=[2,2])\r\n        CNN_base_model.trainable = False\r\n        inputs = tf.keras.Input(shape=CNN_base_model.input_shape[1:])\r\n        x = CNN_base_model(inputs,training=False)\r\n        x = tf.abs(tf.keras.layers.Subtract()(tf.split(x,2,axis=0)))\r\n        outputs = dnn_model(x)\r\n        model = tf.keras.Model(inputs,outputs)\r\n        model.compile(loss=tf.keras.losses.hinge,\r\n                      optimizer=tf.keras.optimizers.Adam(), metrics =['accuracy'])\r\n    history = model.fit(x=train_dataset, epochs=EPOCHS,validation_data=test_dataset,\r\n                        steps_per_epoch=STEPS_PER_EPOCH,validation_steps=STEPS_PER_EPOCH,\r\n                        callbacks=callbacks)\r\n    pd.DataFrame(history.history).to_csv(os.path.join(model_folder,\"DSIFT_Training_History.csv\"),index=False)\r\n`\r\n**\r\nProvide a reproducible test case that is the bare minimum necessary to generate\r\nthe problem. If possible, please share a link to Colab/Jupyter/any notebook.\r\n\r\n**\r\nTrain for 5000 steps, validate for 5000 steps\r\nEpoch 1/15\r\n5000/5000 [==============================] - 5142s 1s/step - loss: 3.5599e-04 - accuracy: 0.9999 - val_loss: 0.1393 - val_accuracy: 0.9757\r\nEpoch 2/15\r\n5000/5000 [==============================] - 5206s 1s/step - loss: 0.0346 - accuracy: 0.9971 - val_loss: 8.6923e-06 - val_accuracy: 1.0000\r\nEpoch 3/15\r\n5000/5000 [==============================] - 5217s 1s/step - loss: 3.7841e-04 - accuracy: 1.0000 - val_loss: 3.2933e-07 - val_accuracy: 1.0000\r\nEpoch 4/15\r\n5000/5000 [==============================] - 5264s 1s/step - loss: 7.6284e-04 - accuracy: 0.9999 - val_loss: 3.1577e-06 - val_accuracy: 1.0000\r\nEpoch 5/15\r\n5000/5000 [==============================] - 5335s 1s/step - loss: 0.0000e+00 - accuracy: 1.0000 - val_loss: 1.0950e-06 - val_accuracy: 1.0000\r\nEpoch 6/15\r\n5000/5000 [==============================] - 5223s 1s/step - loss: 5.6489e-04 - accuracy: 0.9999 - val_loss: 1.1722e-05 - val_accuracy: 1.0000\r\nEpoch 7/15\r\n5000/5000 [==============================] - 5353s 1s/step - loss: 1.2962e-05 - accuracy: 1.0000 - val_loss: 0.0000e+00 - val_accuracy: 1.0000\r\nEpoch 8/15\r\n5000/5000 [==============================] - 5390s 1s/step - loss: 0.0000e+00 - accuracy: 1.0000 - val_loss: 0.0000e+00 - val_accuracy: 1.0000\r\nEpoch 9/15\r\n5000/5000 [==============================] - 5487s 1s/step - loss: 0.0000e+00 - accuracy: 1.0000 - val_loss: 0.0000e+00 - val_accuracy: 1.0000\r\nEpoch 10/15\r\n5000/5000 [==============================] - 5761s 1s/step - loss: 3.3989e-04 - accuracy: 0.9999 - val_loss: 1.2558e-08 - val_accuracy: 1.0000\r\nEpoch 11/15\r\n4999/5000 [============================>.] - ETA: 0s - loss: 1.1383e-08 - accuracy: 1.0000/var/spool/pbs/mom_priv/jobs/6135009.pbsserver.SC: line 26:  5302 Killed                  singularity run --nv -B ${FAST_DRIVE}:/p/work3/srini ./tensorflow_2_0_0-gpu_tcmalloc.img python /p/work3/srini/python_scripts/Vis_to_Vis_mapping.py\r\nStart Epilogue v2.5.3 Tue Aug 25 14:41:53 UTC 2020 \r\nMemory usage reported in GB\r\n                    % of     user     user     user    total    total\r\nNode               limit      max    limit  current  current     phys\r\ngaffney-g05       100.00   365.00   365.00     0.02     5.57   377.33\r\nMemory summary:\r\n\t\tmin  365.00 GB\r\n\t\tmax  365.00 GB\r\n\t\tave  365.00 GB\r\nOut of Memory condition reached, job memory usage should be reevaluated.\r\n** Include any logs or source code that would be helpful to\r\ndiagnose the problem. If including tracebacks, please include the full\r\ntraceback. Large logs and files should be attached.\r\n", "comments": ["@s0r2637 \r\nPlease share complete stand alone indented code for us to replicate the issue faced or if possible share colab gist with error faced.\r\nCan you verify if there is any other python code running in parallel, or anything in parallel consuming memory.", "I shared with you all the code I can.  There are small modules that I import.  It will be hard to share all those modules.  Is there anything specifically you are looking for?  As far as I know,  there weren;t any other python codes running in parallel.  I was running my tensorflow training inside a singularity container.", "@s0r2637 \r\nPlease share a colab gist with the issue reported.\r\n\r\n[you could use [this](https://colab.sandbox.google.com/#create=true&language=python3) link to run the code and share the Gist (File -> Save a copy as Github gist) with us. Thanks!", "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.\n", "Closing as stale. Please reopen if you'd like to work on this further.\n", "Are you satisfied with the resolution of your issue?\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42661\">Yes</a>\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42661\">No</a>\n"]}, {"number": 42659, "title": "How to print Quantization Aware Training Model Int8 weights without TFLite", "body": "Hi, I I've been trying to [Quantization aware training in Keras example](https://www.tensorflow.org/model_optimization/guide/quantization/training_example)\r\n\r\nI thought QAT Model weight data type is FP32, but it's real value represents fixed-point number.\r\nI want to know how to print fixed-point number of weights without converting TFLite.\r\n\r\nThank you.", "comments": ["After `model.fit` cell in the colab, save the quantization aware model in `h5` format using `model.save` method.\r\nFurther use [netron web browser](https://github.com/lutzroeder/netron) application to view the weights of the saved model.\r\nYou may also use TensorBoard to visualize the op-level graph and inspect weights.", "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.\n", "Closing as stale. Please reopen if you'd like to work on this further.\n", "> After `model.fit` cell in the colab, save the quantization aware model in `h5` format using `model.save` method.\r\n> Further use [netron web browser](https://github.com/lutzroeder/netron) application to view the weights of the saved model.\r\n> You may also use TensorBoard to visualize the op-level graph and inspect weights.\r\n\r\nIt is a good idea to visualize the weights in the output model this way. However, after QAT, what we can see are not INT8 weights but FP32 ones in a wrapper."]}, {"number": 42658, "title": "Data shape mismatch in custom training with 'train_step'  and `__get_item__`", "body": "- TF 2.0: `python -c \"import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)\"` : `unknown 2.2.0`\r\n\r\n## Problem description \r\nI am developing a custom model training by overriding `train_step` inherited from `tf.keras.Model` and `__getitem__` of my data generator inherited from `tf.keras.utils.Sequence`. The `__get_item__` method returns the following data:\r\n\r\n`return [train_data, observed_data]`\r\nwhere `train_data` and `observed_data` are numpy arrays with shape (20, 92)\r\n\r\nHowever, when I receive them in `train_step` function, the shapes of these variables are not correct: \r\nIn `train_step` method, I extract the data as follows: \r\n`train_data, observed_data = data[0]` \r\n\r\nand here is what I get: \r\n\r\n- `train_data Tensor(\"IteratorGetNext:0\", shape=(None, None), dtype=float32)`\r\n- `observed_data Tensor(\"IteratorGetNext:1\", shape=(None, None), dtype=float32)`\r\n\r\n## The expected behavior\r\nI am not sure if this is a bug or not, but the expected shape of these tensors should be as good as what is specified in `__get_item__` method.", "comments": ["@Hamidreza3252 \r\nPlease provide complete indented stand alone code for us to replicate the issue faced or if possible share a colab gist with the issue reported for us to analyse. Thanks!", "@Saduf2019 \r\nI invited you to my repo, https://github.com/Hamidreza3252/HI-VAE . Please accept and you will get access to my code. \r\nThe code is under development, so in order to see the issue, please follow these steps:\r\n1. After clone, run `main_scripts.py` in debug mode\r\n2. The code works up to line 117, `vae_model.fit`, so suggest to put a break-point there.\r\n3. The `__get_item__` method is implemented in `hivae_data_generator.py`. Please look for the method and watch what it returns, (the numpy arrays, as explained in the issue above)\r\n4. The `train_step` function is overridden in `vae_base_model.py`. In lines between 205 and 214 you can watch the data passed to `train_step` method, as described in the issue above, with wrong/ not-specified shapes.", "@Saduf2019  and @gowthamkpr   Please let me know if you could reproduce my problem", "Hi @Hamidreza3252, are you still facing this issue? If so, please provide a minimal reproducible example.", "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.\n", "Closing as stale. Please reopen if you'd like to work on this further.\n", "Are you satisfied with the resolution of your issue?\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42658\">Yes</a>\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42658\">No</a>\n"]}, {"number": 42657, "title": "Tensorflow go installation fail (cannot find import)", "body": "<em>Please make sure that this is a build/installation issue. As per our [GitHub Policy](https://github.com/tensorflow/tensorflow/blob/master/ISSUES.md), we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:build_template</em>\r\n\r\n**System information**\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 20.04\r\n- TensorFlow installed from (source or binary):\r\n- TensorFlow version:\r\n- Python version: 3.8\r\n- Installed using virtualenv? pip? conda?:\r\n- Bazel version (if compiling from source): 3.1\r\n- GCC/Compiler version (if compiling from source):9.3\r\n- CUDA/cuDNN version:\r\n- GPU model and memory:\r\n\r\n\r\n\r\n**Describe the problem**\r\nI have installed C , following the instructions from https://www.tensorflow.org/install/lang_c and when i ran:                       go get github.com/tensorflow/tensorflow/tensorflow/go\r\nI get the following error:\r\n../github.com/tensorflow/tensorflow/tensorflow/go/saved_model.go:25:2: cannot find package \"github.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto\" in any of:\r\n                     /usr/local/go/src/github.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto (from $GOROOT)\r\n\t            /home/nyein/go/src/github.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto (from $GOPATH)\r\n\r\nI tried following this fix here at https://github.com/tensorflow/tensorflow/issues/14546#issuecomment-347433966 and I checkout from r1.11 and I am getting this error now:\r\n/usr/bin/ld: $WORK/b032/_x007.o: in function `_cgo_d969e426e2e3_Cfunc_TF_DeviceListCount':\r\n/tmp/go-build/cgo-gcc-prolog:115: undefined reference to `TF_DeviceListCount'\r\n/usr/bin/ld: $WORK/b032/_x007.o: in function `_cgo_d969e426e2e3_Cfunc_TF_DeviceListMemoryBytes':\r\n/tmp/go-build/cgo-gcc-prolog:136: undefined reference to `TF_DeviceListMemoryBytes'\r\n/usr/bin/ld: $WORK/b032/_x007.o: in function `_cgo_d969e426e2e3_Cfunc_TF_DeviceListName':\r\n/tmp/go-build/cgo-gcc-prolog:157: undefined reference to `TF_DeviceListName'\r\n/usr/bin/ld: $WORK/b032/_x007.o: in function `_cgo_d969e426e2e3_Cfunc_TF_DeviceListType':\r\n/tmp/go-build/cgo-gcc-prolog:178: undefined reference to `TF_DeviceListType'\r\n/usr/bin/ld: $WORK/b032/_x007.o: in function `_cgo_d969e426e2e3_Cfunc_TF_SessionListDevices':\r\n/tmp/go-build/cgo-gcc-prolog:234: undefined reference to `TF_SessionListDevices'\r\n/usr/bin/ld: $WORK/b032/_x007.o: in function `_cgo_d969e426e2e3_Cfunc_TF_DeleteDeviceList':\r\n/tmp/go-build/cgo-gcc-prolog:62: undefined reference to `TF_DeleteDeviceList'\r\ncollect2: error: ld returned 1 exit status\r\n\r\nCan someone point me to right right direction on fixing this problem?\r\n", "comments": ["Try checking out v2.1.0 and run the go get command again. To verify try the go test command with the same endpoint", "I tried checking out v2.1.0 and it does not work either. But then my test successfully build after I changed the tensorflow C **to version 1.15.** Does it mean that tensorflow-go is incompatible with tensorflow-2? ", "@plyte,\r\nCan you please try Building `Tensorflow` with latest version of `Tensorflow`, i.e., `2.3` and let us know how it goes. Thank you! ", "@rmothukuru oh yeah tensorflow c 2.3.0 as of today works with tensorflow v2.1.0. The latest version has issues with the \"go get\" command as reported by @nyeinsoe26.", "@nyeinsoe26 can you run the go get again, but include a -v in your declaration aka:\r\n`go get -v github.com/tensorflow/tensorflow/tensorflow/go`\r\n\r\nthen comment the results please", "nyein@nyein:~/Downloads$ ./hello_tf\r\nHello from TensorFlow C library version 2.3.0\r\nnyein@nyein:~/Downloads$ go get -v  github.com/tensorflow/tensorflow/tensorflow/go\r\ngithub.com/tensorflow/tensorflow (download)\r\ncannot find package \"github.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto\" in any of:\r\n\t/usr/local/go/src/github.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto (from $GOROOT)\r\n\t/home/nyein/go/src/github.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto (from $GOPATH)\r\n\r\nIt seems I am still having this issue with tensorflow C 2.3.0. Its working fine for me with tensorflow C 1.15", "Oh sorry I didnt read the above messages clearly. I checked out from v2.1.0, my test build successfully now.\r\n\r\nnyein@nyein:~/go/src/github.com/tensorflow/tensorflow/tensorflow/go$ go test github.com/tensorflow/tensorflow/tensorflow/go\r\n\r\n> # github.com/tensorflow/tensorflow/tensorflow/go\r\n> /usr/bin/ld: /usr/local/lib/libtensorflow.so: .dynsym local symbol at index 851 (>= sh_info of 2)\r\n> /usr/bin/ld: /usr/local/lib/libtensorflow.so: .dynsym local symbol at index 1959 (>= sh_info of 2)\r\n> /usr/bin/ld: /usr/local/lib/libtensorflow.so: .dynsym local symbol at index 2329 (>= sh_info of 2)\r\n> /usr/bin/ld: /usr/local/lib/libtensorflow.so: .dynsym local symbol at index 2517 (>= sh_info of 2)\r\n> /usr/bin/ld: /usr/local/lib/libtensorflow.so: .dynsym local symbol at index 2732 (>= sh_info of 2)\r\n> /usr/bin/ld: /usr/local/lib/libtensorflow.so: .dynsym local symbol at index 2733 (>= sh_info of 2)\r\n> # github.com/tensorflow/tensorflow/tensorflow/go.test\r\n> /usr/bin/ld: /usr/local/lib/libtensorflow.so: .dynsym local symbol at index 851 (>= sh_info of 2)\r\n> /usr/bin/ld: /usr/local/lib/libtensorflow.so: .dynsym local symbol at index 1959 (>= sh_info of 2)\r\n> /usr/bin/ld: /usr/local/lib/libtensorflow.so: .dynsym local symbol at index 2329 (>= sh_info of 2)\r\n> /usr/bin/ld: /usr/local/lib/libtensorflow.so: .dynsym local symbol at index 2517 (>= sh_info of 2)\r\n> /usr/bin/ld: /usr/local/lib/libtensorflow.so: .dynsym local symbol at index 2732 (>= sh_info of 2)\r\n> /usr/bin/ld: /usr/local/lib/libtensorflow.so: .dynsym local symbol at index 2733 (>= sh_info of 2)\r\n> ok  \tgithub.com/tensorflow/tensorflow/tensorflow/go\t0.152s\r\n\r\nThis is with tensorflow C 2.3.0. It works fine after checking out from v2.1.0. Thank you for all the help @plyte  @rmothukuru ", "\ud83c\udf89 \ud83c\udf88 \ud83c\udf89 \r\nGlad to help! Good luck with your tensorflow/golang adventures!", "Thanks. Since this is resolved, I will be closing the issue.", "Are you satisfied with the resolution of your issue?\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42657\">Yes</a>\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42657\">No</a>\n"]}, {"number": 42656, "title": "[ROCm] Removing TPU tests from the ROCm CSB + CI scripts.", "body": "The ROCm CSB + CI scripts were not skipping the tests within `//tensorflow/core/tpu`.\r\nSome of the targets within `//tensorflow/core/tpu` have had build errors creep into them over the last week, resulting in the ROCm CSB and CI scripts failing due to those build errors.\r\n\r\nThis commit simply updates the ROCm CSB + CI scripts to skip the tests within `//tensorflow/core/tpu`.\r\n\r\n-------------------------------------------\r\n\r\n/cc @chsigg @cheshire @nvining-work \r\n\r\n", "comments": ["@chsigg gentle ping", "@chsigg gentle ping", "@chsigg gentle ping", "@chsigg gentle ping", "@chsigg gentle ping"]}, {"number": 42655, "title": "Cannot see per operator profiling in android studio with tensorflow lite models", "body": "## URL(s) with the issue:\r\n\r\nPlease provide a link to the documentation entry, for example:\r\n\r\nhttps://www.tensorflow.org/lite/performance/measurement#adding_trace_events_in_java_code\r\n\r\nhttps://www.tensorflow.org/lite/performance/images/as_traces.png\r\n\r\n## Description of issue (what needs changing):\r\n\r\nI've added the trace sections to the code around the ``` interpreter.run() ``` command. When I start to profile the app I cannot see \r\nthe per operator profiling as we can see in the second link.\r\n\r\n### Clear description\r\n\r\nThis will help us in seeing how much time is being taken by each layer in the tflite model and we can change our models\r\naccording to that.\r\n\r\n### My Code\r\n\r\n``` \r\nTrace.beginSection(\"runInference\");\r\n tflite_sr.run(ybuffer,sr_y_channel);\r\n Trace.endSection(); \r\n```", "comments": ["@anidh,\r\nIn order to expedite the trouble-shooting process, could you please provide the complete code to reproduce the issue reported here and also the TensorFlow version you are using. Thanks!", "Hi @amahendrakar ,\r\nThanks for replying. The tensorflow version is 1.15 to convert to a tflite file\r\nThe code which i'm using to do the inference is \r\n``` public ByteBuffer sr_exec(byte[] inp)  {\r\n\r\n    //gpuDelegate = new GpuDelegate();\r\n    //tfliteOptions_sr.addDelegate((gpuDelegate));\r\n    //tfliteOptions_sr.setNumThreads(numThreads);\r\n\r\n    ByteBuffer ybuffer = ByteBuffer.allocateDirect(i_prod).order(ByteOrder.nativeOrder());\r\n    ybuffer.rewind();\r\n    ybuffer.put(y_channel_inp);\r\n\r\n    ByteBuffer out_channel = ByteBuffer.allocateDirect(o_prod).order(ByteOrder.nativeOrder());\r\n\r\n    try {\r\n      Trace.beginSection(\"recognizeImage\");\r\n      //long startTime = System.currentTimeMillis();\r\n      Trace.beginSection(\"runInference\");\r\n      tflite_sr.run(inp,out_channel);\r\n      Trace.endSection();\r\n\r\n      //long stopTime = System.currentTimeMillis();\r\n      //long elapsedTime = stopTime - startTime;\r\n      //System.out.println(\"&&&&&&&&&&&&&&&&&&&&&&\"+elapsedTime);\r\n      Trace.endSection();\r\n\r\n    }\r\n    catch (Exception e) {\r\n      Log.d(TAG, \"Error in Inference: \"+e);\r\n    }\r\n    return out_channel;\r\n  } ```\r\n```\r\nThis is the code which is used for the inference, the ip buffer is of int type. When i do the profiling on the mobile device I am not able to see the layer wise timing as what has been mentioned in the documentation.\r\n\r\nThanks,\r\nAnidh", "Hi Xunkai & Lu, can you guys take a look?\r\n\r\nthanks", "Hi Juho, could you please take a look at this issue?", "Hi Anidh,\r\nI'd like to ask some details about the running environment.\r\n\r\n- Can you see 'runInference' trace while you cannot see per-operator profiling result?\r\n\r\n- Did you use org.tensorflow:tensorflow-lite:0.0.0-nightly for dependency? tensorflow-lite:2.3.0 or older stable aar libraries don't have this feature.\r\n\r\n- Is the nightly library is up-to-date version? In your app's build.gradle file add 'changing = true', to make sure the library is automatically refreshed.\r\n  implementation('org.tensorflow:tensorflow-lite:0.0.0-nightly') { changing = true }\r\n\r\n- Did you run the command 'adb shell setprop debug.tflite.trace 1' before you started profiler?\r\n  FYI, this property value is removed if you reboot the device.\r\n\r\n- If everything is configured correctly, can you try with https://github.com/tensorflow/examples/tree/master/lite/examples/image_classification/android or other tensorflow lite examples? When I tested with the examples, it worked well.\r\n", "Hi @hajuho ,\r\n\r\nThanks a lot for the quick reply. Here are some of the observations in relation to your comment.\r\n\r\n> Can you see 'runInference' trace while you cannot see per-operator profiling result?\r\n\r\nYes I'm able to see the \"runInference\" trace when I'm doing a systrace.\r\n\r\n>Did you use org.tensorflow:tensorflow-lite:0.0.0-nightly for dependency? tensorflow-lite:2.3.0 or older stable aar libraries don't have this feature.\r\n\r\nI was using a stable build of the aar file. I changed it to ``` implementation 'org.tensorflow:tensorflow-lite:0.0.0-nightly' ```  \r\n\r\n> Is the nightly library is up-to-date version? In your app's build.gradle file add 'changing = true', to make sure the library is automatically refreshed.\r\nimplementation('org.tensorflow:tensorflow-lite:0.0.0-nightly') { changing = true }\r\n\r\nI was not using the nightly library and thus never used this flag. I have now included the flag.\r\n\r\n> Did you run the command 'adb shell setprop debug.tflite.trace 1' before you started profiler?\r\nFYI, this property value is removed if you reboot the device.\r\n\r\nNo, I was not using any such command and I have used this command now and it's now **showing** me all of the layers and timing of each and every layer.\r\n\r\nI still have some doubt. The inference I did was for some 100 frames or such and continuously is the timing which is reported is cumulative or it is average over all of the runs. Moreover if I want to see the timing for only one of the frames is there nay method to do it for only one run?\r\n\r\nSorry I closed the issue by mistake and thus reopening the issue. Thanks a lot for your help.\r\n", "Hi Anidh,\r\nI guess you may see a result like https://www.tensorflow.org/lite/performance/images/as_traces.png\r\nThe result windows of CPU profile consists of two panes. The left one is timeline view of traces and the right one is analysis report.\r\nIf you see the 'All threads' tab of analysis report, it shows the cumulative timing values.\r\nYou can click each section of running in the left pane. For example, if you click one frame of the 'runInference' sections, there will be a 'runInference' tab on the right pane and it will show the report for only that frame including children sections such as tflite op invocations. Moreover, if you click another frame of 'runInference' sections, the analysis report will show the value for the new frame.", "> Hi Anidh,\r\n> I guess you may see a result like https://www.tensorflow.org/lite/performance/images/as_traces.png\r\n> The result windows of CPU profile consists of two panes. The left one is timeline view of traces and the right one is analysis report.\r\n> If you see the 'All threads' tab of analysis report, it shows the cumulative timing values.\r\n> You can click each section of running in the left pane. For example, if you click one frame of the 'runInference' sections, there will be a 'runInference' tab on the right pane and it will show the report for only that frame including children sections such as tflite op invocations. Moreover, if you click another frame of 'runInference' sections, the analysis report will show the value for the new frame.\r\n\r\n@hajuho \r\n\r\nThanks a lot. The steps you mentioned worked perfectly. "]}, {"number": 42654, "title": "TFLite C++ API docs seems broken", "body": "## URL(s) with the issue:\r\n\r\nhttps://www.tensorflow.org/lite/api_docs/cc\r\n\r\n## Description of issue (what needs changing):\r\n\r\nThe C++ API references for TFLite are missing many important components on tensorflow.org. For example, the docs for `tflite::FlatBufferModel` and `tflite::InterpreterBuilder` are completely gone, which used to be there the last time I checked, about two months ago.\r\n", "comments": ["@katherlee Looks like this was resolved. I have checked all the links on the TF page https://www.tensorflow.org/lite/api_docs/cc . All the links are working.\r\n\r\nPlease verify once and close the issue. Thanks!", "Indeed, thanks!"]}, {"number": 42653, "title": "(esp32) fixes invalid use of struct TfLiteTensor from common.h header", "body": "TF_LITE_STATIC_MEMORY will be set if tflite for uc lib is compiled with that flag.\r\nOtherwise struct TfLiteTensor is broken when used in application code.\r\n\r\nfixes  #42165", "comments": ["Thanks for contributing to TensorFlow Lite Micro.\r\n\r\nTo keep this process moving along, we'd like to make sure that you have completed the items on this list:\r\nRead the [contributing guidelines for TensorFlow Lite Micro](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/micro/CONTRIBUTING.md)\r\nCreated a [TF Lite Micro Github issue](https://github.com/tensorflow/tensorflow/issues/new?labels=comp%3Amicro&template=70-tflite-micro-issue.md)\r\nLinked to the issue from the PR description\r\n\r\nWe would like to have a discussion on the Github issue first to determine the best path forward, and then proceed to the PR review.", "@gbaned: Pull request is linked with #42165"]}, {"number": 42652, "title": "(esp32) fixes invalid use of struct TfLiteTensor from common.h header.", "body": "Wrongly created pull request. I created a new one.", "comments": ["\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Ftensorflow%2Ftensorflow%2Fpull%2F42652) for more info**.\n\n<!-- need_sender_cla -->", "@googlebot I signed it!", "We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and then comment `@googlebot I fixed it.`. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Ftensorflow%2Ftensorflow%2Fpull%2F42652) for more info**.\n\n<!-- need_author_cla -->", "I will create a new pullrequest."]}, {"number": 42651, "title": "Add CMSIS-NN SVDF kernel.", "body": "This pull request adds the optimized version of the (int8) SVDF kernel in CMSIS-NN to TensorFlow Lite Micro.\r\n\r\nThe pull request to CMSIS-NN is still pending, and the CMSIS version in third_party_downloads.inc will need to be updated once that is merged.\r\n\r\nFixes #42650", "comments": ["> This looks great - just one nitpick:\r\n> Since this is the first time we are duplicating the SVDF float code (xtensa_hifimini does not implement a floating point SVDF), do you think we can extract the contents of EvalFLoatSVDF into tensorflow/lite/kernels/internal/reference/svdf.h and share the implementation between the CMSIS-NN kernel and the reference kernel?\r\n> \r\n> Let me know if this sounds reasonable to you.\r\n\r\nSounds good, I'll update the pull request with that change.", "> This looks great - just one nitpick:\r\n> Since this is the first time we are duplicating the SVDF float code (xtensa_hifimini does not implement a floating point SVDF), do you think we can extract the contents of EvalFLoatSVDF into tensorflow/lite/kernels/internal/reference/svdf.h and share the implementation between the CMSIS-NN kernel and the reference kernel?\r\n> \r\n> Let me know if this sounds reasonable to you.\r\n\r\nI had a bit of a look at it, and there seems to already be a EvalFloatSVDF() in tensorflow/kernels/inernal/reference/svdf.h. The difference between that EvalFloatSVDF() and the one found in micro is (among other things) that the micro-version have TfLiteEvalTensor as input. Should I still copy over the EvalFloatSVDF() function from micro to that file?\r\n\r\nEDIT: On second, that won't work due to the fact that tensorflow/lite/kernels/reference/svdf.h depends on tensorflow/lite/kernels/reference/tensor_utils.h, which in turn depends on Eigen. @njeffrie do you have a preferred solution for this? ", "> It looks like we need to do some internal clean-up for the shared SVDF code before it will work for this. Let's land this first then we can internally manage extracting the float version into a common kernel in a future change.\r\n\r\nSounds good! Let me know if you need anything from my end.", "Hi @jenselofsson, I am curious how you use this kernel? Is there a python implementation of svdf that converts to this tf lite op?", "@jenselofsson Can you please resolve conflicts? Thanks!", "@gbaned Done!"]}, {"number": 42650, "title": "Add optimized SVDF kernel from CMSIS-NN", "body": "@tensorflow/micro\r\n\r\n**System information**\r\n- Host OS Platform and Distribution (e.g., Linux Ubuntu 16.04): NA\r\n- TensorFlow installed from (source or binary): NA\r\n- Tensorflow version (commit SHA if source): NA\r\n- Target platform (e.g. Arm Mbed OS, Arduino Nano 33 etc.): ARM Cortex-M\r\n\r\nAn optimized version of SVDF will soon be present in CMSIS-NN, and the \"glue\" code for it should be added to TensorFlow Lite Micro.", "comments": ["Fixed in #42651 ", "Are you satisfied with the resolution of your issue?\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42650\">Yes</a>\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42650\">No</a>\n"]}, {"number": 42648, "title": "Calculation of effective scale differs from TFLite implementation in quantize kernel", "body": "@tensorflow/micro\r\n\r\n**Describe the problem**\r\n\r\nIn the quantize kernel the calculation of the effective scale differs slightly between TFLite and TFLu. We found that in some cases this results in single bit differences in output. Is this difference in implementation intentional?\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/de1a269b21cbad035faa095d8ce88fc2d680cf4a/tensorflow/lite/kernels/quantize.cc#L129-L133\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/de1a269b21cbad035faa095d8ce88fc2d680cf4a/tensorflow/lite/micro/kernels/quantize.cc#L75-L79\r\n", "comments": ["Thanks for catching this. This is oversight on our part. I have created a PR to fix this."]}, {"number": 42647, "title": "whether is it better to add class_weight to validation dataset or not?", "body": "<em>Please make sure that this is a feature request. As per our [GitHub Policy](https://github.com/tensorflow/tensorflow/blob/master/ISSUES.md), we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:feature_template</em>\r\n\r\n\r\n**System information**\r\n- TensorFlow version (you are using): 2.x\r\n- Are you willing to contribute it (Yes/No): Yes\r\n\r\n\r\n\r\n**Describe the feature and the current behavior/state.**\r\n\r\n## set `class_weight` to validation dataset\r\n\r\nIt is common for us to set `class_weight` to something like inverse of class supports  to `Model.fit()` when dealing with imbalance classification problems. And as the code implemented in `tensorflow.python.keras.engine.data_adapter._make_class_weight_map_fn`, `class_weight` will eventually be converted to `sample_weight`.\r\n\r\nHowever, the current implementation of `Model.fit()` only add `class_weight` to the training dataset but not to the validation dataset\r\n\r\n```python\r\n# for training dataset\r\ndata_handler = data_adapter.DataHandler(\r\n  x=x,\r\n  y=y,\r\n  sample_weight=sample_weight,\r\n  batch_size=batch_size,\r\n  steps_per_epoch=steps_per_epoch,\r\n  initial_epoch=initial_epoch,\r\n  epochs=epochs,\r\n  shuffle=shuffle,\r\n  class_weight=class_weight,\r\n  max_queue_size=max_queue_size,\r\n  workers=workers,\r\n  use_multiprocessing=use_multiprocessing,\r\n  model=self,\r\n  steps_per_execution=self._steps_per_execution)\r\n\r\n# for validation dataset\r\nself._eval_data_handler = data_adapter.DataHandler(\r\n    x=val_x,\r\n    y=val_y,\r\n    sample_weight=val_sample_weight,\r\n    batch_size=validation_batch_size or batch_size,\r\n    steps_per_epoch=validation_steps,\r\n    initial_epoch=0,\r\n    epochs=1,\r\n    max_queue_size=max_queue_size,\r\n    workers=workers,\r\n    use_multiprocessing=use_multiprocessing,\r\n    model=self,\r\n    steps_per_execution=self._steps_per_execution)\r\n```\r\n\r\n\r\nwhich will output training loss and validation loss with (maybe) large gap, such as:\r\n\r\n```\r\nEpoch 2/10000\r\n128/128 [==============================] - 63s 489ms/step - loss: 379.6439 - acc: 0.0073 - acc_f1: 0.0077 - cm: 10485.7598 - val_loss: 4.9299 - val_acc: 0.0076 - val_acc_f1: 0.0081 - val_cm: 2621.4399\r\n128/128 [==============================] - 63s 492ms/step - loss: 374.9651 - acc: 0.0078 - acc_f1: 0.0099 - cm: 10485.7598 - val_loss: 4.8990 - val_acc: 0.0078 - val_acc_f1: 0.0120 - val_cm: 2621.4399\r\n```\r\n\r\n**I am wondering whether it is a good practice to add the same `class_weight` parameter to the training dataset and the validation dataset, in order to keep training loss and validation loss with the same scale**.\r\n\r\n\r\n## normalized loss by the sum of `sample_weight`\r\n\r\nAnd by the way, while reducing the loss by the size of a batch, the current loss is normalized by the size of `weighted_loss` (ref. to `tensorflow.python.keras.utils.losses_utils.reduce_weighted_loss`),  **whether is it better to normalize the loss by the sum of `sample_weight`**?\r\n\r\n\r\n\r\n**Will this change the current api? How?**\r\nAlmost no changes.\r\n\r\nFor adding `class_weight` to validation dataset, only add `class_weight=class_weight` when calling `data_adapter.DataHandler`\r\n\r\n```python\r\nself._eval_data_handler = data_adapter.DataHandler(\r\n    x=val_x,\r\n    y=val_y,\r\n    sample_weight=val_sample_weight,\r\n    batch_size=validation_batch_size or batch_size,\r\n    steps_per_epoch=validation_steps,\r\n    initial_epoch=0,\r\n    epochs=1,\r\n    shuffle=shuffle,\r\n    class_weight=class_weight,\r\n    max_queue_size=max_queue_size,\r\n    workers=workers,\r\n    use_multiprocessing=use_multiprocessing,\r\n    model=self,\r\n    steps_per_execution=self._steps_per_execution)\r\n```\r\n\r\n\r\nFor normalizing loss with the sum of `sample_weight`,  only changes the code snippet of `python.keras.utils.losses_utils.compute_weighted_loss`\r\n\r\nfrom \r\n\r\n```python\r\n    ....\r\n    # Apply reduction function to the individual weighted losses.\r\n    loss = reduce_weighted_loss(weighted_losses, reduction)\r\n    # Convert the result back to the input type.\r\n    loss = math_ops.cast(loss, input_dtype)\r\n    return loss\r\n```\r\nto \r\n\r\n```python\r\n   \r\n    if sample_weight is None:\r\n      sample_weight = array_ops.ones_like(losses, dtype=losses.dtype)\r\n   ...\r\n    # Apply reduction function to the individual weighted losses\r\n    if reduction == ReductionV2.NONE:\r\n      loss = weighted_losses\r\n    else:\r\n      loss = math_ops.reduce_sum(weighted_losses)\r\n      if reduction == ReductionV2.SUM_OVER_BATCH_SIZE:\r\n        loss = _safe_mean(loss, math_ops.reduce_sum(sample_weight))\r\n    \r\n    # Convert the result back to the input type.\r\n    loss = math_ops.cast(loss, input_dtype)\r\n    return loss\r\n```\r\n\r\n\r\n**Who will benefit with this feature?**\r\neveryone if it is a good practice.\r\n\r\n**Any Other info.**\r\n", "comments": ["@loveychen You are not supposed to apply weights to your validation set since it is supposed to measure your model's performance. If you'll do that you'll probably get better results for validation but once your model is deployed it will perform worse on new data. Weighting, resampling techniques etc. - they all should be done on the training set only!", "thanks, @gowthamkpr. You are right, the loss gap is not that important, and we should keep our eyes on the performance on new data."]}, {"number": 42646, "title": "Fix dlpack device for int32", "body": "Using BackingDeviceName instead of DeviceName, to set the correct device for int32 tensors\r\nFix https://github.com/tensorflow/tensorflow/issues/41307", "comments": ["I just fixed the lint error. But have no idea about why windows build failed", "Fixed lint problem and merge with the latest master. Hope this could fix the CI errors "]}, {"number": 42645, "title": "ImportError: Traceback (most recent call last) while importing the tensorflow", "body": "**import tensorflow as**\r\nI am getting following error error. Importing at jupyter notebook. Python version is 3.8.3.\r\n\r\n---------------------------------------------------------------------------\r\nImportError                               Traceback (most recent call last)\r\n~\\anaconda3\\lib\\site-packages\\tensorflow\\python\\pywrap_tensorflow.py in <module>\r\n     63   try:\r\n---> 64     from tensorflow.python._pywrap_tensorflow_internal import *\r\n     65   # This try catch logic is because there is no bazel equivalent for py_extension.\r\n\r\nImportError: DLL load failed while importing _pywrap_tensorflow_internal: The specified module could not be found.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nImportError                               Traceback (most recent call last)\r\n<ipython-input-1-64156d691fe5> in <module>\r\n----> 1 import tensorflow as tf\r\n\r\n~\\anaconda3\\lib\\site-packages\\tensorflow\\__init__.py in <module>\r\n     39 import sys as _sys\r\n     40 \r\n---> 41 from tensorflow.python.tools import module_util as _module_util\r\n     42 from tensorflow.python.util.lazy_loader import LazyLoader as _LazyLoader\r\n     43 \r\n\r\n~\\anaconda3\\lib\\site-packages\\tensorflow\\python\\__init__.py in <module>\r\n     38 # pylint: disable=wildcard-import,g-bad-import-order,g-import-not-at-top\r\n     39 \r\n---> 40 from tensorflow.python.eager import context\r\n     41 \r\n     42 # pylint: enable=wildcard-import\r\n\r\n~\\anaconda3\\lib\\site-packages\\tensorflow\\python\\eager\\context.py in <module>\r\n     33 from tensorflow.core.protobuf import config_pb2\r\n     34 from tensorflow.core.protobuf import rewriter_config_pb2\r\n---> 35 from tensorflow.python import pywrap_tfe\r\n     36 from tensorflow.python import tf2\r\n     37 from tensorflow.python.client import pywrap_tf_session\r\n\r\n~\\anaconda3\\lib\\site-packages\\tensorflow\\python\\pywrap_tfe.py in <module>\r\n     26 \r\n     27 # pylint: disable=invalid-import-order,g-bad-import-order, wildcard-import, unused-import\r\n---> 28 from tensorflow.python import pywrap_tensorflow\r\n     29 from tensorflow.python._pywrap_tfe import *\r\n\r\n~\\anaconda3\\lib\\site-packages\\tensorflow\\python\\pywrap_tensorflow.py in <module>\r\n     81 for some common reasons and solutions.  Include the entire stack trace\r\n     82 above this error message when asking for help.\"\"\" % traceback.format_exc()\r\n---> 83   raise ImportError(msg)\r\n     84 \r\n     85 # pylint: enable=wildcard-import,g-import-not-at-top,unused-import,line-too-long\r\n\r\nImportError: Traceback (most recent call last):\r\n  File \"C:\\Users\\ssahu\\anaconda3\\lib\\site-packages\\tensorflow\\python\\pywrap_tensorflow.py\", line 64, in <module>\r\n    from tensorflow.python._pywrap_tensorflow_internal import *\r\nImportError: DLL load failed while importing _pywrap_tensorflow_internal: The specified module could not be found.\r\n\r\n\r\nFailed to load the native TensorFlow runtime.\r\n\r\nSee https://www.tensorflow.org/install/errors\r\n\r\nfor some common reasons and solutions.  Include the entire stack trace\r\nabove this error message when asking for help.", "comments": ["@ssahu2498,\r\nInstallation issues within the Anaconda environment are tracked in the Anaconda repo.\r\n\r\nCould you please submit a new issue using [this link](https://github.com/ContinuumIO/anaconda-issues/issues) and fill in the template, so that the issue can be tracked there. Thanks!", "I come cross the same problem", "> I come cross the same problem\r\n\r\n@chaizhongming,\r\nCould you please submit a new issue from [this link](https://github.com/tensorflow/tensorflow/issues/new/choose) and fill in the template, so that we can track the issue there. Thanks!", "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.\n", "Closing as stale. Please reopen if you'd like to work on this further.\n", "Are you satisfied with the resolution of your issue?\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42645\">Yes</a>\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42645\">No</a>\n", "Having the same issue currently, it was working yesterday with no issues and today it started giving errors even though I changed nothing. Why's this happening?", "@Khezkid,\r\nCould you please submit a new issue from [this link](https://github.com/tensorflow/tensorflow/issues/new/choose) and fill in the template, so that we can track the issue there. Thanks!\r\n", "![Capture](https://user-images.githubusercontent.com/81622361/112975850-9445d780-916d-11eb-8190-991b62599216.PNG)\r\nON \"ANACONDA.NAVIGATOR\" MAIN PAGE CHANGE THE setting of  \"APPLICATION ON TENSORFLOW OR TF\""]}, {"number": 42644, "title": "what  updates have been made in TF2.0 vs TF1.0 for c++ layer  such as  communication?", "body": "Recently  I  have been doing my model training  based on TF2.2(**without  eager**) and  TF1.10\u3002The result shows the TF2.2 have better performance than  TF1.10,  such as the training speed\u3002\r\nso\uff0cI wanna know  what updates have been made in TF2.2(without eager) to make  my model train faster\uff0csuch  as  communication in c++ layer  or  GPU driver?  \r\nHope to hear from you soon! Thanks!", "comments": ["Thanks for trying TF2 and your feedback. However, This question is better asked on [StackOverflow](http://stackoverflow.com/questions/tagged/tensorflow) since it is not a bug or feature request. There is also a larger community that reads questions there.\r\nThanks!\r\n"]}, {"number": 42643, "title": "TFLite Int8 Quantization Conversion - There are unresolved custom ops: []", "body": "**Error**\r\n```\r\nRuntimeError: Failed to initialize op resolver for calibration:\r\nThere are unresolved custom ops: []Encountered unresolved custom op: RandomStandardNormal.Node number 0 (RandomStandardNormal) failed to prepare.\r\n```\r\n\r\n**System information**\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04\r\n- TensorFlow installed from (source or binary): binary\r\n- TensorFlow version (or github SHA if from source): 2.3.0\r\n\r\n\r\n**Command used to run the converter or code if you\u2019re using the Python API**\r\nIf possible, please share a link to Colab/Jupyter/any notebook.\r\n\r\n```\r\nimport os, glob\r\nos.environ[\"CUDA_VISIBLE_DEVICES\"]=\"-1\"\r\nimport tensorflow.compat.v1 as tf\r\n\r\nfrom tensorflow.python.client import device_lib\r\nimport numpy as np\r\n\r\nimport faulthandler\r\nfaulthandler.enable()\r\n\r\nimport pdb\r\n\r\npath = os.path.dirname(os.path.abspath(__file__))\r\npb_model_name = \"model.pb\"\r\npb_model_path = os.path.join(path, pb_model_name)\r\n\r\nmodel_name = 'model_int8.tflite'\r\n\r\nif __name__ == '__main__':\r\n  with tf.device(\"/cpu:0\"):\r\n    configuration = tf.ConfigProto(allow_soft_placement=True, log_device_placement=True)\r\n    with tf.Session(config=configuration) as sess:\r\n      converter = tf.lite.TFLiteConverter.from_frozen_graph(\r\n        graph_def_file=pb_model_path,\r\n        # input_arrays=[\"device_0/wav_and_noisy:1\"],\r\n        input_arrays=[\"device_0/wav_and_noisy:1\"],\r\n        output_arrays=[\"device_0/g_ae_1/Tanh\"],\r\n        input_shapes={\"device_0/wav_and_noisy:1\": [100, 16384]}\r\n      )\r\n      converter.allow_custom_ops = True\r\n      # converter.experimental_new_converter = True\r\n      converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8,\r\n                                             tf.lite.OpsSet.SELECT_TF_OPS]\r\n      # converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8,\r\n      #                                        tf.lite.OpsSet.TFLITE_BUILTINS,\r\n      #                                        tf.lite.OpsSet.SELECT_TF_OPS]\r\n      converter.optimizations = [tf.lite.Optimize.DEFAULT]\r\n      # converter.target_spec.supported_types = [tf.int8]\r\n      converter.inference_input_type = tf.int8  # or tf.uint8\r\n      converter.inference_output_type = tf.int8  # or tf.uint8\r\n\r\n      def test():\r\n        pdb.set_trace()\r\n        zeros = np.zeros(shape=(1, 100, 16384), dtype='int8')\r\n        dataset = tf.data.Dataset.from_tensor_slices(zeros).batch(1)\r\n        yield [zeros]\r\n      converter.representative_dataset = test\r\n\r\n      # pdb.set_trace()\r\n      tflite_model = converter.convert()\r\n\r\n      tflite_model_size = open(model_name, 'wb').write(tflite_model)\r\n      print('TFLite Model is %d bytes' % tflite_model_size)\r\n```\r\n\r\nI've tried also including the `TFLITE_BUILTINS` in addition to `TFLITE_BUILTINS_INT8`. In other issues on github, I've seen that adding `SELECT_TF_OPS` solves errors similar to mine, but it did not fix it for me. \r\n\r\n**The output from the converter invocation**\r\n\r\n```\r\n2020-08-25 02:22:18.873117: W tensorflow/stream_executor/platform/default/dso_loader.cc:59] Could not load dynamic library 'libcudart.so.10.1'; dlerror: libcudart.so.10.1: cannot open shared object file: No such file or directory\r\n2020-08-25 02:22:18.873149: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\r\nWARNING:tensorflow:From convert_model_to_tflite_int8.py:24: experimental_run_functions_eagerly (from tensorflow.python.eager.def_function) is deprecated and will be removed in a future version.\r\nInstructions for updating:\r\nUse `tf.config.run_functions_eagerly` instead of the experimental version.\r\n2020-08-25 02:22:19.959195: W tensorflow/stream_executor/platform/default/dso_loader.cc:59] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\r\n2020-08-25 02:22:19.959229: W tensorflow/stream_executor/cuda/cuda_driver.cc:312] failed call to cuInit: UNKNOWN ERROR (303)\r\n2020-08-25 02:22:19.959253: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (ip-172-31-5-134): /proc/driver/nvidia/version does not exist\r\n2020-08-25 02:22:19.959493: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN)to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\r\nTo enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\r\n2020-08-25 02:22:19.984669: I tensorflow/core/platform/profile_utils/cpu_utils.cc:104] CPU Frequency: 2999995000 Hz\r\n2020-08-25 02:22:19.984899: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x3d64580 initialized for platform Host (this does not guarantee that XLA will be used). Devices:\r\n2020-08-25 02:22:19.984922: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version\r\n2020-08-25 02:22:19.987088: I tensorflow/core/common_runtime/direct_session.cc:360] Device mapping:\r\n/job:localhost/replica:0/task:0/device:XLA_CPU:0 -> device: XLA_CPU device\r\n\r\n2020-08-25 02:22:22.412284: I tensorflow/core/grappler/devices.cc:69] Number of eligible GPUs (core count >= 8, compute capability >= 0.0): 0\r\n2020-08-25 02:22:22.412445: I tensorflow/core/grappler/clusters/single_machine.cc:356] Starting new session\r\n2020-08-25 02:22:23.196542: I tensorflow/core/grappler/optimizers/meta_optimizer.cc:816] Optimization results for grappler item: graph_to_optimize\r\n2020-08-25 02:22:23.196595: I tensorflow/core/grappler/optimizers/meta_optimizer.cc:818]   function_optimizer: function_optimizer did nothing. time = 0.005ms.\r\n2020-08-25 02:22:23.196614: I tensorflow/core/grappler/optimizers/meta_optimizer.cc:818]   function_optimizer: function_optimizer did nothing. time = 0.001ms.\r\n2020-08-25 02:22:24.510075: W tensorflow/compiler/mlir/lite/python/tf_tfl_flatbuffer_helpers.cc:313] Ignored output_format.\r\n2020-08-25 02:22:24.510118: W tensorflow/compiler/mlir/lite/python/tf_tfl_flatbuffer_helpers.cc:316] Ignored drop_control_dependency.\r\nTraceback (most recent call last):\r\n  File \"convert_model_to_tflite_int8.py\", line 102, in <module>\r\n    tflite_model = converter.convert()\r\n  File \"../python3.6/site-packages/tensorflow/lite/python/lite.py\", line 1970, in convert\r\n    return super(TFLiteConverter, self).convert()\r\n  File \"../python3.6/site-packages/tensorflow/lite/python/lite.py\", line 1339, in convert\r\n    result = self._calibrate_quantize_model(result, **flags)\r\n  File \"../python3.6/site-packages/tensorflow/lite/python/lite.py\", line 452, in _calibrate_quantize_model\r\n    inference_output_type, allow_float, activations_type)\r\n  File \"../python3.6/site-packages/tensorflow/lite/python/optimize/calibrator.py\", line 91, in calibrate_and_quantize\r\n    self._calibrator.Prepare([list(s.shape) for s in sample])\r\nRuntimeError: Failed to initialize op resolver for calibration:\r\nThere are unresolved custom ops: []Encountered unresolved custom op: RandomStandardNormal.Node number 0 (RandomStandardNormal) failed to prepare.\r\n```\r\n\r\n**Also, please include a link to the saved model or GraphDef**\r\nUnfortunately cannot provide publicly at this time. I can share privately if needed.\r\n\r\n**Failure details**\r\nThe conversion hits a RuntimeError and stops. From PDB (below) I know it is hitting my `representative_dataset` function twice before crashing.\r\n\r\n**Any other info / logs**\r\n\r\nWith a break point inside my `representative_dataset` function:\r\n```\r\n2020-08-25 02:29:39.675277: W tensorflow/stream_executor/platform/default/dso_loader.cc:59] Could not load dynamic library 'libcudart.so.10.1'; dlerror: libcudart.so.10.1: cannot open shared object file: No such file or directory\r\n2020-08-25 02:29:39.675311: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\r\nWARNING:tensorflow:From /home/ubuntu/denoise-gst/denoise_deploy/inference_module/convert_model_to_tflite_int8.py:18: experimental_run_functions_eagerly (from tensorflow.python.eager.def_function) is deprecated and will be removed in a future version.\r\nInstructions for updating:\r\nUse `tf.config.run_functions_eagerly` instead of the experimental version.\r\n2020-08-25 02:29:40.563260: W tensorflow/stream_executor/platform/default/dso_loader.cc:59] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\r\n2020-08-25 02:29:40.563287: W tensorflow/stream_executor/cuda/cuda_driver.cc:312] failed call to cuInit: UNKNOWN ERROR (303)\r\n2020-08-25 02:29:40.563307: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (ip-172-31-5-134): /proc/driver/nvidia/version does not exist\r\n2020-08-25 02:29:40.563535: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN)to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\r\nTo enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\r\n2020-08-25 02:29:40.588667: I tensorflow/core/platform/profile_utils/cpu_utils.cc:104] CPU Frequency: 2999995000 Hz\r\n2020-08-25 02:29:40.588892: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x3c1a8b0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:\r\n2020-08-25 02:29:40.588920: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version\r\n2020-08-25 02:29:40.591168: I tensorflow/core/common_runtime/direct_session.cc:360] Device mapping:\r\n/job:localhost/replica:0/task:0/device:XLA_CPU:0 -> device: XLA_CPU device\r\n\r\n2020-08-25 02:29:42.998639: I tensorflow/core/grappler/devices.cc:69] Number of eligible GPUs (core count >= 8, compute capability >= 0.0): 0\r\n2020-08-25 02:29:42.998794: I tensorflow/core/grappler/clusters/single_machine.cc:356] Starting new session\r\n2020-08-25 02:29:43.773981: I tensorflow/core/grappler/optimizers/meta_optimizer.cc:816] Optimization results for grappler item: graph_to_optimize\r\n2020-08-25 02:29:43.774020: I tensorflow/core/grappler/optimizers/meta_optimizer.cc:818]   function_optimizer: function_optimizer did nothing. time = 0.006ms.\r\n2020-08-25 02:29:43.774031: I tensorflow/core/grappler/optimizers/meta_optimizer.cc:818]   function_optimizer: function_optimizer did nothing. time = 0ms.\r\n2020-08-25 02:29:45.082195: W tensorflow/compiler/mlir/lite/python/tf_tfl_flatbuffer_helpers.cc:313] Ignored output_format.\r\n2020-08-25 02:29:45.082241: W tensorflow/compiler/mlir/lite/python/tf_tfl_flatbuffer_helpers.cc:316] Ignored drop_control_dependency.\r\n> /home/ubuntu/denoise-gst/denoise_deploy/inference_module/convert_model_to_tflite_int8.py(93)test()\r\n-> zeros = np.zeros(shape=(1, 100, 16384), dtype='int8')\r\n(Pdb) n\r\n> /home/ubuntu/denoise-gst/denoise_deploy/inference_module/convert_model_to_tflite_int8.py(94)test()\r\n-> dataset = tf.data.Dataset.from_tensor_slices(zeros).batch(1)\r\n(Pdb)\r\n> /home/ubuntu/denoise-gst/denoise_deploy/inference_module/convert_model_to_tflite_int8.py(97)test()\r\n-> yield [zeros]\r\n(Pdb)\r\nGeneratorExit\r\n> /home/ubuntu/denoise-gst/denoise_deploy/inference_module/convert_model_to_tflite_int8.py(97)test()\r\n-> yield [zeros]\r\n(Pdb)\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.6/pdb.py\", line 1667, in main\r\n    pdb._runscript(mainpyfile)\r\n  File \"/usr/lib/python3.6/pdb.py\", line 1548, in _runscript\r\n    self.run(statement)\r\n  File \"/usr/lib/python3.6/bdb.py\", line 434, in run\r\n    exec(cmd, globals, locals)\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/home/ubuntu/denoise-gst/denoise_deploy/inference_module/convert_model_to_tflite_int8.py\", line 18, in <module>\r\n    '''\r\n  File \".../python3.6/site-packages/tensorflow/lite/python/lite.py\", line 1970, in convert\r\n    return super(TFLiteConverter, self).convert()\r\n  File \".../python3.6/site-packages/tensorflow/lite/python/lite.py\", line 1339, in convert\r\n    result = self._calibrate_quantize_model(result, **flags)\r\n  File \".../python3.6/site-packages/tensorflow/lite/python/lite.py\", line 452, in _calibrate_quantize_model\r\n    inference_output_type, allow_float, activations_type)\r\n  File \".../python3.6/site-packages/tensorflow/lite/python/optimize/calibrator.py\", line 91, in calibrate_and_quantize\r\n    self._calibrator.Prepare([list(s.shape) for s in sample])\r\nRuntimeError: Failed to initialize op resolver for calibration:\r\nThere are unresolved custom ops: []Encountered unresolved custom op: RandomStandardNormal.Node number 0 (RandomStandardNormal) failed to prepare.\r\n\r\nUncaught exception. Entering post mortem debugging\r\nRunning 'cont' or 'step' will restart the program\r\n> .../python3.6/site-packages/tensorflow/lite/python/optimize/calibrator.py(91)calibrate_and_quantize()\r\n-> self._calibrator.Prepare([list(s.shape) for s in sample])\r\n```\r\n", "comments": ["@CoreyCole Can you please share a standalone code and *.pb file. [Here](https://colab.research.google.com/gist/jvishnuvardhan/a35756d09a46c7c82b8dd6c449bea591/untitled12.ipynb) is a gist that is throwing different error. thanks!", "Could you try the conversion with tf-nightly version? We've landed a fix for supporting integer eight kernels with Flex operators recently.", "Thank you for the support @jvishnuvardhan and @abattery\r\n\r\nI believe turned out to be a problem with how I was exporting the saved model before further converting to tflite. By using the correct input node/shape and upgrading to tensorflow==2.3.0 the problem has gone away.", "Are you satisfied with the resolution of your issue?\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42643\">Yes</a>\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42643\">No</a>\n"]}, {"number": 42642, "title": "Add preliminary methods to env class", "body": "This PR adds new methods with transaction support to Env class. A follow up PR will forward non-transactional API to transactional API with nullptr. This is necessary to workaround issues described in PR #41615", "comments": ["@samikama does anything use the new functionality? how does it relate to https://github.com/tensorflow/community/pull/277? Adding use case specific arguments to most file system APIs sets a bad precedent and I would like to revert this change.", "@jsimsa Yes. It is still waiting for you some PRs to be merged in to the upstream. Implementation was finished last year but since it was deemed too big, it was chunked into smaller segments. But that lead to delays in the review process.\r\n\r\nAlso can you be a bit more specific? Most io operations rely on transactions. Some filesystems hide it in OS level api (such as in kernel calls) however it is always there. I do not think this is use case specific and allows extension of data access to data stores than other posix file systems.\r\n\r\nhttps://github.com/tensorflow/community/pull/277 is a different matter. It allows users to tune the filesystem settings for their use cases. Current implementations of data i/o modules have some generic levels of settings which may not be optimal for all use cases. For example, reading a text file for tokens and searching in a video file would require different access patterns and priorities. Likewise, storing a checkpoint file, a debug output and a critical log file would require different buffering mechanisms. In one case. You would want critical log to be unbuffered, checkpoint to be atomic and debug output to with whatever the filesystem defaults.\r\n\r\nContrary to what you think, TF currently has use-case specific code right now, for example, checkpoint saving relies on \"atomic\" move property of the posix filesystem to implement a transactional save of the multiple files. These proposals, add formal api for such operations so that other data sources do not have to solve \"create tmp dir, save checkpoints into tmp dir, rename tmp dir\"\r\nand map it to their model of transactions.\r\n\r\nPerhaps you can tell me what is your point of view. I may be missing something.\r\n\r\n", "Thank you for your response. Please disregard https://github.com/tensorflow/tensorflow/commit/ab4922b33e0c482c67683da9c8e58cf06aaba56e, my intention was to wait for your response and the CL was submitted by accident. I will roll it back.\r\n\r\nMy main objection to your changes is that introducing `TransactionToken` to several APIs is not maintainable approach. Every time we would need to do something like that, the number of possible endpoints to update either doubles, or you need to update user code. Instead, an approach which uses an extensible `Options` argument should be used instead.", "Thanks and I agree in complexity issue. May be I am missing something but  tensorflow/community#277 can not satisfy the requirements of transactional file systems. For example, how does it solve checkpoint saving? In order to emulate an atomic transaction for posix file system, TF uses atomic nature of the move operation. However move operation is not atomic in all file systems, especially non-blocking, asynchronous file systems and databases etc. Unfortunately these two approaches are orthogonal and one can not replace another. Can you see a way satisfying the requirements? I believe these two RFCs are essential in building up large infrastructure and allowing more storage solutions to be used as input and/or output of the TF workflow. Of course, just for running TF with local filesystem based i/o this is a bit heavy weight, move trick is sufficient to save checkpoints without corrupting rest of the workflow whenever atomic move is available.\r\n", "I don't think you are missing anything. Again, I am not questioning whether the functionality the RFCs are proposing is useful (it is). All I am saying that I hope we could replace the `TransactionToken` argument with an options-based approach. In particular, replacing:\r\n\r\n```\r\nStatus NewRandomAccessFile(const std::string& fname, TransactionToken* token, std::unique_ptr<RandomAccessFile>* result);\r\n```\r\nwith\r\n```\r\nStatus NewRandomAccessFile(const std::string& fname, Options options, std::unique_ptr<RandomAccessFile>* result);\r\n```\r\nwhere `Options` is an object that can be extended in the future with additional functionality without requiring introducing new overrides `NewRandomAccessFile` or updating all callsites of `NewRandomAccessFile`.", "For the specific method you mentioned it is probably ok. But it also means options must be added to all i/o methods and all i/o layers need to be able to decode the options to get the transaction information even if they don't implement options. Since options would be passed for different type of operations, the I would worry that either it is going to be an opaque structure that changes meaning depending on the call which means bugs everywhere, or it is going to be a huge structure too heavy weight to construct, pass around and decode. Do you have an implementation with options approach that would satisfy these requirements. I am worried that it may not work in all cases and then cause a bigger problem in the ecosystem.\r\n", "Google has an implementation that satisfies these requirements but it is not externally available. It represents options as a generic proto, which is a union of API specific options. That way, different APIs only need to understand options meant for them.\r\n\r\nIn any case, this was a drive by comment because I think adding a use case specific argument to a large number of file system API sets a bad precedent and is not scalable. The amount of effort needed to use a scalable approach might be greater now (relative to the alternative), but its cost will be amortized over future changes that introduce additional options. This is actually how I came across this -- I want to add an option to one of the methods and if I follow the precedent of `TransactionToken`, we would end up with 4 methods (as default arguments to virtual methods are discouraged because of their [surprising behavior](https://www.geeksforgeeks.org/output-of-c-program-set-12-2/)).", "Would it be possible to describe what you mean in an RFC. Perhaps others not in Google want to comment. It may be possible that we do not see all the use cases and external parties may be affected from such a change. I am not against changing these but I would prefer it more eyes go through that. Transactions went through some scrutiny and in general people seemed ok with any potential side effects,", "I unfortunately won't have bandwidth for this in the foreseeable future. This plus the fact I have missed the opportunity to provide my feedback during the RFC period, means that I will hold my peace.", "I understand. Though I would really like to see your proposal. I am all for improving the design. I also feel your pain in modification since I went through that myself. If you have time, I encourage you to consider preparing an RFC so that we can take a look in the design and possibly implement it if everyone is happy. I can try to pitch in at implementation part."]}, {"number": 42641, "title": "TypeError: can't pickle _thread.RLock objects: SKlearn/Tensorflow/Third Party content interference?", "body": "For Neural-Network regression prediction task cross_val_predict from SKlearn throws the error (full error further below, below the model used)\r\n\r\n```\r\nTypeError: can't pickle _thread.RLock objects\r\n```\r\n\r\nwhen utilizing it with input data of form \r\n\r\n```\r\nX_train.shape=1200,18,15 \r\ny_train.shape=1200,18,1 \r\n```\r\n\r\nand the following in NN\r\n\r\n```\r\ndef twds_model(layer1=32, layer2=32, layer3=16, dropout_rate=0.5, optimizer='Adam'\r\n                    , learning_rate=0.001, activation='relu', loss='mse'):#, n_jobs=1):layer3=80, \r\n    \r\n    model = Sequential()\r\n    model.add(Bidirectional(GRU(layer1, return_sequences=True),input_shape=(X_train.shape[1],X_train.shape[2])))\r\n    model.add(AveragePooling1D(2))\r\n    model.add(Conv1D(layer2, 3, activation=activation, padding='same', \r\n               name='extractor'))\r\n    model.add(Flatten())\r\n    model.add(Dense(layer3,activation=activation))\r\n    model.add(Dropout(dropout_rate))\r\n    model.add(Dense(1))\r\n    model.compile(optimizer=optimizer,loss=loss)\r\n    return model\r\n\r\ntwds_model=twds_model()\r\nprint(twds_model.summary())\r\n```\r\n\r\n```\r\n_________________________________________________________________\r\nLayer (type)                 Output Shape              Param #   \r\n=================================================================\r\nbidirectional_4 (Bidirection (None, 18, 64)            9216      \r\n_________________________________________________________________\r\naverage_pooling1d_1 (Average (None, 9, 64)             0         \r\n_________________________________________________________________\r\nextractor (Conv1D)           (None, 9, 32)             6176      \r\n_________________________________________________________________\r\nflatten_1 (Flatten)          (None, 288)               0         \r\n_________________________________________________________________\r\ndense_3 (Dense)              (None, 16)                4624      \r\n_________________________________________________________________\r\ndropout_4 (Dropout)          (None, 16)                0         \r\n_________________________________________________________________\r\ndense_4 (Dense)              (None, 1)                 17        \r\n=================================================================\r\nTotal params: 20,033\r\nTrainable params: 20,033\r\nNon-trainable params: 0\r\n_________________________________________________________________\r\nNone\r\n```\r\n\r\nand \r\n\r\n```\r\nmodel_twds=KerasRegressor(build_fn=twds_model, batch_size=144,epochs=6)#12\r\n```\r\n\r\nThe error was mentioned at [SKlearn](https://github.com/scikit-learn/scikit-learn/issues/18171), but it was contemplated that the error is likely to be on the Tensorflow site or that it might be caused by third party content - however, I have no idea where this content might be involved.\r\n\r\nThe complete error: \r\n\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-603-37b55dfd53fd> in <module>\r\n----> 1 GridLSTM.fit(X_train, y_train)\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\site-packages\\sklearn\\utils\\validation.py in inner_f(*args, **kwargs)\r\n     70                           FutureWarning)\r\n     71         kwargs.update({k: arg for k, arg in zip(sig.parameters, args)})\r\n---> 72         return f(**kwargs)\r\n     73     return inner_f\r\n     74 \r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\site-packages\\sklearn\\model_selection\\_search.py in fit(self, X, y, groups, **fit_params)\r\n    679         n_splits = cv.get_n_splits(X, y, groups)\r\n    680 \r\n--> 681         base_estimator = clone(self.estimator)\r\n    682 \r\n    683         parallel = Parallel(n_jobs=self.n_jobs, verbose=self.verbose,\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\site-packages\\sklearn\\utils\\validation.py in inner_f(*args, **kwargs)\r\n     70                           FutureWarning)\r\n     71         kwargs.update({k: arg for k, arg in zip(sig.parameters, args)})\r\n---> 72         return f(**kwargs)\r\n     73     return inner_f\r\n     74 \r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\site-packages\\sklearn\\base.py in clone(estimator, safe)\r\n     85     new_object_params = estimator.get_params(deep=False)\r\n     86     for name, param in new_object_params.items():\r\n---> 87         new_object_params[name] = clone(param, safe=False)\r\n     88     new_object = klass(**new_object_params)\r\n     89     params_set = new_object.get_params(deep=False)\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\site-packages\\sklearn\\utils\\validation.py in inner_f(*args, **kwargs)\r\n     70                           FutureWarning)\r\n     71         kwargs.update({k: arg for k, arg in zip(sig.parameters, args)})\r\n---> 72         return f(**kwargs)\r\n     73     return inner_f\r\n     74 \r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\site-packages\\sklearn\\base.py in clone(estimator, safe)\r\n     69     elif not hasattr(estimator, 'get_params') or isinstance(estimator, type):\r\n     70         if not safe:\r\n---> 71             return copy.deepcopy(estimator)\r\n     72         else:\r\n     73             if isinstance(estimator, type):\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in deepcopy(x, memo, _nil)\r\n    178                     y = x\r\n    179                 else:\r\n--> 180                     y = _reconstruct(x, memo, *rv)\r\n    181 \r\n    182     # If is its own copy, don't memoize.\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in _reconstruct(x, memo, func, args, state, listiter, dictiter, deepcopy)\r\n    278     if state is not None:\r\n    279         if deep:\r\n--> 280             state = deepcopy(state, memo)\r\n    281         if hasattr(y, '__setstate__'):\r\n    282             y.__setstate__(state)\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in deepcopy(x, memo, _nil)\r\n    148     copier = _deepcopy_dispatch.get(cls)\r\n    149     if copier:\r\n--> 150         y = copier(x, memo)\r\n    151     else:\r\n    152         try:\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in _deepcopy_dict(x, memo, deepcopy)\r\n    238     memo[id(x)] = y\r\n    239     for key, value in x.items():\r\n--> 240         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    241     return y\r\n    242 d[dict] = _deepcopy_dict\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in deepcopy(x, memo, _nil)\r\n    148     copier = _deepcopy_dispatch.get(cls)\r\n    149     if copier:\r\n--> 150         y = copier(x, memo)\r\n    151     else:\r\n    152         try:\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in _deepcopy_list(x, memo, deepcopy)\r\n    213     append = y.append\r\n    214     for a in x:\r\n--> 215         append(deepcopy(a, memo))\r\n    216     return y\r\n    217 d[list] = _deepcopy_list\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in deepcopy(x, memo, _nil)\r\n    178                     y = x\r\n    179                 else:\r\n--> 180                     y = _reconstruct(x, memo, *rv)\r\n    181 \r\n    182     # If is its own copy, don't memoize.\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in _reconstruct(x, memo, func, args, state, listiter, dictiter, deepcopy)\r\n    278     if state is not None:\r\n    279         if deep:\r\n--> 280             state = deepcopy(state, memo)\r\n    281         if hasattr(y, '__setstate__'):\r\n    282             y.__setstate__(state)\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in deepcopy(x, memo, _nil)\r\n    148     copier = _deepcopy_dispatch.get(cls)\r\n    149     if copier:\r\n--> 150         y = copier(x, memo)\r\n    151     else:\r\n    152         try:\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in _deepcopy_dict(x, memo, deepcopy)\r\n    238     memo[id(x)] = y\r\n    239     for key, value in x.items():\r\n--> 240         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    241     return y\r\n    242 d[dict] = _deepcopy_dict\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in deepcopy(x, memo, _nil)\r\n    148     copier = _deepcopy_dispatch.get(cls)\r\n    149     if copier:\r\n--> 150         y = copier(x, memo)\r\n    151     else:\r\n    152         try:\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in _deepcopy_list(x, memo, deepcopy)\r\n    213     append = y.append\r\n    214     for a in x:\r\n--> 215         append(deepcopy(a, memo))\r\n    216     return y\r\n    217 d[list] = _deepcopy_list\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in deepcopy(x, memo, _nil)\r\n    178                     y = x\r\n    179                 else:\r\n--> 180                     y = _reconstruct(x, memo, *rv)\r\n    181 \r\n    182     # If is its own copy, don't memoize.\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in _reconstruct(x, memo, func, args, state, listiter, dictiter, deepcopy)\r\n    278     if state is not None:\r\n    279         if deep:\r\n--> 280             state = deepcopy(state, memo)\r\n    281         if hasattr(y, '__setstate__'):\r\n    282             y.__setstate__(state)\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in deepcopy(x, memo, _nil)\r\n    148     copier = _deepcopy_dispatch.get(cls)\r\n    149     if copier:\r\n--> 150         y = copier(x, memo)\r\n    151     else:\r\n    152         try:\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in _deepcopy_dict(x, memo, deepcopy)\r\n    238     memo[id(x)] = y\r\n    239     for key, value in x.items():\r\n--> 240         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    241     return y\r\n    242 d[dict] = _deepcopy_dict\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in deepcopy(x, memo, _nil)\r\n    178                     y = x\r\n    179                 else:\r\n--> 180                     y = _reconstruct(x, memo, *rv)\r\n    181 \r\n    182     # If is its own copy, don't memoize.\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in _reconstruct(x, memo, func, args, state, listiter, dictiter, deepcopy)\r\n    278     if state is not None:\r\n    279         if deep:\r\n--> 280             state = deepcopy(state, memo)\r\n    281         if hasattr(y, '__setstate__'):\r\n    282             y.__setstate__(state)\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in deepcopy(x, memo, _nil)\r\n    148     copier = _deepcopy_dispatch.get(cls)\r\n    149     if copier:\r\n--> 150         y = copier(x, memo)\r\n    151     else:\r\n    152         try:\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in _deepcopy_dict(x, memo, deepcopy)\r\n    238     memo[id(x)] = y\r\n    239     for key, value in x.items():\r\n--> 240         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    241     return y\r\n    242 d[dict] = _deepcopy_dict\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in deepcopy(x, memo, _nil)\r\n    178                     y = x\r\n    179                 else:\r\n--> 180                     y = _reconstruct(x, memo, *rv)\r\n    181 \r\n    182     # If is its own copy, don't memoize.\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in _reconstruct(x, memo, func, args, state, listiter, dictiter, deepcopy)\r\n    278     if state is not None:\r\n    279         if deep:\r\n--> 280             state = deepcopy(state, memo)\r\n    281         if hasattr(y, '__setstate__'):\r\n    282             y.__setstate__(state)\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in deepcopy(x, memo, _nil)\r\n    148     copier = _deepcopy_dispatch.get(cls)\r\n    149     if copier:\r\n--> 150         y = copier(x, memo)\r\n    151     else:\r\n    152         try:\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in _deepcopy_dict(x, memo, deepcopy)\r\n    238     memo[id(x)] = y\r\n    239     for key, value in x.items():\r\n--> 240         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    241     return y\r\n    242 d[dict] = _deepcopy_dict\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in deepcopy(x, memo, _nil)\r\n    178                     y = x\r\n    179                 else:\r\n--> 180                     y = _reconstruct(x, memo, *rv)\r\n    181 \r\n    182     # If is its own copy, don't memoize.\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in _reconstruct(x, memo, func, args, state, listiter, dictiter, deepcopy)\r\n    278     if state is not None:\r\n    279         if deep:\r\n--> 280             state = deepcopy(state, memo)\r\n    281         if hasattr(y, '__setstate__'):\r\n    282             y.__setstate__(state)\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in deepcopy(x, memo, _nil)\r\n    148     copier = _deepcopy_dispatch.get(cls)\r\n    149     if copier:\r\n--> 150         y = copier(x, memo)\r\n    151     else:\r\n    152         try:\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in _deepcopy_dict(x, memo, deepcopy)\r\n    238     memo[id(x)] = y\r\n    239     for key, value in x.items():\r\n--> 240         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    241     return y\r\n    242 d[dict] = _deepcopy_dict\r\n\r\n~\\Anaconda3\\envs\\Tensorflow\\lib\\copy.py in deepcopy(x, memo, _nil)\r\n    167                     reductor = getattr(x, \"__reduce_ex__\", None)\r\n    168                     if reductor:\r\n--> 169                         rv = reductor(4)\r\n    170                     else:\r\n    171                         reductor = getattr(x, \"__reduce__\", None)\r\n\r\nTypeError: can't pickle _thread.RLock objects\r\n\r\n\r\n```\r\nThe versions used:\r\n\r\n```\r\nPackage                  Version\r\n------------------------ ---------------\r\n-                        nsorflow-gpu\r\n-ensorflow-gpu           2.3.0\r\n-rotobuf                 3.11.3\r\nabsl-py                  0.9.0\r\nantlr4-python3-runtime   4.8\r\nasn1crypto               1.3.0\r\nastor                    0.7.1\r\nastropy                  3.2.1\r\nastunparse               1.6.3\r\nattrs                    19.3.0\r\naudioread                2.1.8\r\nautopep8                 1.5.3\r\nbackcall                 0.1.0\r\nbeautifulsoup4           4.9.0\r\nbezier                   0.8.0\r\nbkcharts                 0.2\r\nbleach                   3.1.4\r\nblis                     0.2.4\r\nbokeh                    1.1.0\r\nboto3                    1.9.253\r\nbotocore                 1.12.253\r\nBottleneck               1.3.2\r\ncachetools               4.1.0\r\ncertifi                  2020.4.5.1\r\ncffi                     1.14.0\r\nchardet                  3.0.4\r\nclick                    6.7\r\ncloudpickle              0.5.3\r\ncmdstanpy                0.4.0\r\ncolor                    0.1\r\ncolorama                 0.4.3\r\ncolorcet                 0.9.1\r\nconvertdate              2.2.1\r\ncopulas                  0.2.5\r\ncryptography             2.8\r\nctgan                    0.2.1\r\ncycler                   0.10.0\r\ncymem                    2.0.2\r\nCython                   0.29.17\r\ndash                     0.26.0\r\ndash-core-components     0.27.2\r\ndash-html-components     0.11.0\r\ndash-renderer            0.13.2\r\ndask                     0.18.1\r\ndataclasses              0.6\r\ndatashader               0.7.0\r\ndatashape                0.5.2\r\ndatawig                  0.1.10\r\ndeap                     1.3.0\r\ndecorator                4.4.2\r\ndefusedxml               0.6.0\r\ndeltapy                  0.1.1\r\ndill                     0.2.9\r\ndistributed              1.22.1\r\ndocutils                 0.14\r\nentrypoints              0.3\r\nephem                    3.7.7.1\r\net-xmlfile               1.0.1\r\nexrex                    0.10.5\r\nFaker                    4.0.3\r\nfastai                   1.0.60\r\nfastprogress             0.2.2\r\nfbprophet                0.6\r\nfire                     0.3.1\r\nFlask                    1.0.2\r\nFlask-Compress           1.4.0\r\nfuture                   0.17.1\r\ngast                     0.3.3\r\ngeojson                  2.4.1\r\ngeomet                   0.2.0.post2\r\ngoogle-auth              1.14.0\r\ngoogle-auth-oauthlib     0.4.1\r\ngoogle-pasta             0.2.0\r\ngplearn                  0.4.1\r\ngraphviz                 0.13.2\r\ngrpcio                   1.29.0\r\nh5py                     2.10.0\r\nHeapDict                 1.0.0\r\nholidays                 0.10.2\r\nholoviews                1.12.1\r\nhtml2text                2018.1.9\r\nhyperas                  0.4.1\r\nhyperopt                 0.1.2\r\nidna                     2.6\r\nimageio                  2.5.0\r\nimbalanced-learn         0.3.3\r\nimblearn                 0.0\r\nimportlib-metadata       1.5.0\r\nimpyute                  0.0.8\r\nipykernel                5.1.4\r\nipython                  7.13.0\r\nipython-genutils         0.2.0\r\nipywidgets               7.5.1\r\nitsdangerous             0.24\r\njdcal                    1.4\r\njedi                     0.16.0\r\nJinja2                   2.11.1\r\njmespath                 0.9.5\r\njoblib                   0.13.2\r\njsonschema               3.2.0\r\njupyter                  1.0.0\r\njupyter-client           6.1.2\r\njupyter-console          6.0.0\r\njupyter-core             4.6.3\r\nKeras                    2.4.3\r\nKeras-Applications       1.0.8\r\nKeras-Preprocessing      1.1.2\r\nkeras-rectified-adam     0.17.0\r\nkiwisolver               1.2.0\r\nkorean-lunar-calendar    0.2.1\r\nlibrosa                  0.7.2\r\nllvmlite                 0.32.1\r\nlml                      0.0.1\r\nlocket                   0.2.0\r\nLunarCalendar            0.0.9\r\nMarkdown                 2.6.11\r\nMarkupSafe               1.1.1\r\nmatplotlib               3.2.1\r\nmissingpy                0.2.0\r\nmistune                  0.8.4\r\nmkl-fft                  1.0.15\r\nmkl-random               1.1.0\r\nmkl-service              2.3.0\r\nmock                     4.0.2\r\nmsgpack                  0.5.6\r\nmultipledispatch         0.6.0\r\nmurmurhash               1.0.2\r\nmxnet                    1.4.1\r\nnb-conda                 2.2.1\r\nnb-conda-kernels         2.2.3\r\nnbconvert                5.6.1\r\nnbformat                 5.0.4\r\nnbstripout               0.3.7\r\nnetworkx                 2.1\r\nnotebook                 6.0.3\r\nnumba                    0.49.1\r\nnumexpr                  2.7.1\r\nnumpy                    1.18.5\r\noauthlib                 3.1.0\r\nolefile                  0.46\r\nopencv-python            4.2.0.34\r\nopenpyxl                 2.5.5\r\nopt-einsum               3.2.1\r\npackaging                20.3\r\npandas                   1.0.3\r\npandasvault              0.0.3\r\npandocfilters            1.4.2\r\nparam                    1.9.0\r\nparso                    0.6.2\r\npartd                    0.3.8\r\npatsy                    0.5.1\r\npbr                      5.1.3\r\npickleshare              0.7.5\r\nPillow                   7.0.0\r\npip                      20.2.2\r\nplac                     0.9.6\r\nplotly                   4.7.1\r\nplotly-express           0.4.1\r\npreshed                  2.0.1\r\nprometheus-client        0.7.1\r\nprompt-toolkit           3.0.4\r\nprotobuf                 3.11.3\r\npsutil                   5.4.7\r\npy                       1.8.0\r\npyasn1                   0.4.8\r\npyasn1-modules           0.2.8\r\npycodestyle              2.6.0\r\npycparser                2.20\r\npyct                     0.4.5\r\npyensae                  1.3.839\r\npyexcel                  0.5.8\r\npyexcel-io               0.5.7\r\nPygments                 2.6.1\r\npykalman                 0.9.5\r\nPyMeeus                  0.3.7\r\npymongo                  3.8.0\r\npyOpenSSL                19.1.0\r\npyparsing                2.4.7\r\npypi                     2.1\r\npyquickhelper            1.9.3418\r\npyrsistent               0.16.0\r\nPySocks                  1.7.1\r\npystan                   2.19.1.1\r\npython-dateutil          2.8.1\r\npytz                     2019.3\r\npyviz-comms              0.7.2\r\nPyWavelets               0.5.2\r\npywin32                  227\r\npywinpty                 0.5.7\r\nPyYAML                   5.3.1\r\npyzmq                    18.1.1\r\nqtconsole                4.4.4\r\nrdt                      0.2.1\r\nRegscorePy               1.1\r\nrequests                 2.23.0\r\nrequests-oauthlib        1.3.0\r\nresampy                  0.2.2\r\nretrying                 1.3.3\r\nrsa                      4.0\r\ns3transfer               0.2.1\r\nscikit-image             0.15.0\r\nscikit-learn             0.23.2\r\nscipy                    1.4.1\r\nsdv                      0.3.2\r\nseaborn                  0.9.0\r\nseasonal                 0.3.1\r\nSend2Trash               1.5.0\r\nsentinelsat              0.12.2\r\nsetuptools               46.3.0\r\nsetuptools-git           1.2\r\nsix                      1.14.0\r\nsklearn                  0.0\r\nsortedcontainers         2.0.4\r\nSoundFile                0.10.3.post1\r\nsoupsieve                2.0\r\nspacy                    2.1.8\r\nsrsly                    0.1.0\r\nstatsmodels              0.9.0\r\nstopit                   1.1.2\r\nsugartensor              1.0.0.2\r\nta                       0.5.25\r\ntb-nightly               1.14.0a20190603\r\ntblib                    1.3.2\r\ntensorboard              2.3.0\r\ntensorboard-plugin-wit   1.7.0\r\ntensorflow-gpu           2.3.0\r\ntensorflow-gpu-estimator 2.3.0\r\ntermcolor                1.1.0\r\nterminado                0.8.3\r\ntestpath                 0.4.4\r\ntext-unidecode           1.3\r\ntexttable                1.4.0\r\nTheano                   1.0.4\r\nthinc                    7.0.8\r\nthreadpoolctl            2.1.0\r\ntoml                     0.10.1\r\ntoolz                    0.10.0\r\ntorch                    1.4.0\r\ntorchvision              0.5.0\r\ntornado                  6.0.4\r\nTPOT                     0.10.2\r\ntqdm                     4.45.0\r\ntraitlets                4.3.3\r\ntransforms3d             0.3.1\r\ntsaug                    0.2.1\r\ntypeguard                2.7.1\r\ntyping                   3.6.6\r\nupdate-checker           0.16\r\nurllib3                  1.22\r\nutm                      0.4.2\r\nwasabi                   0.2.2\r\nwcwidth                  0.1.9\r\nwebencodings             0.5.1\r\nWerkzeug                 1.0.1\r\nwheel                    0.34.2\r\nwidgetsnbextension       3.5.1\r\nwin-inet-pton            1.1.0\r\nwincertstore             0.2\r\nwrapt                    1.11.2\r\nxarray                   0.10.8\r\nxlrd                     1.1.0\r\nyahoo-historical         0.3.2\r\nzict                     0.1.3\r\nzipp                     2.2.0\r\n```", "comments": ["@tolandwehr,\r\nI was able to run the given code snippet without any issues, please find the gist of it [here](https://colab.research.google.com/gist/amahendrakar/f8fa230015bd4fdda159ac0c4ef7ce28/42641.ipynb).\r\n\r\nIn order to expedite the trouble-shooting process, could you please provide the complete code to reproduce the issue reported here. Thanks!", "Okay. Gist is a little short, as it misses the \r\n\r\n```'\r\ncross_val_predict\r\n```\r\n, where the error happens. My description might have left this unclear, sry. Here the notebook, which is a little messy, though, as it also involves other tasks:\r\n\r\n```\r\nimport tensorflow as tf\r\nimport os\r\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\r\nos.environ[\"CUDA_DEVICE_ORDER\"] = \"PCI_BUS_ID\"\r\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = '0' # Set to -1 if CPU should be used CPU = -1 , GPU = 0\r\n\r\ngpus = tf.config.experimental.list_physical_devices('GPU')\r\ncpus = tf.config.experimental.list_physical_devices('CPU')\r\n\r\nif gpus:\r\n    try:\r\n        # Currently, memory growth needs to be the same across GPUs\r\n        for gpu in gpus:\r\n            tf.config.experimental.set_memory_growth(gpu, True)\r\n        logical_gpus = tf.config.experimental.list_logical_devices('GPU')\r\n        print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\r\n    except RuntimeError as e:\r\n        # Memory growth must be set before GPUs have been initialized\r\n        print(e)\r\nelif cpus:\r\n    try:\r\n        # Currently, memory growth needs to be the same across GPUs\r\n        logical_cpus= tf.config.experimental.list_logical_devices('CPU')\r\n        print(len(cpus), \"Physical CPU,\", len(logical_cpus), \"Logical CPU\")\r\n    except RuntimeError as e:\r\n        # Memory growth must be set before GPUs have been initialized\r\n        print(e)\r\n\r\n#from __future__ import print_function, division\r\n\r\n\r\nimport plotly.express as px\r\nimport pandas as pd\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport tensorflow as tf\r\nimport keras\r\nimport sys\r\nimport os\r\n\r\nimport tsaug\r\nfrom tsaug.visualization import plot\r\nfrom tsaug import TimeWarp, Crop, Quantize, Drift, Reverse, Convolve, AddNoise, Dropout, Pool, Resize\r\n\r\nimport statsmodels\r\nimport datawig\r\nimport impyute\r\n\r\nimport missingpy\r\nfrom missingpy import KNNImputer,MissForest\r\n\r\nfrom impyute.imputation.cs import mice\r\nfrom datawig import SimpleImputer\r\nfrom statsmodels import robust\r\nfrom operator import itemgetter,attrgetter\r\nfrom functools import partial\r\nfrom scipy import stats\r\n\r\nfrom pylab import rcParams\r\nfrom tpot import TPOTRegressor\r\n\r\nfrom sklearn import preprocessing\r\nfrom sklearn.decomposition import PCA\r\nfrom sklearn import model_selection\r\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, Normalizer, LabelEncoder, RobustScaler, QuantileTransformer\r\nfrom sklearn.linear_model import LinearRegression\r\nfrom sklearn.model_selection import train_test_split,cross_val_score, cross_val_predict, cross_validate, GridSearchCV, RandomizedSearchCV, TimeSeriesSplit, KFold\r\nfrom sklearn.metrics import mean_squared_error, r2_score, explained_variance_score, make_scorer,median_absolute_error, mean_absolute_error,max_error,explained_variance_score\r\nfrom sklearn.base import BaseEstimator, TransformerMixin\r\nfrom sklearn.utils.validation import check_array, check_is_fitted\r\nfrom sklearn.experimental import enable_iterative_imputer  # noqa\r\nfrom sklearn.impute import IterativeImputer, SimpleImputer\r\n\r\n\r\nfrom tensorflow.keras.wrappers.scikit_learn import KerasClassifier, KerasRegressor\r\nfrom kerastuner import HyperModel\r\n\r\n\r\n# import tensorflow as tf\r\n# import cProfile\r\n# tf.enable_eager_execution()\r\n# tf.executing_eagerly()\r\n\r\nfrom tensorflow.python.keras.layers import InputLayer, TimeDistributed, Lambda, Dense, Dot, Reshape,Concatenate, Embedding, Activation, Conv1D, Conv2D, Cropping2D, MaxPooling2D, Flatten, Dropout, LSTM, GRU, Bidirectional, Input, LeakyReLU,Conv2DTranspose, ZeroPadding2D, ZeroPadding1D, UpSampling2D, UpSampling1D,multiply,AveragePooling1D # components of network\r\nfrom tensorflow.python.keras.models import Model, Sequential # type of model\r\nfrom tensorflow.python.keras.layers import BatchNormalization\r\nfrom tensorflow.python.keras.optimizers import Adam, RMSprop, SGD, Nadam, Adadelta, Adamax\r\nfrom tensorflow.python.keras.regularizers import l2\r\nfrom tensorflow.python.keras.callbacks import EarlyStopping, ModelCheckpoint, TensorBoard\r\n\r\n#from SpectralNormalizationKeras import DenseSN, ConvSN2D\r\n\r\n\r\nfrom ctgan import CTGANSynthesizer\r\n\r\n#import tensorflow.keras.backend as K\r\nfrom tensorflow.python.keras.backend import expand_dims, squeeze\r\n\r\nfrom tqdm import tqdm\r\n\r\n######loading and preparing data\r\n\r\nHeisei_T=pd.read_excel('Heisei_Whoa.xlsx')\r\nHeisei_T=Heisei_T.drop(Heisei_T.columns[0], axis=1)\r\n\r\nYear_Frame = 18\r\nSet_Len = len(Heisei_T)\r\nSample_Len = int(Set_Len/Year_Frame)\r\nSet_Width = len(Heisei_T.columns)\r\n\r\nHeisei_Heads=Heisei_T.columns\r\nHeisei_TR=np.array(Heisei_T).reshape(Sample_Len,Year_Frame,Set_Width)\r\nnp.random.shuffle(Heisei_TR)\r\nHeisei_T=Heisei_TR.reshape(Sample_Len*Year_Frame,Set_Width)\r\n\r\ndef split_sequences(sequences, n_steps):\r\n    X, y = list(), list()\r\n    for i in range(len(sequences)):\r\n        # find the end of this pattern\r\n        end_ix = i + n_steps\r\n        # check if we are beyond the dataset\r\n        if end_ix > len(sequences):\r\n            break\r\n        # gather input and output parts of the pattern\r\n        seq_x, seq_y = sequences[i:end_ix, :-1], sequences[end_ix-1, -1]\r\n        X.append(seq_x)\r\n        y.append(seq_y)\r\n    return np.array(X), np.array(y)\r\n\r\nn_steps = 3\r\n\r\nX_full=[]\r\ny_full=[]\r\n\r\n\r\nfor x in range(0,Sample_Len):\r\n    X,y=split_sequences(Heisei_T[x*Year_Frame:(x+1)*Year_Frame,:],n_steps)\r\n    X_full.append(X)\r\n    y_full.append(y)\r\n    \r\nX_full=np.array(X_full)\r\ny_full=np.array(y_full)\r\n\r\nX_full.shape\r\nX_full=X_full.reshape(Sample_Len*16,n_steps,Set_Width-1)\r\ny_full=y_full.reshape(Sample_Len*16,1)\r\n#pd.DataFrame(y_full).head(90)\r\n\r\n\r\nX_full.shape\r\n#y_full.shape\r\n\r\nprint(pd.DataFrame(y_full).max())\r\n\r\ny_test=np.array(pd.DataFrame(y_full).tail(round(0.10001671123*y_full.shape[0])))\r\ny_train=np.array(pd.DataFrame(y_full).head(round((1-0.10001671123)*y_full.shape[0])))\r\n\r\n\r\nX_test=np.array(pd.DataFrame(X_full.reshape(X_full.shape[0],X_full.shape[1]*X_full.shape[2])).tail(round(0.10001671123*X_full.shape[0]))).reshape(round(0.10001671123*X_full.shape[0]),X_full.shape[1],X_full.shape[2])\r\nX_train=np.array(pd.DataFrame(X_full.reshape(X_full.shape[0],X_full.shape[1]*X_full.shape[2])).head(round(1-0.10001671123*X_full.shape[0]-1))).reshape(round((1-0.10001671123)*X_full.shape[0]),X_full.shape[1],X_full.shape[2])\r\n\r\nTrain_Len=len(X_train)\r\nTest_Len=len(X_test)\r\n\r\nprint(y_train.shape,y_test.shape,X_train.shape,X_test.shape)\r\n\r\n\r\nX_test_scaler = preprocessing.StandardScaler()\r\ny_test_scaler = preprocessing.StandardScaler()\r\nX_train_scaler = preprocessing.StandardScaler()\r\ny_train_scaler = preprocessing.StandardScaler()\r\n\r\ny_test=y_test_scaler.fit_transform(y_test)\r\ny_train=y_train_scaler.fit_transform(y_train)\r\n\r\nX_test=X_test_scaler.fit_transform(X_test.reshape(Test_Len*n_steps,Set_Width-1))\r\nX_train=X_train_scaler.fit_transform(X_train.reshape(Train_Len*n_steps,Set_Width-1))\r\n\r\nX_test=X_test.reshape(Test_Len,n_steps,Set_Width-1)\r\nX_train=X_train.reshape(Train_Len,n_steps,Set_Width-1)\r\n\r\n\r\n\r\n#########Model and SKlearn Cross_Val_Predict\r\n\r\ndef twds_model(layer1=32, layer2=32, layer3=16, dropout_rate=0.5, optimizer='Adam'\r\n                    , learning_rate=0.001, activation='relu', loss='mse'):#, n_jobs=1):layer3=80, \r\n    \r\n    model = Sequential()\r\n    model.add(Bidirectional(GRU(layer1, return_sequences=True),input_shape=(X_train.shape[1],X_train.shape[2])))\r\n    model.add(AveragePooling1D(2))\r\n    model.add(Conv1D(layer2, 3, activation=activation, padding='same', \r\n               name='extractor'))\r\n    model.add(Flatten())\r\n    model.add(Dense(layer3,activation=activation))\r\n    model.add(Dropout(dropout_rate))\r\n    model.add(Dense(1))\r\n    model.compile(optimizer=optimizer,loss=loss)\r\n    return model\r\n\r\ntwds_model=twds_model()\r\nprint(twds_model.summary())\r\n\r\n\r\ndef CustomVarious(y_true, y_pred):\r\n    y_true=y_true.reshape(len(y_true[:,1])*Heisei_TR.shape[1],)\r\n    \r\n    if np.isnan(y_pred).any():\r\n        result=-1000000\r\n        MAD= 1000000\r\n    else:\r\n        y_pred=y_pred.reshape(len(y_pred[:,1])*Heisei_TR.shape[1],)\r\n        MAD=median_absolute_error(y_true, y_pred)\r\n\r\n        print(MAD)\r\n\r\n        \r\n        \r\n\r\n    return MAD\r\n\r\nscorer = make_scorer(CustomVarious, greater_is_better=False\r\n\r\nmodel_twds=KerasRegressor(build_fn=twds_Model, batch_size=256,epochs=6)\r\n\r\n\r\n############# PLACE OF THE ERROR ############\r\ntwds_Pred=cross_val_predict(model_twds, \r\n               X_train, \r\n               y_train, \r\n               n_jobs=1, \r\n               cv=4, \r\n               verbose=2)\r\n\r\n```\r\n\r\n\r\n", "@tolandwehr,\r\nOn running the code I am facing an error stating `FileNotFoundError: [Errno 2] No such file or directory: 'Heisei_Whoa.xlsx'`. Could you please provide all the necessary files to run the code?\r\n\r\nAlso, could you please remove the dependencies and get the example down to the simplest possible repro? That will allow us to easily debug the issue. Thanks!", "@amahendrakar \r\n\r\nWhoa contains data that I'm not allowed to pass, unfortunately ^^'. But it was checked with \r\n\r\n```\r\n.isnull().sum().sum()\r\n```\r\n\r\nto be free on NaNs.\r\n\r\nYou can dense the code down to:\r\n\r\n```\r\nimport tensorflow as tf\r\nimport os\r\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\r\nos.environ[\"CUDA_DEVICE_ORDER\"] = \"PCI_BUS_ID\"\r\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = '0' # Set to -1 if CPU should be used CPU = -1 , GPU = 0\r\n\r\ngpus = tf.config.experimental.list_physical_devices('GPU')\r\ncpus = tf.config.experimental.list_physical_devices('CPU')\r\n\r\nif gpus:\r\n    try:\r\n        # Currently, memory growth needs to be the same across GPUs\r\n        for gpu in gpus:\r\n            tf.config.experimental.set_memory_growth(gpu, True)\r\n        logical_gpus = tf.config.experimental.list_logical_devices('GPU')\r\n        print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\r\n    except RuntimeError as e:\r\n        # Memory growth must be set before GPUs have been initialized\r\n        print(e)\r\nelif cpus:\r\n    try:\r\n        # Currently, memory growth needs to be the same across GPUs\r\n        logical_cpus= tf.config.experimental.list_logical_devices('CPU')\r\n        print(len(cpus), \"Physical CPU,\", len(logical_cpus), \"Logical CPU\")\r\n    except RuntimeError as e:\r\n        # Memory growth must be set before GPUs have been initialized\r\n        print(e)\r\n\r\n#from __future__ import print_function, division\r\n\r\n\r\nimport plotly.express as px\r\nimport pandas as pd\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport tensorflow as tf\r\nimport keras\r\nimport sys\r\nimport os\r\n\r\nimport tsaug\r\nfrom tsaug.visualization import plot\r\nfrom tsaug import TimeWarp, Crop, Quantize, Drift, Reverse, Convolve, AddNoise, Dropout, Pool, Resize\r\n\r\nimport statsmodels\r\nimport datawig\r\nimport impyute\r\n\r\nimport missingpy\r\nfrom missingpy import KNNImputer,MissForest\r\n\r\nfrom impyute.imputation.cs import mice\r\nfrom datawig import SimpleImputer\r\nfrom statsmodels import robust\r\nfrom operator import itemgetter,attrgetter\r\nfrom functools import partial\r\nfrom scipy import stats\r\n\r\nfrom pylab import rcParams\r\nfrom tpot import TPOTRegressor\r\n\r\nfrom sklearn import preprocessing\r\nfrom sklearn.decomposition import PCA\r\nfrom sklearn import model_selection\r\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, Normalizer, LabelEncoder, RobustScaler, QuantileTransformer\r\nfrom sklearn.linear_model import LinearRegression\r\nfrom sklearn.model_selection import train_test_split,cross_val_score, cross_val_predict, cross_validate, GridSearchCV, RandomizedSearchCV, TimeSeriesSplit, KFold\r\nfrom sklearn.metrics import mean_squared_error, r2_score, explained_variance_score, make_scorer,median_absolute_error, mean_absolute_error,max_error,explained_variance_score\r\nfrom sklearn.base import BaseEstimator, TransformerMixin\r\nfrom sklearn.utils.validation import check_array, check_is_fitted\r\nfrom sklearn.experimental import enable_iterative_imputer  # noqa\r\nfrom sklearn.impute import IterativeImputer, SimpleImputer\r\n\r\n\r\nfrom tensorflow.keras.wrappers.scikit_learn import KerasClassifier, KerasRegressor\r\nfrom kerastuner import HyperModel\r\n\r\n\r\n\r\nfrom tensorflow.python.keras.layers import InputLayer, TimeDistributed, Lambda, Dense, Dot, Reshape,Concatenate, Embedding, Activation, Conv1D, Conv2D, Cropping2D, MaxPooling2D, Flatten, Dropout, LSTM, GRU, Bidirectional, Input, LeakyReLU,Conv2DTranspose, ZeroPadding2D, ZeroPadding1D, UpSampling2D, UpSampling1D,multiply,AveragePooling1D # components of network\r\nfrom tensorflow.python.keras.models import Model, Sequential # type of model\r\nfrom tensorflow.python.keras.layers import BatchNormalization\r\nfrom tensorflow.python.keras.optimizers import Adam, RMSprop, SGD, Nadam, Adadelta, Adamax\r\nfrom tensorflow.python.keras.regularizers import l2\r\nfrom tensorflow.python.keras.callbacks import EarlyStopping, ModelCheckpoint, TensorBoard\r\n\r\n\r\n\r\nfrom ctgan import CTGANSynthesizer\r\n\r\n#import tensorflow.keras.backend as K\r\nfrom tensorflow.python.keras.backend import expand_dims, squeeze\r\n\r\nfrom tqdm import tqdm\r\n\r\n\r\nX_full = np.random.rand(1200,18,15)\r\ny_full = np.random.rand(1200,18 )\r\n\r\n\r\ny_test=np.array(pd.DataFrame(y_full).tail(round(0.10001671123*y_full.shape[0])))\r\ny_train=np.array(pd.DataFrame(y_full).head(round((1-0.10001671123)*y_full.shape[0])))\r\n\r\n\r\nX_test=np.array(pd.DataFrame(X_full.reshape(X_full.shape[0],X_full.shape[1]*X_full.shape[2])).tail(round(0.10001671123*X_full.shape[0]))).reshape(round(0.10001671123*X_full.shape[0]),X_full.shape[1],X_full.shape[2])\r\nX_train=np.array(pd.DataFrame(X_full.reshape(X_full.shape[0],X_full.shape[1]*X_full.shape[2])).head(round(1-0.10001671123*X_full.shape[0]-1))).reshape(round((1-0.10001671123)*X_full.shape[0]),X_full.shape[1],X_full.shape[2])\r\n\r\nTrain_Len=len(X_train)\r\nTest_Len=len(X_test)\r\n\r\nprint(y_train.shape,y_test.shape,X_train.shape,X_test.shape)\r\n\r\n\r\nX_test_scaler = preprocessing.StandardScaler()\r\ny_test_scaler = preprocessing.StandardScaler()\r\nX_train_scaler = preprocessing.StandardScaler()\r\ny_train_scaler = preprocessing.StandardScaler()\r\n\r\ny_test=y_test_scaler.fit_transform(y_test)\r\ny_train=y_train_scaler.fit_transform(y_train)\r\n\r\nX_test=X_test_scaler.fit_transform(X_test.reshape(Test_Len*n_steps,Set_Width-1))\r\nX_train=X_train_scaler.fit_transform(X_train.reshape(Train_Len*n_steps,Set_Width-1))\r\n\r\nX_test=X_test.reshape(Test_Len,n_steps,Set_Width-1)\r\nX_train=X_train.reshape(Train_Len,n_steps,Set_Width-1)\r\n\r\n\r\n\r\n#########Model and SKlearn Cross_Val_Predict\r\n\r\ndef twds_model(layer1=32, layer2=32, layer3=16, dropout_rate=0.5, optimizer='Adam'\r\n                    , learning_rate=0.001, activation='relu', loss='mse'):#, n_jobs=1):layer3=80, \r\n    \r\n    model = Sequential()\r\n    model.add(Bidirectional(GRU(layer1, return_sequences=True),input_shape=(X_train.shape[1],X_train.shape[2])))\r\n    model.add(AveragePooling1D(2))\r\n    model.add(Conv1D(layer2, 3, activation=activation, padding='same', \r\n               name='extractor'))\r\n    model.add(Flatten())\r\n    model.add(Dense(layer3,activation=activation))\r\n    model.add(Dropout(dropout_rate))\r\n    model.add(Dense(1))\r\n    model.compile(optimizer=optimizer,loss=loss)\r\n    return model\r\n\r\ntwds_model=twds_model()\r\nprint(twds_model.summary())\r\n\r\n\r\ndef CustomVarious(y_true, y_pred):\r\n    y_true=y_true.reshape(len(y_true[:,1])*Heisei_TR.shape[1],)\r\n    \r\n    if np.isnan(y_pred).any():\r\n        result=-1000000\r\n        MAD= 1000000\r\n    else:\r\n        y_pred=y_pred.reshape(len(y_pred[:,1])*Heisei_TR.shape[1],)\r\n        MAD=median_absolute_error(y_true, y_pred)\r\n\r\n        print(MAD)\r\n\r\n        \r\n        \r\n\r\n    return MAD\r\n\r\nscorer = make_scorer(CustomVarious, greater_is_better=False)\r\n\r\nmodel_twds=KerasRegressor(build_fn=twds_Model, batch_size=256,epochs=6)\r\n\r\n\r\n############# PLACE OF THE ERROR ############\r\ntwds_Pred=cross_val_predict(model_twds, \r\n               X_train, \r\n               y_train, \r\n               n_jobs=1, \r\n               cv=4, \r\n               verbose=2)\r\n\r\n```", "Or actually you could leave all the data preshaping and just feed in with \r\n```\r\nX_train = np.random.rand(1200,18,15)\r\nX_train = np.random.rand(1200,18,1 )\r\n```", "@tolandwehr Thank you for the update. I was able to reproduce the issue with [TF v2.3](https://colab.research.google.com/gist/amahendrakar/6c96a7afe89fcafdd512b62f0765f28f/42641.ipynb).\r\n\r\nWhereas on running the code with [TF-nightly](https://colab.research.google.com/gist/amahendrakar/74ae2a69f7d043f4be9d26b1e449738e/42641-tf-nightly.ipynb#scrollTo=EudEPDicA6HK), I am facing a different error stating `ValueError: The first argument to Layer.call must always be passed.` Please find the attached gist. Thanks!", " \r\n> ```\r\n> ---------------------------------------------------------------------------\r\n> TypeError                                 Traceback (most recent call last)\r\n> <ipython-input-603-37b55dfd53fd> in <module>\r\n> ----> 1 GridLSTM.fit(X_train, y_train)\r\n> \r\n> ~\\Anaconda3\\envs\\Tensorflow\\lib\\site-packages\\sklearn\\utils\\validation.py in inner_f(*args, **kwargs)\r\n>      70                           FutureWarning)\r\n>      71         kwargs.update({k: arg for k, arg in zip(sig.parameters, args)})\r\n> ---> 72         return f(**kwargs)\r\n>      73     return inner_f\r\n>      74 \r\n> \r\n> ```\r\n\r\n@tolandwehr,\r\nLooking at the error log, it seems like the error is thrown from a `sklearn\\utils\\validation.py` module and `Tensorflow` is the name of your environment. Please correct me if I am wrong, thanks!", "@amahendrakar \r\n\r\nExactly, the environ was called 'Tensorflow', the module is 'sklearn\\utils\\validation.py'.", "@gowthamkpr,\r\nRunning the code with [TF v2.3](https://colab.research.google.com/gist/amahendrakar/6c96a7afe89fcafdd512b62f0765f28f/42641.ipynb#scrollTo=EudEPDicA6HK), throws an error stating `TypeError: can't pickle _thread.RLock objects`. \r\n\r\nHowever with [TF-nightly](https://colab.research.google.com/gist/amahendrakar/74ae2a69f7d043f4be9d26b1e449738e/42641-tf-nightly.ipynb#scrollTo=EudEPDicA6HK), the error changes to `ValueError: The first argument to Layer.call must always be passed.`. Please find the attached gist. Thanks! ", "@tolandwehr,\r\nCan you please refer [this Article](https://machinelearningmastery.com/use-keras-deep-learning-models-scikit-learn-python/) which comprises Using Keras Wrapper in Scikit Learn. Thanks!", "@tolandwehr,\r\nCan you please respond to the above comment. Thanks! ", "@rmothukuru \r\nSry, the last weeks are very busy on releasing some topics, I will come back to the issue next week.", "@tolandwehr,\r\nCan you please respond to the [above comment](https://github.com/tensorflow/tensorflow/issues/42641#issuecomment-725284038). Thanks! ", "Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!\r\n", "Are you satisfied with the resolution of your issue?\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42641\">Yes</a>\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42641\">No</a>\n", "I've just opened this related issue, but now with data freely available. https://github.com/tensorflow/tensorflow/issues/47324"]}, {"number": 42640, "title": "Tensorflow lite arm64 cross/native build issue", "body": "Hi,\r\n\r\nI am trying to build tensorflow-lite with edgetpu on Coral development board and following the instructions from the link below\r\nhttps://www.tensorflow.org/lite/guide/build_arm64#compile_natively_on_arm64\r\n\r\nI am checked out to d855adfc5a0195788bf5f92c3c7352e638aa1109(https://github.com/google-coral/edgetpu/blob/c48c88871fd3d2e10d298126cd6a08b88d22496c/WORKSPACE#L5 as per the instructions on step 3 of the link - https://coral.ai/docs/edgetpu/tflite-cpp/#build-your-project\r\n\r\nI am running into build issues with native as well as cross compilation with this SHA(master builds fine). Below is the log snippet of build failure\r\n\r\n```\r\nIn file included from /home/mg/workspace/nxpdemo/tensorflow/tensorflow/lite/tools/make/downloads/absl/absl/base/internal/periodic_sampler.h:22:0,\r\n                 from tensorflow/lite/tools/make/downloads/absl/absl/base/internal/periodic_sampler.cc:15:\r\n/home/mg/workspace/nxpdemo/tensorflow/tensorflow/lite/tools/make/downloads/absl/absl/base/internal/exponential_biased.h:24:1: error: \u2018ABSL_NAMESPACE_BEGIN\u2019 does not name a type\r\n ABSL_NAMESPACE_BEGIN\r\n ^~~~~~~~~~~~~~~~~~~~\r\ntensorflow/lite/tools/make/downloads/absl/absl/base/internal/exponential_biased.cc:28:1: error: \u2018ABSL_NAMESPACE_BEGIN\u2019 does not name a type\r\n ABSL_NAMESPACE_BEGIN\r\n ^~~~~~~~~~~~~~~~~~~~\r\n/home/mg/workspace/nxpdemo/tensorflow/tensorflow/lite/tools/make/downloads/absl/absl/base/internal/exponential_biased.h:127:1: error: \u2018ABSL_NAMESPACE_END\u2019 does not name a type; did you mean \u2018ABSL_BASE_PORT_H_\u2019?\r\n ABSL_NAMESPACE_END\r\n ^~~~~~~~~~~~~~~~~~\r\n\r\n```\r\n**Steps to build tensorflow-lite**\r\n\r\n1. git clone https://github.com/tensorflow/tensorflow and checkout to  d855adfc5a0195788bf5f92c3c7352e638aa1109\r\n2. cd tensorflow \r\n3. ./tensorflow/lite/tools/make/download_dependencies.sh\r\n4. ./tensorflow/lite/tools/make/build_aarch64_lib.sh\r\n\r\nI also tried to use master of tensorflow-lite with released version of libedgetup.so.1.0 with a sample test and ran into problems which I suspect are related to mismatch of versions between tensorflow-lite and libedgetpu\r\n\r\n> mendel@neat-jet:~/coral-demo/tflite/cpp/examples/classification$ ./minimal \r\n>  model: /edgetpu/test_data/mobilenet_v1_1.0_224_quant_edgetpu.tflite\r\n>  data: /edgetpu/test_data/resized_cat.bmp\r\n> ERROR: Internal: Unsupported data type in custom op handler: -591183536\r\n> ERROR: Node number 0 (edgetpu-custom-op) failed to prep\r\n\r\nThanks,\r\n\r\n", "comments": ["@clsdmgtk \r\nCould you please fill in the issue template, i am unable to find details as the tf version and system information.", "@Saduf2019 \r\n\r\n**System information for cross compile**\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04\r\n- Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\r\n- TensorFlow installed from (source):   https://github.com/tensorflow/tensorflow and checkout to d855adf\r\n- TensorFlow version: -\r\n- GCC/Compiler version (if compiling from source): aarch64-linux-gnu-g++ (Ubuntu/Linaro 7.5.0-3ubuntu1~18.04) 7.5.0\r\n\r\n**Native compile on Coral dev board**\r\n- OS Platform and Distribution: mendel 5.0\r\n- Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\r\n- TensorFlow installed from (source):   https://github.com/tensorflow/tensorflow and checkout to d855adf\r\n- TensorFlow version: -\r\n- GCC/Compiler version (if compiling from source): aarch64-linux-gnu-g++ (Debian 8.3.0-6) 8.3.0\r\n\r\nPlease let me know if I need to provide any other information.", "For some reason I was able to build both native and cross compile version today. However, I had to address the issue in https://github.com/google-coral/edgetpu/issues/201 which is not related to the original issue I saw yesterday.\r\n\r\nThanks for your attention on this issue.\r\n", "Are you satisfied with the resolution of your issue?\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42640\">Yes</a>\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42640\">No</a>\n", "> For some reason I was able to build both native and cross compile version today. However, I had to address the issue in [google-coral/edgetpu#201](https://github.com/google-coral/edgetpu/issues/201) which is not related to the original issue I saw yesterday.\r\n> \r\n> Thanks for your attention on this issue.\r\n\r\nMay I know how did you solve this issue?"]}, {"number": 42639, "title": "How do I use a local LLVM installation?", "body": "Hi,\r\n\r\nI've been trying to build TensorFlow with my local LLVM installation. I figured I have to choose `N` when I run `./configure`:\r\n```\r\nDo you wish to download a fresh release of clang? (Experimental) [y/N]: n\r\n```\r\nI also tried setting the environment variable manually for the build:\r\n```\r\nTF_DOWNLOAD_CLANG=\"0\" bazel build ...\r\n```\r\nHowever the build is still pulling llvm-project as an external dependency. Is using a local LLVM installation not supported? What do I need to do? Could you please give me the steps I need to take as I am new to Bazel or refer me to a resource?", "comments": ["@daravi,\r\nPlease provide details about what platform you are using (operating system, architecture). Also include your TensorFlow version. Also, did you compile from source or install a binary?\r\n\r\nMake sure you also include the exact command if possible to produce the output included in your test case. If you are unclear what to include see the issue template displayed in [the Github new issue template](https://github.com/tensorflow/tensorflow/issues/new/choose).\r\n\r\nWe ask for this in the issue submission template, because it is really difficult to help without that information. Thanks!\r\n ", "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.\n", "Closing as stale. Please reopen if you'd like to work on this further.\n", "Are you satisfied with the resolution of your issue?\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42639\">Yes</a>\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42639\">No</a>\n"]}, {"number": 42638, "title": "resized temp outputs in MnistForwardModel", "body": "@saxenasaurabh\r\n\r\npotential fix to segfault in TestMNISTForward", "comments": ["This still segfaults internally due to another bug in the gradients infra so I had to disable the test.\r\n\r\n@mihaimaruseac would you know why the tests for the original PR #41432 did not catch this?\r\n\r\n@amturati Are you able to repro the segfault on your machine. If not, we should look into that.", "@saxenasaurabh No, on my machine it compiles and runs succesfully", "@amturati what flags do you compile with? Which operating system? Trying to bisect", "I don't run any additional flags; the command I run is `bazel test: XXX`. I've been working through Secure Shell on the Linux Beta offered on the pixelbooks. "]}, {"number": 42636, "title": "Cannot convert predict function of LinearRegressor", "body": "**System information**\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04):\r\nWindows 10\r\n- TensorFlow installed from (source or binary):\r\nbinary / pip\r\n- TensorFlow version (or github SHA if from source):\r\n2.4.0-dev20200824\r\n\r\n**Command used to run the converter or code if you\u2019re using the Python API**\r\nIf possible, please share a link to Colab/Jupyter/any notebook.\r\n\r\n```\r\n# I have a tf.estimator.LinearRegressor and save it first with function export_saved_model from LinearRegressor.\r\n# Then I load it and save only the predict funtion\r\nimported = tf.saved_model.load('./modelbefore')\r\ntf.saved_model.save(imported, 'model', imported.signatures[\"predict\"])\r\n# Saved model attached below\r\n# Wenn I then try to load as following I get the error below\r\nconverter = tf.lite.TFLiteConverter.from_saved_model('model')\r\ntflite_model = converter.convert()\r\n```\r\n\r\n**The output from the converter invocation**\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nException                                 Traceback (most recent call last)\r\n~\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\tensorflow\\lite\\python\\convert.py in toco_convert_protos(model_flags_str, toco_flags_str, input_data_str, debug_info_str, enable_mlir_converter)\r\n    195     try:\r\n--> 196       model_str = wrap_toco.wrapped_toco_convert(model_flags_str,\r\n    197                                                  toco_flags_str, input_data_str,\r\n\r\n~\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\tensorflow\\lite\\python\\wrap_toco.py in wrapped_toco_convert(model_flags_str, toco_flags_str, input_data_str, debug_info_str, enable_mlir_converter)\r\n     31   \"\"\"Wraps TocoConvert with lazy loader.\"\"\"\r\n---> 32   return _pywrap_toco_api.TocoConvert(\r\n     33       model_flags_str,\r\n\r\nException: :0: error: loc(callsite(callsite(\"ParseExample/ParseExampleV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.ParseExampleV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"ParseExample/ParseExampleV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %sparse_indices:5, %sparse_values:5, %sparse_shapes:5, %dense_values:5 = \"tf.ParseExampleV2\"(%arg0, %cst_6, %cst_7, %cst_5, %cst_6, %cst_4, %cst_4, %cst_4, %cst_4, %cst_4) {dense_shapes = [#tf.shape<1>, #tf.shape<1>, #tf.shape<1>, #tf.shape<1>, #tf.shape<1>], device = \"\", num_sparse = 5 : i64, result_segment_sizes = dense<[5, 5, 5, 5, 0, 0]> : vector<6xi32>} : (tensor, tensor<0x!tf.string>, tensor<5x!tf.string>, tensor<5x!tf.string>, tensor<0x!tf.string>, tensor<0xf32>, tensor<0xf32>, tensor<0xf32>, tensor<0xf32>, tensor<0xf32>) -> (tensor, tensor, tensor, tensor, tensor, tensor, tensor, tensor, tensor, tensor, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor, tensor, tensor, tensor, tensor)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/category_id_lookup/hash_table/hash_table@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.HashTableV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/category_id_lookup/hash_table/hash_table@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %4 = \"tf.HashTableV2\"() {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_8d6f1b8e-423d-4fff-8a54-69f4ddbecf04_load_0_197\", use_node_name_sharing = true, value_dtype = i64} : () -> tensor\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/hash_table_Lookup/LookupTableFindV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.LookupTableFindV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/hash_table_Lookup/LookupTableFindV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %5 = \"tf.LookupTableFindV2\"(%4, %sparse_values#0, %cst_9) {device = \"\"} : (tensor, tensor, tensor) -> tensor<*xi64>\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseReshape' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices, %output_shape = \"tf.SparseReshape\"(%sparse_indices#0, %sparse_shapes#0, %8) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/weighted_sum/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseReshape' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/weighted_sum/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_22, %output_shape_23 = \"tf.SparseReshape\"(%output_indices, %output_shape, %17) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseFillEmptyRows' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_24, %output_values, %empty_row_indicator, %reverse_index_map = \"tf.SparseFillEmptyRows\"(%18, %14, %output_shape_23, %cst_13) {device = \"\"} : (tensor, tensor<*xi64>, tensor<2xi64>, tensor) -> (tensor, tensor, tensor, tensor)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/description_lookup/hash_table/hash_table@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.HashTableV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/description_lookup/hash_table/hash_table@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %22 = \"tf.HashTableV2\"() {container = \"\", device = \"\", key_dtype = !tf.string, shared_name = \"hash_table_fc7c2e70-8a89-4115-84d4-2f713273e69c_load_0_198\", use_node_name_sharing = true, value_dtype = i64} : () -> tensor\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/hash_table_Lookup/LookupTableFindV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.LookupTableFindV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/hash_table_Lookup/LookupTableFindV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %23 = \"tf.LookupTableFindV2\"(%22, %sparse_values#1, %cst_9) {device = \"\"} : (tensor, tensor, tensor) -> tensor<*xi64>\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseReshape' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_25, %output_shape_26 = \"tf.SparseReshape\"(%sparse_indices#1, %sparse_shapes#1, %26) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/weighted_sum/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseReshape' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/weighted_sum/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_27, %output_shape_28 = \"tf.SparseReshape\"(%output_indices_25, %output_shape_26, %35) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseFillEmptyRows' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_29, %output_values_30, %empty_row_indicator_31, %reverse_index_map_32 = \"tf.SparseFillEmptyRows\"(%36, %32, %output_shape_28, %cst_13) {device = \"\"} : (tensor, tensor<*xi64>, tensor<2xi64>, tensor) -> (tensor, tensor, tensor, tensor)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/host_id_lookup/hash_table/hash_table@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.HashTableV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/host_id_lookup/hash_table/hash_table@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %40 = \"tf.HashTableV2\"() {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_b60d3bcd-14f8-4085-a3b2-85948ec09373_load_0_199\", use_node_name_sharing = true, value_dtype = i64} : () -> tensor\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/hash_table_Lookup/LookupTableFindV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.LookupTableFindV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/hash_table_Lookup/LookupTableFindV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %41 = \"tf.LookupTableFindV2\"(%40, %sparse_values#3, %cst_9) {device = \"\"} : (tensor, tensor, tensor) -> tensor<*xi64>\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseReshape' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_35, %output_shape_36 = \"tf.SparseReshape\"(%sparse_indices#3, %sparse_shapes#3, %44) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/weighted_sum/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseReshape' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/weighted_sum/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_37, %output_shape_38 = \"tf.SparseReshape\"(%output_indices_35, %output_shape_36, %53) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseFillEmptyRows' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_39, %output_values_40, %empty_row_indicator_41, %reverse_index_map_42 = \"tf.SparseFillEmptyRows\"(%54, %50, %output_shape_38, %cst_13) {device = \"\"} : (tensor, tensor<*xi64>, tensor<2xi64>, tensor) -> (tensor, tensor, tensor, tensor)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/size_id_lookup/hash_table/hash_table@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.HashTableV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/size_id_lookup/hash_table/hash_table@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %58 = \"tf.HashTableV2\"() {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_cb0918fe-8c8e-41f5-9aad-3750ec00bdad_load_0_200\", use_node_name_sharing = true, value_dtype = i64} : () -> tensor\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/hash_table_Lookup/LookupTableFindV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.LookupTableFindV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/hash_table_Lookup/LookupTableFindV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %59 = \"tf.LookupTableFindV2\"(%58, %sparse_values#4, %cst_9) {device = \"\"} : (tensor, tensor, tensor) -> tensor<*xi64>\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseReshape' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_45, %output_shape_46 = \"tf.SparseReshape\"(%sparse_indices#4, %sparse_shapes#4, %62) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/weighted_sum/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseReshape' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/weighted_sum/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_47, %output_shape_48 = \"tf.SparseReshape\"(%output_indices_45, %output_shape_46, %71) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseFillEmptyRows' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_49, %output_values_50, %empty_row_indicator_51, %reverse_index_map_52 = \"tf.SparseFillEmptyRows\"(%72, %68, %output_shape_48, %cst_13) {device = \"\"} : (tensor, tensor<*xi64>, tensor<2xi64>, tensor) -> (tensor, tensor, tensor, tensor)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/weighted_sum/embedding_lookup_sparse@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseSegmentSum' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/weighted_sum/embedding_lookup_sparse@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %127 = \"tf.SparseSegmentSum\"(%76, %idx, %21) {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"} : (tensor, tensor, tensor) -> tensor\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/weighted_sum/embedding_lookup_sparse@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseSegmentSum' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/weighted_sum/embedding_lookup_sparse@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %127 = \"tf.SparseSegmentSum\"(%88, %idx_34, %39) {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"} : (tensor, tensor, tensor) -> tensor\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/weighted_sum/embedding_lookup_sparse@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseSegmentSum' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/weighted_sum/embedding_lookup_sparse@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %127 = \"tf.SparseSegmentSum\"(%100, %idx_44, %57) {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"} : (tensor, tensor, tensor) -> tensor\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/weighted_sum/embedding_lookup_sparse@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseSegmentSum' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/weighted_sum/embedding_lookup_sparse@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %127 = \"tf.SparseSegmentSum\"(%113, %idx_54, %75) {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"} : (tensor, tensor, tensor) -> tensor\r\n:0: error: failed while converting: 'main': Ops that can be supported by the flex runtime (enabled via setting the -emit-select-tf-ops flag):\r\n\ttf.ParseExampleV2 {dense_shapes = [#tf.shape<1>, #tf.shape<1>, #tf.shape<1>, #tf.shape<1>, #tf.shape<1>], device = \"\", num_sparse = 5 : i64, result_segment_sizes = dense<[5, 5, 5, 5, 0, 0]> : vector<6xi32>}\r\n\ttf.SparseFillEmptyRows {device = \"\"}\r\n\ttf.SparseReshape {device = \"\"}\r\n\ttf.SparseSegmentSum {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"}Ops that need custom implementation (enabled via setting the -emit-custom-ops flag):\r\n\ttf.HashTableV2 {container = \"\", device = \"\", key_dtype = !tf.string, shared_name = \"hash_table_fc7c2e70-8a89-4115-84d4-2f713273e69c_load_0_198\", use_node_name_sharing = true, value_dtype = i64}\r\n\ttf.HashTableV2 {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_8d6f1b8e-423d-4fff-8a54-69f4ddbecf04_load_0_197\", use_node_name_sharing = true, value_dtype = i64}\r\n\ttf.HashTableV2 {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_b60d3bcd-14f8-4085-a3b2-85948ec09373_load_0_199\", use_node_name_sharing = true, value_dtype = i64}\r\n\ttf.HashTableV2 {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_cb0918fe-8c8e-41f5-9aad-3750ec00bdad_load_0_200\", use_node_name_sharing = true, value_dtype = i64}\r\n\ttf.LookupTableFindV2 {device = \"\"}\r\n:0: note: see current operation: \"func\"() ( {\r\n^bb0(%arg0: tensor):  // no predecessors\r\n  %cst = \"std.constant\"() {value = dense<[[0.117987722], [-0.0684242323], [0.100408614], [0.0145546673], [0.0430826135], [-0.103112921], [0.0680344701], [-0.0248609539], [0.0398180261], [0.122247897], [0.0273514148], [0.0187784135], [0.102349631], [-0.0905613824], [-0.0723603144], [-0.0438856669], [0.0021427928], [0.0984751954], [0.0817138106], [-0.109699354], [-0.191155598], [-0.0545536913], [-9.727810e-02], [0.0141912363], [7.680510e-02], [-0.0899474472], [0.0498611145], [-0.0884774774], [-0.114087969], [0.0725763887], [-0.141074464], [-0.176522136], [0.0143758887], [0.0524854325], [-0.155160338], [-0.0285528414], [-0.264534861], [0.106433257], [0.135232121], [0.225332677], [0.129775301], [-0.191358164], [-0.0178745817], [0.0918667614], [0.107648872], [-0.0921946167], [0.064818345], [0.0105348462], [-0.132097453], [-0.110714845], [0.0700208098], [0.034297362], [0.0263220761], [-0.059998773], [-0.0116290115], [0.101751082], [0.0713425949], [-0.0987613201], [-0.209998265], [0.0471415743], [0.10908471], [7.703180e-03], [0.0123223783], [0.103961319], [0.00920343306], [-0.110373154], [-0.113558963], [-0.0215992182], [-0.21590668], [-0.103494935], [-0.21094574], [-0.132196262], [0.18838799], [0.659609914], [-0.209931418], [-0.195380583], [-0.115891144], [-0.130379677], [-0.236354247], [0.111823596]]> : tensor<80x1xf32>} : () -> tensor<80x1xf32>\r\n  %cst_0 = \"std.constant\"() {value = dense<[[0.0778336599], [0.0839953199]]> : tensor<2x1xf32>} : () -> tensor<2x1xf32>\r\n  %cst_1 = \"std.constant\"() {value = dense<\"tensor<6203x1xf32>} : () -> tensor<6203x1xf32>\r\n  %cst_2 = \"std.constant\"() {value = dense<[[0.137156427], [0.0727723241], [0.0427678488], [-2.75064172E-4], [-0.0233619846], [0.0394954272], [-0.0791109725]]> : tensor<7x1xf32>} : () -> tensor<7x1xf32>\r\n  %cst_3 = \"std.constant\"() {value = dense<0.131277829> : tensor<1xf32>} : () -> tensor<1xf32>\r\n  %cst_4 = \"std.constant\"() {value = dense<> : tensor<0xf32>} : () -> tensor<0xf32>\r\n  %cst_5 = \"std.constant\"() {value = dense<[\"lat\", \"long\", \"month\", \"price\", \"year\"]> : tensor<5x!tf.string>} : () -> tensor<5x!tf.string>\r\n  %cst_6 = \"std.constant\"() {value = dense<> : tensor<0x!tf.string>} : () -> tensor<0x!tf.string>\r\n  %cst_7 = \"std.constant\"() {value = dense<[\"category_id\", \"description\", \"gender\", \"host_id\", \"size_id\"]> : tensor<5x!tf.string>} : () -> tensor<5x!tf.string>\r\n  %cst_8 = \"std.constant\"() {value = dense<-1> : tensor} : () -> tensor\r\n  %cst_9 = \"std.constant\"() {value = dense<-1> : tensor} : () -> tensor\r\n  %cst_10 = \"std.constant\"() {value = dense<[-1, 1]> : tensor<2xi32>} : () -> tensor<2xi32>\r\n  %cst_11 = \"std.constant\"() {value = dense<-1> : tensor<1xi32>} : () -> tensor<1xi32>\r\n  %cst_12 = \"std.constant\"() {value = dense<1> : tensor} : () -> tensor\r\n  %cst_13 = \"std.constant\"() {value = dense<0> : tensor} : () -> tensor\r\n  %cst_14 = \"std.constant\"() {value = dense<-0.0035018248> : tensor<1x1xf32>} : () -> tensor<1x1xf32>\r\n  %cst_15 = \"std.constant\"() {value = dense<0> : tensor<1xi32>} : () -> tensor<1xi32>\r\n  %cst_16 = \"std.constant\"() {value = dense<0> : tensor<2xi32>} : () -> tensor<2xi32>\r\n  %cst_17 = \"std.constant\"() {value = dense<[0, 1]> : tensor<2xi32>} : () -> tensor<2xi32>\r\n  %cst_18 = \"std.constant\"() {value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32>\r\n  %cst_19 = \"std.constant\"() {value} : () -> none\r\n  %cst_20 = \"std.constant\"() {value = dense<2> : tensor<1xi32>} : () -> tensor<1xi32>\r\n  %cst_21 = \"std.constant\"() {value = dense<1> : tensor<1xi32>} : () -> tensor<1xi32>\r\n  %sparse_indices:5, %sparse_values:5, %sparse_shapes:5, %dense_values:5 = \"tf.ParseExampleV2\"(%arg0, %cst_6, %cst_7, %cst_5, %cst_6, %cst_4, %cst_4, %cst_4, %cst_4, %cst_4) {dense_shapes = [#tf.shape<1>, #tf.shape<1>, #tf.shape<1>, #tf.shape<1>, #tf.shape<1>], device = \"\", num_sparse = 5 : i64, result_segment_sizes = dense<[5, 5, 5, 5, 0, 0]> : vector<6xi32>} : (tensor, tensor<0x!tf.string>, tensor<5x!tf.string>, tensor<5x!tf.string>, tensor<0x!tf.string>, tensor<0xf32>, tensor<0xf32>, tensor<0xf32>, tensor<0xf32>, tensor<0xf32>) -> (tensor, tensor, tensor, tensor, tensor, tensor, tensor, tensor, tensor, tensor, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor, tensor, tensor, tensor, tensor)\r\n  %0 = \"tfl.cast\"(%sparse_shapes#0) : (tensor<2xi64>) -> tensor<2xi32>\r\n  %1 = \"tfl.cast\"(%sparse_shapes#1) : (tensor<2xi64>) -> tensor<2xi32>\r\n  %2 = \"tfl.cast\"(%sparse_shapes#3) : (tensor<2xi64>) -> tensor<2xi32>\r\n  %3 = \"tfl.cast\"(%sparse_shapes#4) : (tensor<2xi64>) -> tensor<2xi32>\r\n  %4 = \"tf.HashTableV2\"() {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_8d6f1b8e-423d-4fff-8a54-69f4ddbecf04_load_0_197\", use_node_name_sharing = true, value_dtype = i64} : () -> tensor\r\n  %5 = \"tf.LookupTableFindV2\"(%4, %sparse_values#0, %cst_9) {device = \"\"} : (tensor, tensor, tensor) -> tensor<*xi64>\r\n  %6 = \"tfl.strided_slice\"(%0, %cst_15, %cst_21, %cst_21) {begin_mask = 0 : i32, ellipsis_mask = 0 : i32, end_mask = 0 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 1 : i32} : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor\r\n  %7 = \"tfl.pack\"(%6, %cst_8) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi32>\r\n  %8 = \"tfl.cast\"(%7) : (tensor<2xi32>) -> tensor<2xi64>\r\n  %output_indices, %output_shape = \"tf.SparseReshape\"(%sparse_indices#0, %sparse_shapes#0, %8) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n  %9 = \"tfl.cast\"(%output_shape) : (tensor<2xi64>) -> tensor<2xi32>\r\n  %10 = \"tfl.gather\"(%output_shape, %cst_12) {axis = 0 : i32} : (tensor<2xi64>, tensor) -> tensor\r\n  %11 = \"tfl.greater_equal\"(%5, %cst_13) : (tensor<*xi64>, tensor) -> tensor<*xi1>\r\n  %12 = \"tfl.where\"(%11) : (tensor<*xi1>) -> tensor\r\n  %13 = \"tfl.reshape\"(%12, %cst_11) : (tensor, tensor<1xi32>) -> tensor\r\n  %14 = \"tfl.gather\"(%5, %13) {axis = 0 : i32} : (tensor<*xi64>, tensor) -> tensor<*xi64>\r\n  %15 = \"tfl.slice\"(%output_shape, %cst_15, %cst_21) : (tensor<2xi64>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi64>\r\n  %16 = \"tfl.reduce_prod\"(%15, %cst_15) {keep_dims = false} : (tensor<1xi64>, tensor<1xi32>) -> tensor\r\n  %17 = \"tfl.pack\"(%16, %10) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi64>\r\n  %output_indices_22, %output_shape_23 = \"tf.SparseReshape\"(%output_indices, %output_shape, %17) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n  %18 = \"tfl.gather\"(%output_indices_22, %13) {axis = 0 : i32} : (tensor, tensor) -> tensor\r\n  %19 = \"tfl.slice\"(%9, %cst_15, %cst_21) : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>\r\n  %output_indices_24, %output_values, %empty_row_indicator, %reverse_index_map = \"tf.SparseFillEmptyRows\"(%18, %14, %output_shape_23, %cst_13) {device = \"\"} : (tensor, tensor<*xi64>, tensor<2xi64>, tensor) -> (tensor, tensor, tensor, tensor)\r\n  %20 = \"tfl.reshape\"(%empty_row_indicator, %cst_10) : (tensor, tensor<2xi32>) -> tensor\r\n  %output, %idx = \"tfl.unique\"(%output_values) : (tensor) -> (tensor, tensor)\r\n  %21 = \"tfl.strided_slice\"(%output_indices_24, %cst_16, %cst_17, %cst_18) {begin_mask = 1 : i32, ellipsis_mask = 0 : i32, end_mask = 1 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 2 : i32} : (tensor, tensor<2xi32>, tensor<2xi32>, tensor<2xi32>) -> tensor\r\n  %22 = \"tf.HashTableV2\"() {container = \"\", device = \"\", key_dtype = !tf.string, shared_name = \"hash_table_fc7c2e70-8a89-4115-84d4-2f713273e69c_load_0_198\", use_node_name_sharing = true, value_dtype = i64} : () -> tensor\r\n  %23 = \"tf.LookupTableFindV2\"(%22, %sparse_values#1, %cst_9) {device = \"\"} : (tensor, tensor, tensor) -> tensor<*xi64>\r\n  %24 = \"tfl.strided_slice\"(%1, %cst_15, %cst_21, %cst_21) {begin_mask = 0 : i32, ellipsis_mask = 0 : i32, end_mask = 0 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 1 : i32} : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor\r\n  %25 = \"tfl.pack\"(%24, %cst_8) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi32>\r\n  %26 = \"tfl.cast\"(%25) : (tensor<2xi32>) -> tensor<2xi64>\r\n  %output_indices_25, %output_shape_26 = \"tf.SparseReshape\"(%sparse_indices#1, %sparse_shapes#1, %26) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n  %27 = \"tfl.cast\"(%output_shape_26) : (tensor<2xi64>) -> tensor<2xi32>\r\n  %28 = \"tfl.gather\"(%output_shape_26, %cst_12) {axis = 0 : i32} : (tensor<2xi64>, tensor) -> tensor\r\n  %29 = \"tfl.greater_equal\"(%23, %cst_13) : (tensor<*xi64>, tensor) -> tensor<*xi1>\r\n  %30 = \"tfl.where\"(%29) : (tensor<*xi1>) -> tensor\r\n  %31 = \"tfl.reshape\"(%30, %cst_11) : (tensor, tensor<1xi32>) -> tensor\r\n  %32 = \"tfl.gather\"(%23, %31) {axis = 0 : i32} : (tensor<*xi64>, tensor) -> tensor<*xi64>\r\n  %33 = \"tfl.slice\"(%output_shape_26, %cst_15, %cst_21) : (tensor<2xi64>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi64>\r\n  %34 = \"tfl.reduce_prod\"(%33, %cst_15) {keep_dims = false} : (tensor<1xi64>, tensor<1xi32>) -> tensor\r\n  %35 = \"tfl.pack\"(%34, %28) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi64>\r\n  %output_indices_27, %output_shape_28 = \"tf.SparseReshape\"(%output_indices_25, %output_shape_26, %35) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n  %36 = \"tfl.gather\"(%output_indices_27, %31) {axis = 0 : i32} : (tensor, tensor) -> tensor\r\n  %37 = \"tfl.slice\"(%27, %cst_15, %cst_21) : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>\r\n  %output_indices_29, %output_values_30, %empty_row_indicator_31, %reverse_index_map_32 = \"tf.SparseFillEmptyRows\"(%36, %32, %output_shape_28, %cst_13) {device = \"\"} : (tensor, tensor<*xi64>, tensor<2xi64>, tensor) -> (tensor, tensor, tensor, tensor)\r\n  %38 = \"tfl.reshape\"(%empty_row_indicator_31, %cst_10) : (tensor, tensor<2xi32>) -> tensor\r\n  %output_33, %idx_34 = \"tfl.unique\"(%output_values_30) : (tensor) -> (tensor, tensor)\r\n  %39 = \"tfl.strided_slice\"(%output_indices_29, %cst_16, %cst_17, %cst_18) {begin_mask = 1 : i32, ellipsis_mask = 0 : i32, end_mask = 1 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 2 : i32} : (tensor, tensor<2xi32>, tensor<2xi32>, tensor<2xi32>) -> tensor\r\n  %40 = \"tf.HashTableV2\"() {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_b60d3bcd-14f8-4085-a3b2-85948ec09373_load_0_199\", use_node_name_sharing = true, value_dtype = i64} : () -> tensor\r\n  %41 = \"tf.LookupTableFindV2\"(%40, %sparse_values#3, %cst_9) {device = \"\"} : (tensor, tensor, tensor) -> tensor<*xi64>\r\n  %42 = \"tfl.strided_slice\"(%2, %cst_15, %cst_21, %cst_21) {begin_mask = 0 : i32, ellipsis_mask = 0 : i32, end_mask = 0 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 1 : i32} : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor\r\n  %43 = \"tfl.pack\"(%42, %cst_8) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi32>\r\n  %44 = \"tfl.cast\"(%43) : (tensor<2xi32>) -> tensor<2xi64>\r\n  %output_indices_35, %output_shape_36 = \"tf.SparseReshape\"(%sparse_indices#3, %sparse_shapes#3, %44) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n  %45 = \"tfl.cast\"(%output_shape_36) : (tensor<2xi64>) -> tensor<2xi32>\r\n  %46 = \"tfl.gather\"(%output_shape_36, %cst_12) {axis = 0 : i32} : (tensor<2xi64>, tensor) -> tensor\r\n  %47 = \"tfl.greater_equal\"(%41, %cst_13) : (tensor<*xi64>, tensor) -> tensor<*xi1>\r\n  %48 = \"tfl.where\"(%47) : (tensor<*xi1>) -> tensor\r\n  %49 = \"tfl.reshape\"(%48, %cst_11) : (tensor, tensor<1xi32>) -> tensor\r\n  %50 = \"tfl.gather\"(%41, %49) {axis = 0 : i32} : (tensor<*xi64>, tensor) -> tensor<*xi64>\r\n  %51 = \"tfl.slice\"(%output_shape_36, %cst_15, %cst_21) : (tensor<2xi64>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi64>\r\n  %52 = \"tfl.reduce_prod\"(%51, %cst_15) {keep_dims = false} : (tensor<1xi64>, tensor<1xi32>) -> tensor\r\n  %53 = \"tfl.pack\"(%52, %46) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi64>\r\n  %output_indices_37, %output_shape_38 = \"tf.SparseReshape\"(%output_indices_35, %output_shape_36, %53) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n  %54 = \"tfl.gather\"(%output_indices_37, %49) {axis = 0 : i32} : (tensor, tensor) -> tensor\r\n  %55 = \"tfl.slice\"(%45, %cst_15, %cst_21) : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>\r\n  %output_indices_39, %output_values_40, %empty_row_indicator_41, %reverse_index_map_42 = \"tf.SparseFillEmptyRows\"(%54, %50, %output_shape_38, %cst_13) {device = \"\"} : (tensor, tensor<*xi64>, tensor<2xi64>, tensor) -> (tensor, tensor, tensor, tensor)\r\n  %56 = \"tfl.reshape\"(%empty_row_indicator_41, %cst_10) : (tensor, tensor<2xi32>) -> tensor\r\n  %output_43, %idx_44 = \"tfl.unique\"(%output_values_40) : (tensor) -> (tensor, tensor)\r\n  %57 = \"tfl.strided_slice\"(%output_indices_39, %cst_16, %cst_17, %cst_18) {begin_mask = 1 : i32, ellipsis_mask = 0 : i32, end_mask = 1 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 2 : i32} : (tensor, tensor<2xi32>, tensor<2xi32>, tensor<2xi32>) -> tensor\r\n  %58 = \"tf.HashTableV2\"() {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_cb0918fe-8c8e-41f5-9aad-3750ec00bdad_load_0_200\", use_node_name_sharing = true, value_dtype = i64} : () -> tensor\r\n  %59 = \"tf.LookupTableFindV2\"(%58, %sparse_values#4, %cst_9) {device = \"\"} : (tensor, tensor, tensor) -> tensor<*xi64>\r\n  %60 = \"tfl.strided_slice\"(%3, %cst_15, %cst_21, %cst_21) {begin_mask = 0 : i32, ellipsis_mask = 0 : i32, end_mask = 0 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 1 : i32} : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor\r\n  %61 = \"tfl.pack\"(%60, %cst_8) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi32>\r\n  %62 = \"tfl.cast\"(%61) : (tensor<2xi32>) -> tensor<2xi64>\r\n  %output_indices_45, %output_shape_46 = \"tf.SparseReshape\"(%sparse_indices#4, %sparse_shapes#4, %62) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n  %63 = \"tfl.cast\"(%output_shape_46) : (tensor<2xi64>) -> tensor<2xi32>\r\n  %64 = \"tfl.gather\"(%output_shape_46, %cst_12) {axis = 0 : i32} : (tensor<2xi64>, tensor) -> tensor\r\n  %65 = \"tfl.greater_equal\"(%59, %cst_13) : (tensor<*xi64>, tensor) -> tensor<*xi1>\r\n  %66 = \"tfl.where\"(%65) : (tensor<*xi1>) -> tensor\r\n  %67 = \"tfl.reshape\"(%66, %cst_11) : (tensor, tensor<1xi32>) -> tensor\r\n  %68 = \"tfl.gather\"(%59, %67) {axis = 0 : i32} : (tensor<*xi64>, tensor) -> tensor<*xi64>\r\n  %69 = \"tfl.slice\"(%output_shape_46, %cst_15, %cst_21) : (tensor<2xi64>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi64>\r\n  %70 = \"tfl.reduce_prod\"(%69, %cst_15) {keep_dims = false} : (tensor<1xi64>, tensor<1xi32>) -> tensor\r\n  %71 = \"tfl.pack\"(%70, %64) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi64>\r\n  %output_indices_47, %output_shape_48 = \"tf.SparseReshape\"(%output_indices_45, %output_shape_46, %71) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n  %72 = \"tfl.gather\"(%output_indices_47, %67) {axis = 0 : i32} : (tensor, tensor) -> tensor\r\n  %73 = \"tfl.slice\"(%63, %cst_15, %cst_21) : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>\r\n  %output_indices_49, %output_values_50, %empty_row_indicator_51, %reverse_index_map_52 = \"tf.SparseFillEmptyRows\"(%72, %68, %output_shape_48, %cst_13) {device = \"\"} : (tensor, tensor<*xi64>, tensor<2xi64>, tensor) -> (tensor, tensor, tensor, tensor)\r\n  %74 = \"tfl.reshape\"(%empty_row_indicator_51, %cst_10) : (tensor, tensor<2xi32>) -> tensor\r\n  %output_53, %idx_54 = \"tfl.unique\"(%output_values_50) : (tensor) -> (tensor, tensor)\r\n  %75 = \"tfl.strided_slice\"(%output_indices_49, %cst_16, %cst_17, %cst_18) {begin_mask = 1 : i32, ellipsis_mask = 0 : i32, end_mask = 1 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 2 : i32} : (tensor, tensor<2xi32>, tensor<2xi32>, tensor<2xi32>) -> tensor\r\n  %76 = \"tfl.gather\"(%cst_2, %output) {axis = 0 : i32} : (tensor<7x1xf32>, tensor) -> tensor\r\n  %77 = \"tfl.custom_tf\"(%76, %idx, %21) ( {\r\n    %127 = \"tf.SparseSegmentSum\"(%76, %idx, %21) {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"} : (tensor, tensor, tensor) -> tensor\r\n    \"tfl.yield\"(%127) : (tensor) -> ()\r\n  }) : (tensor, tensor, tensor) -> tensor\r\n  %78 = \"tfl.shape\"(%77) : (tensor) -> tensor<2xi32>\r\n  %79 = \"tfl.strided_slice\"(%78, %cst_21, %cst_20, %cst_21) {begin_mask = 0 : i32, ellipsis_mask = 0 : i32, end_mask = 0 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 1 : i32} : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor\r\n  %80 = \"tfl.pack\"(%cst_12, %79) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi32>\r\n  %81 = \"tfl.tile\"(%20, %80) : (tensor, tensor<2xi32>) -> tensor\r\n  %82 = \"tfl.zeros_like\"(%77) : (tensor) -> tensor\r\n  %83 = \"tfl.select\"(%81, %82, %77) : (tensor, tensor, tensor) -> tensor\r\n  %84 = \"tfl.shape\"(%83) : (tensor) -> tensor<2xi32>\r\n  %85 = \"tfl.slice\"(%84, %cst_21, %cst_11) : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>\r\n  %86 = \"tfl.concatenation\"(%19, %85) {axis = 0 : i32, fused_activation_function = \"NONE\"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<2xi32>\r\n  %87 = \"tfl.reshape\"(%83, %86) : (tensor, tensor<2xi32>) -> tensor\r\n  %88 = \"tfl.gather\"(%cst_1, %output_33) {axis = 0 : i32} : (tensor<6203x1xf32>, tensor) -> tensor\r\n  %89 = \"tfl.custom_tf\"(%88, %idx_34, %39) ( {\r\n    %127 = \"tf.SparseSegmentSum\"(%88, %idx_34, %39) {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"} : (tensor, tensor, tensor) -> tensor\r\n    \"tfl.yield\"(%127) : (tensor) -> ()\r\n  }) : (tensor, tensor, tensor) -> tensor\r\n  %90 = \"tfl.shape\"(%89) : (tensor) -> tensor<2xi32>\r\n  %91 = \"tfl.strided_slice\"(%90, %cst_21, %cst_20, %cst_21) {begin_mask = 0 : i32, ellipsis_mask = 0 : i32, end_mask = 0 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 1 : i32} : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor\r\n  %92 = \"tfl.pack\"(%cst_12, %91) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi32>\r\n  %93 = \"tfl.tile\"(%38, %92) : (tensor, tensor<2xi32>) -> tensor\r\n  %94 = \"tfl.zeros_like\"(%89) : (tensor) -> tensor\r\n  %95 = \"tfl.select\"(%93, %94, %89) : (tensor, tensor, tensor) -> tensor\r\n  %96 = \"tfl.shape\"(%95) : (tensor) -> tensor<2xi32>\r\n  %97 = \"tfl.slice\"(%96, %cst_21, %cst_11) : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>\r\n  %98 = \"tfl.concatenation\"(%37, %97) {axis = 0 : i32, fused_activation_function = \"NONE\"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<2xi32>\r\n  %99 = \"tfl.reshape\"(%95, %98) : (tensor, tensor<2xi32>) -> tensor\r\n  %100 = \"tfl.gather\"(%cst_0, %output_43) {axis = 0 : i32} : (tensor<2x1xf32>, tensor) -> tensor\r\n  %101 = \"tfl.custom_tf\"(%100, %idx_44, %57) ( {\r\n    %127 = \"tf.SparseSegmentSum\"(%100, %idx_44, %57) {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"} : (tensor, tensor, tensor) -> tensor\r\n    \"tfl.yield\"(%127) : (tensor) -> ()\r\n  }) : (tensor, tensor, tensor) -> tensor\r\n  %102 = \"tfl.shape\"(%101) : (tensor) -> tensor<2xi32>\r\n  %103 = \"tfl.strided_slice\"(%102, %cst_21, %cst_20, %cst_21) {begin_mask = 0 : i32, ellipsis_mask = 0 : i32, end_mask = 0 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 1 : i32} : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor\r\n  %104 = \"tfl.pack\"(%cst_12, %103) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi32>\r\n  %105 = \"tfl.tile\"(%56, %104) : (tensor, tensor<2xi32>) -> tensor\r\n  %106 = \"tfl.zeros_like\"(%101) : (tensor) -> tensor\r\n  %107 = \"tfl.select\"(%105, %106, %101) : (tensor, tensor, tensor) -> tensor\r\n  %108 = \"tfl.shape\"(%107) : (tensor) -> tensor<2xi32>\r\n  %109 = \"tfl.slice\"(%108, %cst_21, %cst_11) : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>\r\n  %110 = \"tfl.concatenation\"(%55, %109) {axis = 0 : i32, fused_activation_function = \"NONE\"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<2xi32>\r\n  %111 = \"tfl.reshape\"(%107, %110) : (tensor, tensor<2xi32>) -> tensor\r\n  %112 = \"tfl.fully_connected\"(%dense_values#3, %cst_14, %cst_19) {fused_activation_function = \"NONE\", keep_num_dims = false, weights_format = \"DEFAULT\"} : (tensor, tensor<1x1xf32>, none) -> tensor\r\n  %113 = \"tfl.gather\"(%cst, %output_53) {axis = 0 : i32} : (tensor<80x1xf32>, tensor) -> tensor\r\n  %114 = \"tfl.custom_tf\"(%113, %idx_54, %75) ( {\r\n    %127 = \"tf.SparseSegmentSum\"(%113, %idx_54, %75) {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"} : (tensor, tensor, tensor) -> tensor\r\n    \"tfl.yield\"(%127) : (tensor) -> ()\r\n  }) : (tensor, tensor, tensor) -> tensor\r\n  %115 = \"tfl.shape\"(%114) : (tensor) -> tensor<2xi32>\r\n  %116 = \"tfl.strided_slice\"(%115, %cst_21, %cst_20, %cst_21) {begin_mask = 0 : i32, ellipsis_mask = 0 : i32, end_mask = 0 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 1 : i32} : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor\r\n  %117 = \"tfl.pack\"(%cst_12, %116) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi32>\r\n  %118 = \"tfl.tile\"(%74, %117) : (tensor, tensor<2xi32>) -> tensor\r\n  %119 = \"tfl.zeros_like\"(%114) : (tensor) -> tensor\r\n  %120 = \"tfl.select\"(%118, %119, %114) : (tensor, tensor, tensor) -> tensor\r\n  %121 = \"tfl.shape\"(%120) : (tensor) -> tensor<2xi32>\r\n  %122 = \"tfl.slice\"(%121, %cst_21, %cst_11) : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>\r\n  %123 = \"tfl.concatenation\"(%73, %122) {axis = 0 : i32, fused_activation_function = \"NONE\"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<2xi32>\r\n  %124 = \"tfl.reshape\"(%120, %123) : (tensor, tensor<2xi32>) -> tensor\r\n  %125 = \"tfl.add_n\"(%87, %99, %111, %112, %124) : (tensor, tensor, tensor, tensor, tensor) -> tensor\r\n  %126 = \"tfl.add\"(%125, %cst_3) {fused_activation_function = \"NONE\"} : (tensor, tensor<1xf32>) -> tensor\r\n  \"std.return\"(%126) : (tensor) -> ()\r\n}) {arg0 = {tf_saved_model.index_path = [\"examples\"]}, result0 = {tf_saved_model.index_path = [\"predictions\"]}, sym_name = \"main\", tf.entry_function = {control_outputs = \"\", inputs = \"serving_default_examples:0\", outputs = \"StatefulPartitionedCall_1:0\"}, tf_saved_model.exported_names = [\"serving_default\"], type = (tensor) -> tensor} : () -> ()\r\n\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nConverterError                            Traceback (most recent call last)\r\n in \r\n      1 converter = tf.lite.TFLiteConverter.from_saved_model('test2')\r\n----> 2 tflite_model = converter.convert()\r\n\r\n~\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\tensorflow\\lite\\python\\lite.py in convert(self)\r\n    722         for key in signature_def.outputs\r\n    723     ]\r\n--> 724     return super(TFLiteSavedModelConverterV2,\r\n    725                  self).convert(meta_graph.graph_def, input_tensors,\r\n    726                                output_tensors)\r\n\r\n~\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\tensorflow\\lite\\python\\lite.py in convert(self, graph_def, input_tensors, output_tensors)\r\n    637 \r\n    638     # Converts model.\r\n--> 639     result = _toco_convert_impl(\r\n    640         input_data=graph_def,\r\n    641         input_tensors=input_tensors,\r\n\r\n~\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\tensorflow\\lite\\python\\convert.py in toco_convert_impl(input_data, input_tensors, output_tensors, enable_mlir_converter, *args, **kwargs)\r\n    567       input_tensors, output_tensors, *args, **kwargs)\r\n    568   debug_info_str = debug_info.SerializeToString() if debug_info else None\r\n--> 569   data = toco_convert_protos(\r\n    570       model_flags.SerializeToString(),\r\n    571       toco_flags.SerializeToString(),\r\n\r\n~\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\tensorflow\\lite\\python\\convert.py in toco_convert_protos(model_flags_str, toco_flags_str, input_data_str, debug_info_str, enable_mlir_converter)\r\n    200       return model_str\r\n    201     except Exception as e:\r\n--> 202       raise ConverterError(str(e))\r\n    203 \r\n    204   if distutils.spawn.find_executable(_toco_from_proto_bin) is None:\r\n\r\nConverterError: :0: error: loc(callsite(callsite(\"ParseExample/ParseExampleV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.ParseExampleV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"ParseExample/ParseExampleV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %sparse_indices:5, %sparse_values:5, %sparse_shapes:5, %dense_values:5 = \"tf.ParseExampleV2\"(%arg0, %cst_6, %cst_7, %cst_5, %cst_6, %cst_4, %cst_4, %cst_4, %cst_4, %cst_4) {dense_shapes = [#tf.shape<1>, #tf.shape<1>, #tf.shape<1>, #tf.shape<1>, #tf.shape<1>], device = \"\", num_sparse = 5 : i64, result_segment_sizes = dense<[5, 5, 5, 5, 0, 0]> : vector<6xi32>} : (tensor, tensor<0x!tf.string>, tensor<5x!tf.string>, tensor<5x!tf.string>, tensor<0x!tf.string>, tensor<0xf32>, tensor<0xf32>, tensor<0xf32>, tensor<0xf32>, tensor<0xf32>) -> (tensor, tensor, tensor, tensor, tensor, tensor, tensor, tensor, tensor, tensor, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor, tensor, tensor, tensor, tensor)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/category_id_lookup/hash_table/hash_table@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.HashTableV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/category_id_lookup/hash_table/hash_table@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %4 = \"tf.HashTableV2\"() {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_8d6f1b8e-423d-4fff-8a54-69f4ddbecf04_load_0_197\", use_node_name_sharing = true, value_dtype = i64} : () -> tensor\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/hash_table_Lookup/LookupTableFindV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.LookupTableFindV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/hash_table_Lookup/LookupTableFindV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %5 = \"tf.LookupTableFindV2\"(%4, %sparse_values#0, %cst_9) {device = \"\"} : (tensor, tensor, tensor) -> tensor<*xi64>\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseReshape' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices, %output_shape = \"tf.SparseReshape\"(%sparse_indices#0, %sparse_shapes#0, %8) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/weighted_sum/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseReshape' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/weighted_sum/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_22, %output_shape_23 = \"tf.SparseReshape\"(%output_indices, %output_shape, %17) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseFillEmptyRows' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_24, %output_values, %empty_row_indicator, %reverse_index_map = \"tf.SparseFillEmptyRows\"(%18, %14, %output_shape_23, %cst_13) {device = \"\"} : (tensor, tensor<*xi64>, tensor<2xi64>, tensor) -> (tensor, tensor, tensor, tensor)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/description_lookup/hash_table/hash_table@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.HashTableV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/description_lookup/hash_table/hash_table@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %22 = \"tf.HashTableV2\"() {container = \"\", device = \"\", key_dtype = !tf.string, shared_name = \"hash_table_fc7c2e70-8a89-4115-84d4-2f713273e69c_load_0_198\", use_node_name_sharing = true, value_dtype = i64} : () -> tensor\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/hash_table_Lookup/LookupTableFindV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.LookupTableFindV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/hash_table_Lookup/LookupTableFindV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %23 = \"tf.LookupTableFindV2\"(%22, %sparse_values#1, %cst_9) {device = \"\"} : (tensor, tensor, tensor) -> tensor<*xi64>\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseReshape' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_25, %output_shape_26 = \"tf.SparseReshape\"(%sparse_indices#1, %sparse_shapes#1, %26) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/weighted_sum/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseReshape' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/weighted_sum/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_27, %output_shape_28 = \"tf.SparseReshape\"(%output_indices_25, %output_shape_26, %35) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseFillEmptyRows' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_29, %output_values_30, %empty_row_indicator_31, %reverse_index_map_32 = \"tf.SparseFillEmptyRows\"(%36, %32, %output_shape_28, %cst_13) {device = \"\"} : (tensor, tensor<*xi64>, tensor<2xi64>, tensor) -> (tensor, tensor, tensor, tensor)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/host_id_lookup/hash_table/hash_table@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.HashTableV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/host_id_lookup/hash_table/hash_table@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %40 = \"tf.HashTableV2\"() {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_b60d3bcd-14f8-4085-a3b2-85948ec09373_load_0_199\", use_node_name_sharing = true, value_dtype = i64} : () -> tensor\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/hash_table_Lookup/LookupTableFindV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.LookupTableFindV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/hash_table_Lookup/LookupTableFindV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %41 = \"tf.LookupTableFindV2\"(%40, %sparse_values#3, %cst_9) {device = \"\"} : (tensor, tensor, tensor) -> tensor<*xi64>\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseReshape' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_35, %output_shape_36 = \"tf.SparseReshape\"(%sparse_indices#3, %sparse_shapes#3, %44) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/weighted_sum/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseReshape' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/weighted_sum/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_37, %output_shape_38 = \"tf.SparseReshape\"(%output_indices_35, %output_shape_36, %53) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseFillEmptyRows' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_39, %output_values_40, %empty_row_indicator_41, %reverse_index_map_42 = \"tf.SparseFillEmptyRows\"(%54, %50, %output_shape_38, %cst_13) {device = \"\"} : (tensor, tensor<*xi64>, tensor<2xi64>, tensor) -> (tensor, tensor, tensor, tensor)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/size_id_lookup/hash_table/hash_table@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.HashTableV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/size_id_lookup/hash_table/hash_table@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %58 = \"tf.HashTableV2\"() {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_cb0918fe-8c8e-41f5-9aad-3750ec00bdad_load_0_200\", use_node_name_sharing = true, value_dtype = i64} : () -> tensor\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/hash_table_Lookup/LookupTableFindV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.LookupTableFindV2' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/hash_table_Lookup/LookupTableFindV2@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %59 = \"tf.LookupTableFindV2\"(%58, %sparse_values#4, %cst_9) {device = \"\"} : (tensor, tensor, tensor) -> tensor<*xi64>\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseReshape' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_45, %output_shape_46 = \"tf.SparseReshape\"(%sparse_indices#4, %sparse_shapes#4, %62) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/weighted_sum/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseReshape' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/weighted_sum/SparseReshape@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_47, %output_shape_48 = \"tf.SparseReshape\"(%output_indices_45, %output_shape_46, %71) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseFillEmptyRows' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %output_indices_49, %output_values_50, %empty_row_indicator_51, %reverse_index_map_52 = \"tf.SparseFillEmptyRows\"(%72, %68, %output_shape_48, %cst_13) {device = \"\"} : (tensor, tensor<*xi64>, tensor<2xi64>, tensor) -> (tensor, tensor, tensor, tensor)\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/weighted_sum/embedding_lookup_sparse@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseSegmentSum' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/category_id/weighted_sum/embedding_lookup_sparse@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %127 = \"tf.SparseSegmentSum\"(%76, %idx, %21) {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"} : (tensor, tensor, tensor) -> tensor\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/weighted_sum/embedding_lookup_sparse@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseSegmentSum' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/description/weighted_sum/embedding_lookup_sparse@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %127 = \"tf.SparseSegmentSum\"(%88, %idx_34, %39) {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"} : (tensor, tensor, tensor) -> tensor\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/weighted_sum/embedding_lookup_sparse@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseSegmentSum' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/host_id/weighted_sum/embedding_lookup_sparse@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %127 = \"tf.SparseSegmentSum\"(%100, %idx_44, %57) {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"} : (tensor, tensor, tensor) -> tensor\r\n:0: error: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/weighted_sum/embedding_lookup_sparse@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): 'tf.SparseSegmentSum' op is neither a custom op nor a flex op\r\n:0: note: loc(\"StatefulPartitionedCall_1\"): called from\r\n:0: note: loc(callsite(callsite(\"linear/linear_model/linear/linear_model/linear/linear_model/size_id/weighted_sum/embedding_lookup_sparse@__inference_pruned_1133\" at \"StatefulPartitionedCall@__inference_signature_wrapper_1850\") at \"StatefulPartitionedCall_1\")): see current operation: %127 = \"tf.SparseSegmentSum\"(%113, %idx_54, %75) {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"} : (tensor, tensor, tensor) -> tensor\r\n:0: error: failed while converting: 'main': Ops that can be supported by the flex runtime (enabled via setting the -emit-select-tf-ops flag):\r\n\ttf.ParseExampleV2 {dense_shapes = [#tf.shape<1>, #tf.shape<1>, #tf.shape<1>, #tf.shape<1>, #tf.shape<1>], device = \"\", num_sparse = 5 : i64, result_segment_sizes = dense<[5, 5, 5, 5, 0, 0]> : vector<6xi32>}\r\n\ttf.SparseFillEmptyRows {device = \"\"}\r\n\ttf.SparseReshape {device = \"\"}\r\n\ttf.SparseSegmentSum {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"}Ops that need custom implementation (enabled via setting the -emit-custom-ops flag):\r\n\ttf.HashTableV2 {container = \"\", device = \"\", key_dtype = !tf.string, shared_name = \"hash_table_fc7c2e70-8a89-4115-84d4-2f713273e69c_load_0_198\", use_node_name_sharing = true, value_dtype = i64}\r\n\ttf.HashTableV2 {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_8d6f1b8e-423d-4fff-8a54-69f4ddbecf04_load_0_197\", use_node_name_sharing = true, value_dtype = i64}\r\n\ttf.HashTableV2 {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_b60d3bcd-14f8-4085-a3b2-85948ec09373_load_0_199\", use_node_name_sharing = true, value_dtype = i64}\r\n\ttf.HashTableV2 {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_cb0918fe-8c8e-41f5-9aad-3750ec00bdad_load_0_200\", use_node_name_sharing = true, value_dtype = i64}\r\n\ttf.LookupTableFindV2 {device = \"\"}\r\n:0: note: see current operation: \"func\"() ( {\r\n^bb0(%arg0: tensor):  // no predecessors\r\n  %cst = \"std.constant\"() {value = dense<[[0.117987722], [-0.0684242323], [0.100408614], [0.0145546673], [0.0430826135], [-0.103112921], [0.0680344701], [-0.0248609539], [0.0398180261], [0.122247897], [0.0273514148], [0.0187784135], [0.102349631], [-0.0905613824], [-0.0723603144], [-0.0438856669], [0.0021427928], [0.0984751954], [0.0817138106], [-0.109699354], [-0.191155598], [-0.0545536913], [-9.727810e-02], [0.0141912363], [7.680510e-02], [-0.0899474472], [0.0498611145], [-0.0884774774], [-0.114087969], [0.0725763887], [-0.141074464], [-0.176522136], [0.0143758887], [0.0524854325], [-0.155160338], [-0.0285528414], [-0.264534861], [0.106433257], [0.135232121], [0.225332677], [0.129775301], [-0.191358164], [-0.0178745817], [0.0918667614], [0.107648872], [-0.0921946167], [0.064818345], [0.0105348462], [-0.132097453], [-0.110714845], [0.0700208098], [0.034297362], [0.0263220761], [-0.059998773], [-0.0116290115], [0.101751082], [0.0713425949], [-0.0987613201], [-0.209998265], [0.0471415743], [0.10908471], [7.703180e-03], [0.0123223783], [0.103961319], [0.00920343306], [-0.110373154], [-0.113558963], [-0.0215992182], [-0.21590668], [-0.103494935], [-0.21094574], [-0.132196262], [0.18838799], [0.659609914], [-0.209931418], [-0.195380583], [-0.115891144], [-0.130379677], [-0.236354247], [0.111823596]]> : tensor<80x1xf32>} : () -> tensor<80x1xf32>\r\n  %cst_0 = \"std.constant\"() {value = dense<[[0.0778336599], [0.0839953199]]> : tensor<2x1xf32>} : () -> tensor<2x1xf32>\r\n  %cst_1 = \"std.constant\"() {value = dense<\"tensor<6203x1xf32>} : () -> tensor<6203x1xf32>\r\n  %cst_2 = \"std.constant\"() {value = dense<[[0.137156427], [0.0727723241], [0.0427678488], [-2.75064172E-4], [-0.0233619846], [0.0394954272], [-0.0791109725]]> : tensor<7x1xf32>} : () -> tensor<7x1xf32>\r\n  %cst_3 = \"std.constant\"() {value = dense<0.131277829> : tensor<1xf32>} : () -> tensor<1xf32>\r\n  %cst_4 = \"std.constant\"() {value = dense<> : tensor<0xf32>} : () -> tensor<0xf32>\r\n  %cst_5 = \"std.constant\"() {value = dense<[\"lat\", \"long\", \"month\", \"price\", \"year\"]> : tensor<5x!tf.string>} : () -> tensor<5x!tf.string>\r\n  %cst_6 = \"std.constant\"() {value = dense<> : tensor<0x!tf.string>} : () -> tensor<0x!tf.string>\r\n  %cst_7 = \"std.constant\"() {value = dense<[\"category_id\", \"description\", \"gender\", \"host_id\", \"size_id\"]> : tensor<5x!tf.string>} : () -> tensor<5x!tf.string>\r\n  %cst_8 = \"std.constant\"() {value = dense<-1> : tensor} : () -> tensor\r\n  %cst_9 = \"std.constant\"() {value = dense<-1> : tensor} : () -> tensor\r\n  %cst_10 = \"std.constant\"() {value = dense<[-1, 1]> : tensor<2xi32>} : () -> tensor<2xi32>\r\n  %cst_11 = \"std.constant\"() {value = dense<-1> : tensor<1xi32>} : () -> tensor<1xi32>\r\n  %cst_12 = \"std.constant\"() {value = dense<1> : tensor} : () -> tensor\r\n  %cst_13 = \"std.constant\"() {value = dense<0> : tensor} : () -> tensor\r\n  %cst_14 = \"std.constant\"() {value = dense<-0.0035018248> : tensor<1x1xf32>} : () -> tensor<1x1xf32>\r\n  %cst_15 = \"std.constant\"() {value = dense<0> : tensor<1xi32>} : () -> tensor<1xi32>\r\n  %cst_16 = \"std.constant\"() {value = dense<0> : tensor<2xi32>} : () -> tensor<2xi32>\r\n  %cst_17 = \"std.constant\"() {value = dense<[0, 1]> : tensor<2xi32>} : () -> tensor<2xi32>\r\n  %cst_18 = \"std.constant\"() {value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32>\r\n  %cst_19 = \"std.constant\"() {value} : () -> none\r\n  %cst_20 = \"std.constant\"() {value = dense<2> : tensor<1xi32>} : () -> tensor<1xi32>\r\n  %cst_21 = \"std.constant\"() {value = dense<1> : tensor<1xi32>} : () -> tensor<1xi32>\r\n  %sparse_indices:5, %sparse_values:5, %sparse_shapes:5, %dense_values:5 = \"tf.ParseExampleV2\"(%arg0, %cst_6, %cst_7, %cst_5, %cst_6, %cst_4, %cst_4, %cst_4, %cst_4, %cst_4) {dense_shapes = [#tf.shape<1>, #tf.shape<1>, #tf.shape<1>, #tf.shape<1>, #tf.shape<1>], device = \"\", num_sparse = 5 : i64, result_segment_sizes = dense<[5, 5, 5, 5, 0, 0]> : vector<6xi32>} : (tensor, tensor<0x!tf.string>, tensor<5x!tf.string>, tensor<5x!tf.string>, tensor<0x!tf.string>, tensor<0xf32>, tensor<0xf32>, tensor<0xf32>, tensor<0xf32>, tensor<0xf32>) -> (tensor, tensor, tensor, tensor, tensor, tensor, tensor, tensor, tensor, tensor, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor, tensor, tensor, tensor, tensor)\r\n  %0 = \"tfl.cast\"(%sparse_shapes#0) : (tensor<2xi64>) -> tensor<2xi32>\r\n  %1 = \"tfl.cast\"(%sparse_shapes#1) : (tensor<2xi64>) -> tensor<2xi32>\r\n  %2 = \"tfl.cast\"(%sparse_shapes#3) : (tensor<2xi64>) -> tensor<2xi32>\r\n  %3 = \"tfl.cast\"(%sparse_shapes#4) : (tensor<2xi64>) -> tensor<2xi32>\r\n  %4 = \"tf.HashTableV2\"() {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_8d6f1b8e-423d-4fff-8a54-69f4ddbecf04_load_0_197\", use_node_name_sharing = true, value_dtype = i64} : () -> tensor\r\n  %5 = \"tf.LookupTableFindV2\"(%4, %sparse_values#0, %cst_9) {device = \"\"} : (tensor, tensor, tensor) -> tensor<*xi64>\r\n  %6 = \"tfl.strided_slice\"(%0, %cst_15, %cst_21, %cst_21) {begin_mask = 0 : i32, ellipsis_mask = 0 : i32, end_mask = 0 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 1 : i32} : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor\r\n  %7 = \"tfl.pack\"(%6, %cst_8) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi32>\r\n  %8 = \"tfl.cast\"(%7) : (tensor<2xi32>) -> tensor<2xi64>\r\n  %output_indices, %output_shape = \"tf.SparseReshape\"(%sparse_indices#0, %sparse_shapes#0, %8) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n  %9 = \"tfl.cast\"(%output_shape) : (tensor<2xi64>) -> tensor<2xi32>\r\n  %10 = \"tfl.gather\"(%output_shape, %cst_12) {axis = 0 : i32} : (tensor<2xi64>, tensor) -> tensor\r\n  %11 = \"tfl.greater_equal\"(%5, %cst_13) : (tensor<*xi64>, tensor) -> tensor<*xi1>\r\n  %12 = \"tfl.where\"(%11) : (tensor<*xi1>) -> tensor\r\n  %13 = \"tfl.reshape\"(%12, %cst_11) : (tensor, tensor<1xi32>) -> tensor\r\n  %14 = \"tfl.gather\"(%5, %13) {axis = 0 : i32} : (tensor<*xi64>, tensor) -> tensor<*xi64>\r\n  %15 = \"tfl.slice\"(%output_shape, %cst_15, %cst_21) : (tensor<2xi64>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi64>\r\n  %16 = \"tfl.reduce_prod\"(%15, %cst_15) {keep_dims = false} : (tensor<1xi64>, tensor<1xi32>) -> tensor\r\n  %17 = \"tfl.pack\"(%16, %10) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi64>\r\n  %output_indices_22, %output_shape_23 = \"tf.SparseReshape\"(%output_indices, %output_shape, %17) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n  %18 = \"tfl.gather\"(%output_indices_22, %13) {axis = 0 : i32} : (tensor, tensor) -> tensor\r\n  %19 = \"tfl.slice\"(%9, %cst_15, %cst_21) : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>\r\n  %output_indices_24, %output_values, %empty_row_indicator, %reverse_index_map = \"tf.SparseFillEmptyRows\"(%18, %14, %output_shape_23, %cst_13) {device = \"\"} : (tensor, tensor<*xi64>, tensor<2xi64>, tensor) -> (tensor, tensor, tensor, tensor)\r\n  %20 = \"tfl.reshape\"(%empty_row_indicator, %cst_10) : (tensor, tensor<2xi32>) -> tensor\r\n  %output, %idx = \"tfl.unique\"(%output_values) : (tensor) -> (tensor, tensor)\r\n  %21 = \"tfl.strided_slice\"(%output_indices_24, %cst_16, %cst_17, %cst_18) {begin_mask = 1 : i32, ellipsis_mask = 0 : i32, end_mask = 1 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 2 : i32} : (tensor, tensor<2xi32>, tensor<2xi32>, tensor<2xi32>) -> tensor\r\n  %22 = \"tf.HashTableV2\"() {container = \"\", device = \"\", key_dtype = !tf.string, shared_name = \"hash_table_fc7c2e70-8a89-4115-84d4-2f713273e69c_load_0_198\", use_node_name_sharing = true, value_dtype = i64} : () -> tensor\r\n  %23 = \"tf.LookupTableFindV2\"(%22, %sparse_values#1, %cst_9) {device = \"\"} : (tensor, tensor, tensor) -> tensor<*xi64>\r\n  %24 = \"tfl.strided_slice\"(%1, %cst_15, %cst_21, %cst_21) {begin_mask = 0 : i32, ellipsis_mask = 0 : i32, end_mask = 0 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 1 : i32} : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor\r\n  %25 = \"tfl.pack\"(%24, %cst_8) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi32>\r\n  %26 = \"tfl.cast\"(%25) : (tensor<2xi32>) -> tensor<2xi64>\r\n  %output_indices_25, %output_shape_26 = \"tf.SparseReshape\"(%sparse_indices#1, %sparse_shapes#1, %26) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n  %27 = \"tfl.cast\"(%output_shape_26) : (tensor<2xi64>) -> tensor<2xi32>\r\n  %28 = \"tfl.gather\"(%output_shape_26, %cst_12) {axis = 0 : i32} : (tensor<2xi64>, tensor) -> tensor\r\n  %29 = \"tfl.greater_equal\"(%23, %cst_13) : (tensor<*xi64>, tensor) -> tensor<*xi1>\r\n  %30 = \"tfl.where\"(%29) : (tensor<*xi1>) -> tensor\r\n  %31 = \"tfl.reshape\"(%30, %cst_11) : (tensor, tensor<1xi32>) -> tensor\r\n  %32 = \"tfl.gather\"(%23, %31) {axis = 0 : i32} : (tensor<*xi64>, tensor) -> tensor<*xi64>\r\n  %33 = \"tfl.slice\"(%output_shape_26, %cst_15, %cst_21) : (tensor<2xi64>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi64>\r\n  %34 = \"tfl.reduce_prod\"(%33, %cst_15) {keep_dims = false} : (tensor<1xi64>, tensor<1xi32>) -> tensor\r\n  %35 = \"tfl.pack\"(%34, %28) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi64>\r\n  %output_indices_27, %output_shape_28 = \"tf.SparseReshape\"(%output_indices_25, %output_shape_26, %35) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n  %36 = \"tfl.gather\"(%output_indices_27, %31) {axis = 0 : i32} : (tensor, tensor) -> tensor\r\n  %37 = \"tfl.slice\"(%27, %cst_15, %cst_21) : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>\r\n  %output_indices_29, %output_values_30, %empty_row_indicator_31, %reverse_index_map_32 = \"tf.SparseFillEmptyRows\"(%36, %32, %output_shape_28, %cst_13) {device = \"\"} : (tensor, tensor<*xi64>, tensor<2xi64>, tensor) -> (tensor, tensor, tensor, tensor)\r\n  %38 = \"tfl.reshape\"(%empty_row_indicator_31, %cst_10) : (tensor, tensor<2xi32>) -> tensor\r\n  %output_33, %idx_34 = \"tfl.unique\"(%output_values_30) : (tensor) -> (tensor, tensor)\r\n  %39 = \"tfl.strided_slice\"(%output_indices_29, %cst_16, %cst_17, %cst_18) {begin_mask = 1 : i32, ellipsis_mask = 0 : i32, end_mask = 1 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 2 : i32} : (tensor, tensor<2xi32>, tensor<2xi32>, tensor<2xi32>) -> tensor\r\n  %40 = \"tf.HashTableV2\"() {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_b60d3bcd-14f8-4085-a3b2-85948ec09373_load_0_199\", use_node_name_sharing = true, value_dtype = i64} : () -> tensor\r\n  %41 = \"tf.LookupTableFindV2\"(%40, %sparse_values#3, %cst_9) {device = \"\"} : (tensor, tensor, tensor) -> tensor<*xi64>\r\n  %42 = \"tfl.strided_slice\"(%2, %cst_15, %cst_21, %cst_21) {begin_mask = 0 : i32, ellipsis_mask = 0 : i32, end_mask = 0 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 1 : i32} : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor\r\n  %43 = \"tfl.pack\"(%42, %cst_8) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi32>\r\n  %44 = \"tfl.cast\"(%43) : (tensor<2xi32>) -> tensor<2xi64>\r\n  %output_indices_35, %output_shape_36 = \"tf.SparseReshape\"(%sparse_indices#3, %sparse_shapes#3, %44) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n  %45 = \"tfl.cast\"(%output_shape_36) : (tensor<2xi64>) -> tensor<2xi32>\r\n  %46 = \"tfl.gather\"(%output_shape_36, %cst_12) {axis = 0 : i32} : (tensor<2xi64>, tensor) -> tensor\r\n  %47 = \"tfl.greater_equal\"(%41, %cst_13) : (tensor<*xi64>, tensor) -> tensor<*xi1>\r\n  %48 = \"tfl.where\"(%47) : (tensor<*xi1>) -> tensor\r\n  %49 = \"tfl.reshape\"(%48, %cst_11) : (tensor, tensor<1xi32>) -> tensor\r\n  %50 = \"tfl.gather\"(%41, %49) {axis = 0 : i32} : (tensor<*xi64>, tensor) -> tensor<*xi64>\r\n  %51 = \"tfl.slice\"(%output_shape_36, %cst_15, %cst_21) : (tensor<2xi64>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi64>\r\n  %52 = \"tfl.reduce_prod\"(%51, %cst_15) {keep_dims = false} : (tensor<1xi64>, tensor<1xi32>) -> tensor\r\n  %53 = \"tfl.pack\"(%52, %46) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi64>\r\n  %output_indices_37, %output_shape_38 = \"tf.SparseReshape\"(%output_indices_35, %output_shape_36, %53) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n  %54 = \"tfl.gather\"(%output_indices_37, %49) {axis = 0 : i32} : (tensor, tensor) -> tensor\r\n  %55 = \"tfl.slice\"(%45, %cst_15, %cst_21) : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>\r\n  %output_indices_39, %output_values_40, %empty_row_indicator_41, %reverse_index_map_42 = \"tf.SparseFillEmptyRows\"(%54, %50, %output_shape_38, %cst_13) {device = \"\"} : (tensor, tensor<*xi64>, tensor<2xi64>, tensor) -> (tensor, tensor, tensor, tensor)\r\n  %56 = \"tfl.reshape\"(%empty_row_indicator_41, %cst_10) : (tensor, tensor<2xi32>) -> tensor\r\n  %output_43, %idx_44 = \"tfl.unique\"(%output_values_40) : (tensor) -> (tensor, tensor)\r\n  %57 = \"tfl.strided_slice\"(%output_indices_39, %cst_16, %cst_17, %cst_18) {begin_mask = 1 : i32, ellipsis_mask = 0 : i32, end_mask = 1 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 2 : i32} : (tensor, tensor<2xi32>, tensor<2xi32>, tensor<2xi32>) -> tensor\r\n  %58 = \"tf.HashTableV2\"() {container = \"\", device = \"\", key_dtype = i64, shared_name = \"hash_table_cb0918fe-8c8e-41f5-9aad-3750ec00bdad_load_0_200\", use_node_name_sharing = true, value_dtype = i64} : () -> tensor\r\n  %59 = \"tf.LookupTableFindV2\"(%58, %sparse_values#4, %cst_9) {device = \"\"} : (tensor, tensor, tensor) -> tensor<*xi64>\r\n  %60 = \"tfl.strided_slice\"(%3, %cst_15, %cst_21, %cst_21) {begin_mask = 0 : i32, ellipsis_mask = 0 : i32, end_mask = 0 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 1 : i32} : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor\r\n  %61 = \"tfl.pack\"(%60, %cst_8) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi32>\r\n  %62 = \"tfl.cast\"(%61) : (tensor<2xi32>) -> tensor<2xi64>\r\n  %output_indices_45, %output_shape_46 = \"tf.SparseReshape\"(%sparse_indices#4, %sparse_shapes#4, %62) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n  %63 = \"tfl.cast\"(%output_shape_46) : (tensor<2xi64>) -> tensor<2xi32>\r\n  %64 = \"tfl.gather\"(%output_shape_46, %cst_12) {axis = 0 : i32} : (tensor<2xi64>, tensor) -> tensor\r\n  %65 = \"tfl.greater_equal\"(%59, %cst_13) : (tensor<*xi64>, tensor) -> tensor<*xi1>\r\n  %66 = \"tfl.where\"(%65) : (tensor<*xi1>) -> tensor\r\n  %67 = \"tfl.reshape\"(%66, %cst_11) : (tensor, tensor<1xi32>) -> tensor\r\n  %68 = \"tfl.gather\"(%59, %67) {axis = 0 : i32} : (tensor<*xi64>, tensor) -> tensor<*xi64>\r\n  %69 = \"tfl.slice\"(%output_shape_46, %cst_15, %cst_21) : (tensor<2xi64>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi64>\r\n  %70 = \"tfl.reduce_prod\"(%69, %cst_15) {keep_dims = false} : (tensor<1xi64>, tensor<1xi32>) -> tensor\r\n  %71 = \"tfl.pack\"(%70, %64) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi64>\r\n  %output_indices_47, %output_shape_48 = \"tf.SparseReshape\"(%output_indices_45, %output_shape_46, %71) {device = \"\"} : (tensor, tensor<2xi64>, tensor<2xi64>) -> (tensor, tensor<2xi64>)\r\n  %72 = \"tfl.gather\"(%output_indices_47, %67) {axis = 0 : i32} : (tensor, tensor) -> tensor\r\n  %73 = \"tfl.slice\"(%63, %cst_15, %cst_21) : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>\r\n  %output_indices_49, %output_values_50, %empty_row_indicator_51, %reverse_index_map_52 = \"tf.SparseFillEmptyRows\"(%72, %68, %output_shape_48, %cst_13) {device = \"\"} : (tensor, tensor<*xi64>, tensor<2xi64>, tensor) -> (tensor, tensor, tensor, tensor)\r\n  %74 = \"tfl.reshape\"(%empty_row_indicator_51, %cst_10) : (tensor, tensor<2xi32>) -> tensor\r\n  %output_53, %idx_54 = \"tfl.unique\"(%output_values_50) : (tensor) -> (tensor, tensor)\r\n  %75 = \"tfl.strided_slice\"(%output_indices_49, %cst_16, %cst_17, %cst_18) {begin_mask = 1 : i32, ellipsis_mask = 0 : i32, end_mask = 1 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 2 : i32} : (tensor, tensor<2xi32>, tensor<2xi32>, tensor<2xi32>) -> tensor\r\n  %76 = \"tfl.gather\"(%cst_2, %output) {axis = 0 : i32} : (tensor<7x1xf32>, tensor) -> tensor\r\n  %77 = \"tfl.custom_tf\"(%76, %idx, %21) ( {\r\n    %127 = \"tf.SparseSegmentSum\"(%76, %idx, %21) {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"} : (tensor, tensor, tensor) -> tensor\r\n    \"tfl.yield\"(%127) : (tensor) -> ()\r\n  }) : (tensor, tensor, tensor) -> tensor\r\n  %78 = \"tfl.shape\"(%77) : (tensor) -> tensor<2xi32>\r\n  %79 = \"tfl.strided_slice\"(%78, %cst_21, %cst_20, %cst_21) {begin_mask = 0 : i32, ellipsis_mask = 0 : i32, end_mask = 0 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 1 : i32} : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor\r\n  %80 = \"tfl.pack\"(%cst_12, %79) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi32>\r\n  %81 = \"tfl.tile\"(%20, %80) : (tensor, tensor<2xi32>) -> tensor\r\n  %82 = \"tfl.zeros_like\"(%77) : (tensor) -> tensor\r\n  %83 = \"tfl.select\"(%81, %82, %77) : (tensor, tensor, tensor) -> tensor\r\n  %84 = \"tfl.shape\"(%83) : (tensor) -> tensor<2xi32>\r\n  %85 = \"tfl.slice\"(%84, %cst_21, %cst_11) : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>\r\n  %86 = \"tfl.concatenation\"(%19, %85) {axis = 0 : i32, fused_activation_function = \"NONE\"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<2xi32>\r\n  %87 = \"tfl.reshape\"(%83, %86) : (tensor, tensor<2xi32>) -> tensor\r\n  %88 = \"tfl.gather\"(%cst_1, %output_33) {axis = 0 : i32} : (tensor<6203x1xf32>, tensor) -> tensor\r\n  %89 = \"tfl.custom_tf\"(%88, %idx_34, %39) ( {\r\n    %127 = \"tf.SparseSegmentSum\"(%88, %idx_34, %39) {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"} : (tensor, tensor, tensor) -> tensor\r\n    \"tfl.yield\"(%127) : (tensor) -> ()\r\n  }) : (tensor, tensor, tensor) -> tensor\r\n  %90 = \"tfl.shape\"(%89) : (tensor) -> tensor<2xi32>\r\n  %91 = \"tfl.strided_slice\"(%90, %cst_21, %cst_20, %cst_21) {begin_mask = 0 : i32, ellipsis_mask = 0 : i32, end_mask = 0 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 1 : i32} : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor\r\n  %92 = \"tfl.pack\"(%cst_12, %91) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi32>\r\n  %93 = \"tfl.tile\"(%38, %92) : (tensor, tensor<2xi32>) -> tensor\r\n  %94 = \"tfl.zeros_like\"(%89) : (tensor) -> tensor\r\n  %95 = \"tfl.select\"(%93, %94, %89) : (tensor, tensor, tensor) -> tensor\r\n  %96 = \"tfl.shape\"(%95) : (tensor) -> tensor<2xi32>\r\n  %97 = \"tfl.slice\"(%96, %cst_21, %cst_11) : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>\r\n  %98 = \"tfl.concatenation\"(%37, %97) {axis = 0 : i32, fused_activation_function = \"NONE\"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<2xi32>\r\n  %99 = \"tfl.reshape\"(%95, %98) : (tensor, tensor<2xi32>) -> tensor\r\n  %100 = \"tfl.gather\"(%cst_0, %output_43) {axis = 0 : i32} : (tensor<2x1xf32>, tensor) -> tensor\r\n  %101 = \"tfl.custom_tf\"(%100, %idx_44, %57) ( {\r\n    %127 = \"tf.SparseSegmentSum\"(%100, %idx_44, %57) {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"} : (tensor, tensor, tensor) -> tensor\r\n    \"tfl.yield\"(%127) : (tensor) -> ()\r\n  }) : (tensor, tensor, tensor) -> tensor\r\n  %102 = \"tfl.shape\"(%101) : (tensor) -> tensor<2xi32>\r\n  %103 = \"tfl.strided_slice\"(%102, %cst_21, %cst_20, %cst_21) {begin_mask = 0 : i32, ellipsis_mask = 0 : i32, end_mask = 0 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 1 : i32} : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor\r\n  %104 = \"tfl.pack\"(%cst_12, %103) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi32>\r\n  %105 = \"tfl.tile\"(%56, %104) : (tensor, tensor<2xi32>) -> tensor\r\n  %106 = \"tfl.zeros_like\"(%101) : (tensor) -> tensor\r\n  %107 = \"tfl.select\"(%105, %106, %101) : (tensor, tensor, tensor) -> tensor\r\n  %108 = \"tfl.shape\"(%107) : (tensor) -> tensor<2xi32>\r\n  %109 = \"tfl.slice\"(%108, %cst_21, %cst_11) : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>\r\n  %110 = \"tfl.concatenation\"(%55, %109) {axis = 0 : i32, fused_activation_function = \"NONE\"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<2xi32>\r\n  %111 = \"tfl.reshape\"(%107, %110) : (tensor, tensor<2xi32>) -> tensor\r\n  %112 = \"tfl.fully_connected\"(%dense_values#3, %cst_14, %cst_19) {fused_activation_function = \"NONE\", keep_num_dims = false, weights_format = \"DEFAULT\"} : (tensor, tensor<1x1xf32>, none) -> tensor\r\n  %113 = \"tfl.gather\"(%cst, %output_53) {axis = 0 : i32} : (tensor<80x1xf32>, tensor) -> tensor\r\n  %114 = \"tfl.custom_tf\"(%113, %idx_54, %75) ( {\r\n    %127 = \"tf.SparseSegmentSum\"(%113, %idx_54, %75) {T = f32, Tidx = i32, Tsegmentids = i64, device = \"\"} : (tensor, tensor, tensor) -> tensor\r\n    \"tfl.yield\"(%127) : (tensor) -> ()\r\n  }) : (tensor, tensor, tensor) -> tensor\r\n  %115 = \"tfl.shape\"(%114) : (tensor) -> tensor<2xi32>\r\n  %116 = \"tfl.strided_slice\"(%115, %cst_21, %cst_20, %cst_21) {begin_mask = 0 : i32, ellipsis_mask = 0 : i32, end_mask = 0 : i32, new_axis_mask = 0 : i32, shrink_axis_mask = 1 : i32} : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor\r\n  %117 = \"tfl.pack\"(%cst_12, %116) {axis = 0 : i32, values_count = 2 : i32} : (tensor, tensor) -> tensor<2xi32>\r\n  %118 = \"tfl.tile\"(%74, %117) : (tensor, tensor<2xi32>) -> tensor\r\n  %119 = \"tfl.zeros_like\"(%114) : (tensor) -> tensor\r\n  %120 = \"tfl.select\"(%118, %119, %114) : (tensor, tensor, tensor) -> tensor\r\n  %121 = \"tfl.shape\"(%120) : (tensor) -> tensor<2xi32>\r\n  %122 = \"tfl.slice\"(%121, %cst_21, %cst_11) : (tensor<2xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>\r\n  %123 = \"tfl.concatenation\"(%73, %122) {axis = 0 : i32, fused_activation_function = \"NONE\"} : (tensor<1xi32>, tensor<1xi32>) -> tensor<2xi32>\r\n  %124 = \"tfl.reshape\"(%120, %123) : (tensor, tensor<2xi32>) -> tensor\r\n  %125 = \"tfl.add_n\"(%87, %99, %111, %112, %124) : (tensor, tensor, tensor, tensor, tensor) -> tensor\r\n  %126 = \"tfl.add\"(%125, %cst_3) {fused_activation_function = \"NONE\"} : (tensor, tensor<1xf32>) -> tensor\r\n  \"std.return\"(%126) : (tensor) -> ()\r\n}) {arg0 = {tf_saved_model.index_path = [\"examples\"]}, result0 = {tf_saved_model.index_path = [\"predictions\"]}, sym_name = \"main\", tf.entry_function = {control_outputs = \"\", inputs = \"serving_default_examples:0\", outputs = \"StatefulPartitionedCall_1:0\"}, tf_saved_model.exported_names = [\"serving_default\"], type = (tensor) -> tensor} : () -> ()\r\n```\r\n\r\n**Also, please include a link to the saved model or GraphDef**\r\n\r\n```\r\n[model.zip](https://github.com/tensorflow/tensorflow/files/5120025/model.zip)\r\n```\r\n\r\n**Failure details**\r\nIf the conversion is successful, but the generated model is wrong,\r\nstate what is wrong:\r\n- Producing wrong results and/or decrease in accuracy\r\n- Producing correct results, but the model is slower than expected (model generated from old converter)\r\n\r\n\r\n**RNN conversion support**\r\nIf converting TF RNN to TFLite fused RNN ops, please prefix [RNN] in the title.\r\n\r\n**Any other info / logs**\r\n\r\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.\r\n", "comments": ["@NiBurhe \r\nCan you please refer to [this link](https://github.com/tensorflow/tensorflow/issues/34350#issuecomment-579027135) with same error and let us know.", "Hi @Saduf2019 ,\r\n\r\nI now tried it with\r\n\r\n`converter.experimental_new_converter = True\r\nconverter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS,\r\n                                       tf.lite.OpsSet.SELECT_TF_OPS]`\r\n\r\nand now the tf.HashTableV2 and tf.LookupTableFindV2 are not supported, Full log see \r\n[tflite.log](https://github.com/tensorflow/tensorflow/files/5137556/tflite.log)\r\n\r\nIs there a way to get it running? I have no idea how to implement that function on my own.\r\n\r\nThanks & Regards,\r\nNiBurhe\r\n\r\n\r\n", "I can reproduce the issue. [Here](https://colab.research.google.com/gist/jvishnuvardhan/269f579b3a0ff1101741ef46a5ab80fe/untitled.ipynb) is the gist for our reference. Thanks!", "Team is working on e2e hash table support. I will update this thread once the feature is landed.", "Any update on 'tf.LookupTableFindV2' support?", "Was able to reproduce your issue in Tf Nightly 2.6.0-dev20210526, please find the gist [here](https://colab.research.google.com/gist/sachinprasadhs/26e6935549ab8bb0b235d0d45c8426d8/42636.ipynb). Thanks!", "Hash table is now supported through the builtin op set and saved model converter.", "Are you satisfied with the resolution of your issue?\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42636\">Yes</a>\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42636\">No</a>\n"]}, {"number": 42635, "title": "Fix implicit conversion for hello_world on Sparkfun Edge", "body": "Fixes #42517\r\n\r\nManually tested that the following command succeeds with this change:\r\n```\r\nmake -f tensorflow/lite/micro/tools/make/Makefile TARGET=sparkfun_edge hello_world_bin -j8\r\n```", "comments": []}, {"number": 42634, "title": "Fix #41630: include max_seq_length in cudnn descriptor cache key", "body": "", "comments": ["@goldiegadde @mihaimaruseac Here is a PR against r1.15 :)", "Thanks @mihaimaruseac, so I see 1.15.4 finally made it yesterday, that's great news. However, it is not pushed to Docker Hub: https://hub.docker.com/r/tensorflow/tensorflow/tags?page=1&name=1.15.\r\n\r\nWe have a training docker image that depends on your upstream Docker Hub images, so the lack of 1.15.4 release there is kinda problematic. I'm going to file a new issue for that."]}, {"number": 42633, "title": "Fix the documentation of unique_indices in EmitScatter.", "body": "The documentation was erroneously pointing to the case `unique_indices = False` as being potentially unsafe.\r\nThis fixes that mistake, and reformulates the last two sentences so as to be somewhat clearer.", "comments": []}, {"number": 42632, "title": "error when installing for go from source.", "body": "<em>Please make sure that this is a build/installation issue. As per our [GitHub Policy](https://github.com/tensorflow/tensorflow/blob/master/ISSUES.md), we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:build_template</em>\r\n\r\n**System information**\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04):\r\nLinux Debian 10\r\n- Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\r\nN/A\r\n- TensorFlow installed from (source or binary):\r\nsource\r\n- TensorFlow version:\r\ncommit 2d0592a000989c28e94dbc6efabe6c3be54762e1\r\n- Python version:\r\nPython 3.7.3\r\n- Installed using virtualenv? pip? conda?:\r\ncomiled from source, following [this](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/go/README.md)\r\n- Bazel version (if compiling from source):\r\nbazel 3.1.0\r\n- GCC/Compiler version (if compiling from source):\r\ngcc (Debian 8.3.0-6) 8.3.0\r\n- CUDA/cuDNN version:\r\nno idea\r\n- GPU model and memory:\r\n\r\n\r\n\r\n**Describe the problem**\r\non step 4 of the instructions (`go generate github.com/tensorflow/tensorflow/tensorflow/go/op`) I got:\r\n```\r\ngoogle/protobuf/any.proto: File not found.\r\ngoogle/protobuf/duration.proto: File not found.\r\ntensorflow/core/protobuf/autotuning.proto:10:1: Import \"google/protobuf/any.proto\" was not found or had errors.\r\ntensorflow/core/protobuf/autotuning.proto:11:1: Import \"google/protobuf/duration.proto\" was not found or had errors.\r\ntensorflow/core/protobuf/autotuning.proto:61:3: \"google.protobuf.Duration\" is not defined.\r\ntensorflow/core/protobuf/autotuning.proto:74:3: \"google.protobuf.Any\" is not defined.\r\n../genop/generate.go:19: running \"bash\": exit status 1\r\nop/generate.go:17: running \"go\": exit status 1\r\n```\r\n**Provide the exact sequence of commands / steps that you executed before running into the problem**\r\n```\r\ngo get -d github.com/tensorflow/tensorflow/tensorflow/go\r\n\r\ncd ${GOPATH}/src/github.com/tensorflow/tensorflow\r\n./configure\r\nbazel build -c opt //tensorflow:libtensorflow.so\r\n\r\nsudo cp ${GOPATH}/src/github.com/tensorflow/tensorflow/bazel-bin/tensorflow/libtensorflow.so /usr/local/lib\r\nsudo cp ${GOPATH}/src/github.com/tensorflow/tensorflow/bazel-bin/tensorflow/libtensorflow_framework.so.2 /usr/local/lib/libtensorflow_framework.so\r\n\r\ngo generate github.com/tensorflow/tensorflow/tensorflow/go/op\r\n```\r\n\r\n**Any other info / logs**\r\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.\r\n", "comments": ["@lolbinarycat \r\nCan you try \"go get github.com/tensorflow/tensorflow/tensorflow/go\" and let us know, please refer to: [link](https://github.com/tensorflow/tensorflow/issues/23681)\r\n#34580 [link](https://stackoverflow.com/questions/60631279/not-able-to-get-tensorflow-go ) [link](https://github.com/tensorflow/tensorflow/issues/13765) #3437", "```\r\ncannot find package \"github.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto\" in any of:\r\n        /usr/lib/go-1.15/src/github.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto (from $GOROOT)\r\n        /home/binarycat/go/src/github.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto (from $GOPATH)\r\n```\r\n", "@lolbinarycat \r\nCan you please refer to this issue and let us know if it helps. #42657", "> @lolbinarycat\r\n> Can you please refer to this issue and let us know if it helps. #42657\r\n\r\nI was reading through it, but It's hard to follow along as running a single `bazel` command takes around a day, and it makes my computer slow. If there are any steps I should take in particular let me know, but I didn't see anything that looked super helpful.", "let me tell you the steps I took to resolve this:\r\n1. Install TensorFlow C based on the instructions given in this website: ->          https://www.tensorflow.org/install/lang_c\r\n2. Once tensorflow C is installed, install go:\r\n            go get -v github.com/tensorflow/tensorflow/tensorflow/go\r\n3. If it succeeds by this step, then grats. if not run this command:\r\n            cd $GOPATH/src/github.com/tensorflow/tensorflow/tensorflow/go\r\n            git checkout tags/v2.1.0\r\n4. Test your build with \r\n            go test github.com/tensorflow/tensorflow/tensorflow/go\r\n    if the test produce this line \"ok github.com/tensorflow/tensorflow/tensorflow/go 0.152s\" at the end, then you are good to go. At least it did for me. Good luck ", "Thanks! I'll try that when I have the time.", "@lolbinarycat,\r\n\r\nHave you tried installing as per the suggestions from @nyeinsoe26 ? Please try installing the latest stable version and use this [guide](https://github.com/tensorflow/build/tree/master/golang_install_guide) as a reference. Let us know if you face any problems while following the same. Thanks!", "This issue has been automatically marked as stale because it has no recent activity. It will be closed if no further activity occurs. Thank you.\n", "Closing as stale. Please reopen if you'd like to work on this further.\n", "Are you satisfied with the resolution of your issue?\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42632\">Yes</a>\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42632\">No</a>\n"]}, {"number": 42631, "title": "Embedding layer doesn't follow mixed_precision policy by default", "body": "<em>Please make sure that this is a bug. As per our\r\n[GitHub Policy](https://github.com/tensorflow/tensorflow/blob/master/ISSUES.md),\r\nwe only address code/doc bugs, performance issues, feature requests and\r\nbuild/installation issues on GitHub. tag:bug_template</em>\r\n\r\n**System information**\r\n- Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 Pro 1909 OS build 18363.1016\r\n- TensorFlow installed from (source or binary): binary\r\n- TensorFlow version (use command below): 2.2.0\r\n- Python version: 3.6\r\n- CUDA/cuDNN version: N/A\r\n- GPU model and memory: N/A\r\n\r\n**Describe the current behavior**\r\nEmbedding layer's output is float32 despite mixed_bfloat16 policy\r\n\r\n**Describe the expected behavior**\r\nEmbedding layer's output should tie to mixed_bfloat16 policy\r\n\r\n**Standalone code to reproduce the issue**\r\n```\r\nimport tensorflow as tf\r\nfrom tensorflow.keras.mixed_precision import experimental as mixed_precision\r\npolicy = mixed_precision.Policy('mixed_bfloat16')\r\nmixed_precision.set_policy(policy)\r\ninputs = tf.keras.Input(shape=(100,), name='digits')\r\nemb = tf.keras.layers.Embedding(100, 100)\r\ndense = tf.keras.layers.Dense(100)\r\n\r\noutputs = emb(inputs) + dense(inputs) # <= the error is here (adding two different types)\r\n\r\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\r\nmodel.compile(loss='sparse_categorical_crossentropy',\r\n              optimizer=tf.keras.optimizers.Adam(),\r\n              metrics=['accuracy'])\r\ninput = tf.random.uniform(shape=[1,25], maxval=100, dtype=tf.int32)\r\nhist = model.fit(input, input, epochs=1, steps_per_epoch=1,verbose=0)\r\n\r\n```\r\n\r\n**Other info / logs** Include any logs or source code that would be helpful to\r\ndiagnose the problem. If including tracebacks, please include the full\r\ntraceback. Large logs and files should be attached.\r\n\r\n> ValueError: Tensor conversion requested dtype float32 for Tensor with dtype bfloat16: <tf.Tensor 'dense/Identity:0' shape=(None, 100) dtype=bfloat16>\r\n\r\n", "comments": ["Was able to reproduce the issue with TF v2.3 and TF-nightly. Please find the gist of it [here](https://colab.research.google.com/gist/amahendrakar/8bcbf72e06fa014e1a2b1970fd2bb2ef/42631.ipynb#scrollTo=sfr6zmv_ELEj). Thanks!", "@brand17 In` tf.keras.layers.Embedding()`, auto casting is set to false as shown [here](https://github.com/tensorflow/tensorflow/blob/b36436b087bd8e8701ef51718179037cccdfc26e/tensorflow/python/keras/layers/embeddings.py#L108) and that is the cause of the error. ", "Not clear for me - is it impossible to fix ? I don't understand - why casting embedding matrix to float16 before casting input to int32 might cause the int32 values to be different due to a loss of precision\r\n"]}]