[{"number": 54738, "title": "Refactor RNN classes such that V2 cells and layers no longer depend on V1 counterparts.", "body": "Refactor RNN classes such that V2 cells and layers no longer depend on V1 counterparts.\n\nV2 GRU and LSTM cells no longer extend their V1 counterpart; instead the inheritance is the other way around.\nV2 GRU and LSTM layers no longer extend their V1 counterpart; instead the common code was duplicated.\nV2 cell wrappers and legacy cell wrappers no longer have a complex hierarchy with multiple inheritance to share code; instead, the common code was duplicated.\nUnit tests for GRU and LSTM layers were reorganized so that all generic tests that work for both V1 and V2 are in `gru_test.py` and `lstm_test.py`. The only tests in `gru_v1_test.py` and `lstm_v1_test.py` are the ones that compare V1 and V2 for accuracy or performance, and V1 specific tests.\nAlso made cell wrappers API more consistent, all wrappers now expose a `wrapped_cell` property, not just `DropoutWrapper`.\n", "comments": []}, {"number": 54737, "title": "Rename sync versions of ToLiteral to ToLiteralSync to facilitate upcoming refactor.", "body": "Rename sync versions of ToLiteral to ToLiteralSync to facilitate upcoming refactor.\n", "comments": []}, {"number": 54736, "title": "Update KerasMetricTypeSpec to be compatible with Hierarchical TypeSpec", "body": "Update KerasMetricTypeSpec to be compatible with Hierarchical TypeSpec\n", "comments": []}, {"number": 54735, "title": "[XLA:LAYOUT_ASSIGNMENT] Remove additional references to send/recv channel", "body": "[XLA:LAYOUT_ASSIGNMENT] Remove additional references to send/recv channel\nconstraints.\n", "comments": []}, {"number": 54734, "title": "[tf.data] Add kernel implementation of `ParallelFilter` transformation.", "body": "[tf.data] Add kernel implementation of `ParallelFilter` transformation.\n", "comments": []}, {"number": 54733, "title": "Ensure that Interpreter methods that are documented as being experimental", "body": "Ensure that Interpreter methods that are documented as being experimental\nget defined in interpreter_experimental.cc rather than in interpreter.cc,\nso that they do not get included in the *_stable targets.  The aim is to\nensure you'll get a build error if you using an experimental API but depend\nonly on the stable targets.\n\nIn particular:\n\n  - Move all definitions of public experimental methods from\n    interpreter.cc to interpreter_experimental.cc.\n\n  - In cases where a public experimental method, e.g. Foo, was also used\n    by the implementation of other stable method(s), add a private\n    non-experimental method, e.g. FooImpl, defined in interpreter.cc,\n    and implement the public experimental method and the other stable\n    methods using that new private non-experimental method (FooImpl).\n", "comments": []}, {"number": 54732, "title": "Add APIs to return the memory type, for Allocator/SubAllocator/Tensor/TensorBuffer.", "body": "Add APIs to return the memory type, for Allocator/SubAllocator/Tensor/TensorBuffer.\n\nBy default, the type is kUnknown if a sub-class of the Allocator/SubAllocator does not specify it.\n\nThis is to prepare for staging data on pinned memory during transfer for GPU:\n- Introduce a method to Allocator to determine which type of memory is allocated by the allocator, e.g., gpu host allocator uses BFC allocator, which uses DeviceHostAllocator as its sub allocator, and DeviceHostAllocator allocates pinned memory;\n- Tensor can retrieve the memory type from its TensorBuffer if the buffer contains the allocator info;\n- During tensor transfer, we check wether the cpu tensor buffer is using pageable memory; if yes, allocate pinned memory of the same size for staging.\n", "comments": []}, {"number": 54731, "title": "Do not drop error messages from the quantize model API", "body": "Do not drop error messages from the quantize model API\n", "comments": []}, {"number": 54730, "title": "Add a unit test for the deadlock issue in LocalRendezvous destruction", "body": "Add a unit test for the deadlock issue in LocalRendezvous destruction\n", "comments": []}, {"number": 54729, "title": "Add an option in memory space assignment to enable/disable while-loop redundant eviction eliminiation optimization", "body": "Add an option in memory space assignment to enable/disable while-loop redundant eviction eliminiation optimization\n", "comments": []}, {"number": 54728, "title": "Add internal visibility allow list", "body": "Add internal visibility allow list\n", "comments": []}, {"number": 54727, "title": "Specify memory types for some majoy allocators.", "body": "Specify memory types for some majoy allocators.\n", "comments": []}, {"number": 54726, "title": "[XNNPACK] Support CONCATENATION operator with 2 inputs", "body": "[XNNPACK] Support CONCATENATION operator with 2 inputs\n", "comments": []}, {"number": 54725, "title": "Update RaggedTensor._to_components to add shape information to RaggedTensor.", "body": "Update RaggedTensor._to_components to add shape information to RaggedTensor.\n\nWhen a RaggedTensor is returned from tf.py_function in graph mode, its shape information is unknown and should be recovered from RaggedTensorSpec.\n", "comments": []}, {"number": 54724, "title": "Stage data on gpu pinned memory during transfer", "body": "Stage data on gpu pinned memory during transfer\n", "comments": []}, {"number": 54723, "title": "Document the InterpreterOptions class and the InterpreterOptions", "body": "Document the InterpreterOptions class and the InterpreterOptions\nparameter to InterpreterBuilder as being experimental.\n\nRationale: All the methods of InterpreterOptions are already experimental,\nso there's currently nothing that you can usefully do with this\nclass without using experimental features. Hence I think it is best to\nalso make the class itself experimental, and likewise for its use in\nInterpreterBuilder, to preserve implementation flexibility for TF Lite.\n", "comments": []}, {"number": 54722, "title": "Pack BF16 values and element indices together into single 32-bit values to", "body": "Pack BF16 values and element indices together into single 32-bit values to\nimprove top-k speed on TPUs.\n", "comments": []}, {"number": 54721, "title": "Adding more infeed/outfeed tests to the bef_thunk_tests and bef_executable_tests test_suite(s).", "body": "Adding more infeed/outfeed tests to the bef_thunk_tests and bef_executable_tests test_suite(s).\n", "comments": []}, {"number": 54720, "title": "Go: Update generated wrapper functions for TensorFlow ops.", "body": "Go: Update generated wrapper functions for TensorFlow ops.\n", "comments": []}, {"number": 54719, "title": "Remove unused ctx argument.", "body": "Remove unused ctx argument.\n", "comments": ["@gbaned Are we going to have still these usability issues in the TF repo;  https://github.com/keras-team/keras/pull/15006#issuecomment-888537797 ?", "@mpcallanan Can you see my previous comment internally?", "@bhack Hey, sorry, I just joined TF and I'm still learning this github integration (and am mortified that my placeholder text was apparently public!).  I did not see either comment internally.  I only saw your second comment, only from a Github email.\r\n"]}, {"number": 54718, "title": "Implementation of new algorithm of merge control flow pass", "body": "Implementation of new algorithm of merge control flow pass\n\nIn this algorithm, side_effect_analysis will only be called once instead of multiple times comparing to old implementation. Therefore, the performance regarding the runtime of the pass can be improved. The next step is to enable the pass by default.\n", "comments": []}, {"number": 54717, "title": "Fix failed test cases for the ragged tensor issue with py_function.", "body": "Fix failed test cases for the ragged tensor issue with py_function.\n\nFUTURE_COPYBARA_INTEGRATE_REVIEW=https://github.com/tensorflow/tensorflow/pull/54521 from PatriceVignola:add-inplace-device-default-registration 2e5af637d89b180031100530cdbd9b3ef34ec176\n", "comments": []}, {"number": 54716, "title": "Enable TF python tests with TFRT session", "body": "Enable TF python tests with TFRT session\n", "comments": []}, {"number": 54715, "title": "PR #54503: Add appropriate encoding check for `tf.compat.as_bytes`/`as_text`", "body": "PR #54503: Add appropriate encoding check for `tf.compat.as_bytes`/`as_text`\n\nImported from GitHub PR https://github.com/tensorflow/tensorflow/pull/54503\n\nThis PR tries to address the issue raised in #54413 where\nthere were no encoding check for tf.compat.as_bytes/as_text.\nAs a result, invalid encoding input will silently\nreturn incorrect result, e.g.:\n```\nbytes_or_text = \"hello\"\nt1 = tf.compat.as_text(bytes_or_text, encoding=\"valid\")\nprint(t1) # hello\n```\n\nThis PR looks up python encoding to make sure it is valid.\n\nThis PR fixes #54413.\n\nSigned-off-by: Yong Tang <yong.tang.github@outlook.com>\nCopybara import of the project:\n\n--\n8e3b32d37ce22c07c21f508b2835456f3ca97531 by Yong Tang <yong.tang.github@outlook.com>:\n\nAdd appropriate encoding check for tf.compat.as_bytes/as_text\n\nThis PR tries to address the issue raised in 54413 where\nthere were no encoding check for tf.compat.as_bytes/as_text.\nAs a result, invalid encoding input will silently\nreturn incorrect result, e.g.:\n```\nbytes_or_text = \"hello\"\nt1 = tf.compat.as_text(bytes_or_text, encoding=\"valid\")\nprint(t1) # hello\n```\n\nThis PR looks up python encoding to make sure it is valid.\n\nThis PR fixes 54413.\n\nSigned-off-by: Yong Tang <yong.tang.github@outlook.com>\n\n--\n6099ca6e0e75e9ba2f1f9c48ecacd0523a507f1a by Yong Tang <yong.tang.github@outlook.com>:\n\nAdd test case for tf.compat.as_bytes/as_text\n\nSigned-off-by: Yong Tang <yong.tang.github@outlook.com>\nFUTURE_COPYBARA_INTEGRATE_REVIEW=https://github.com/tensorflow/tensorflow/pull/54503 from yongtang:54413-tf.compat.as_bytes-encoding 6099ca6e0e75e9ba2f1f9c48ecacd0523a507f1a\n", "comments": []}, {"number": 54713, "title": "Switching over row_partitions and rank to rely on ragged_shape.", "body": "Switching over row_partitions and rank to rely on ragged_shape.\n", "comments": []}, {"number": 54712, "title": "Add no_oss tag to failing runtime_client_py_test.", "body": "Add no_oss tag to failing runtime_client_py_test.\n", "comments": []}, {"number": 54711, "title": "TFLite GPU: Fix input/output tensor handling for partitioned delegation.", "body": "TFLite GPU: Fix input/output tensor handling for partitioned delegation.\n", "comments": []}, {"number": 54710, "title": "Add additional methods for constructing DynamicRaggedShape.Spec.", "body": "Add additional methods for constructing DynamicRaggedShape.Spec.\nIn particular, adding the ability to:\n* create a spec from a spec of a different type.\n* change the dtype of the spec.\n* truncate the spec.\n", "comments": []}, {"number": 54709, "title": "Export Adamax and fix some exporting issues.", "body": "Export Adamax and fix some exporting issues.\n\nPreviously the __init__py in optimizers/ folder does not include rmsprop, adamax and adamw, so they are not caught when updating golden. This CL fixes this issue.\n", "comments": []}, {"number": 54708, "title": "Fix invalid IRs with is_stateless = true attribute in merge_control_flow.mlir", "body": "Fix invalid IRs with is_stateless = true attribute in merge_control_flow.mlir\n", "comments": []}]