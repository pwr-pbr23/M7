[{"number": 9458, "title": "How np.array([]) works in numpy", "body": "my sample code :\r\n\r\n```\r\na = 2.0\r\nb = 3.0\r\nx = np.array([a, b])\r\nprint x\r\n```\r\n\r\nOutput : ` [ 2.  3.]`\r\n\r\nI just wanted to know , how this array is created here.  Basically how np.array works ?  Which constructor/function is invoking to generate this array ?\r\n\r\nI tried putting prints in `/numpy/numpy/lib/user_array.py` but that didn't help. ", "comments": ["Hi, did you try to ask this question on stackoverflow.com? If not, I suggest you to do that, because here is the issue tracking for the **TensorFlow** package.", "Closing this as unrelated. As @unnir suggests, this is more appropriate for Stack Overflow, most likely under the [numpy](http://stackoverflow.com/questions/tagged/numpy) tag."]}, {"number": 9457, "title": "Dennis", "body": "added instruction page and made UI look nicer. still working on the networking part.", "comments": ["Can one of the admins verify this patch?", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->", "umm the pull request was a mistake it was meant for a fork that my group\nhas. sorry\n\nOn Wed, Apr 26, 2017 at 4:43 AM, googlebot <notifications@github.com> wrote:\n\n> Thanks for your pull request. It looks like this may be your first\n> contribution to a Google open source project. Before we can look at your\n> pull request, you'll need to sign a Contributor License Agreement (CLA).\n>\n> \ud83d\udcdd *Please visit https://cla.developers.google.com/\n> <https://cla.developers.google.com/> to sign.*\n>\n> Once you've signed, please reply here (e.g. I signed it!) and we'll\n> verify. Thanks.\n> ------------------------------\n>\n>    - If you've already signed a CLA, it's possible we don't have your\n>    GitHub username or you're using a different email address. Check your\n>    existing CLA data <https://cla.developers.google.com/clas> and verify\n>    that your email is set on your git commits\n>    <https://help.github.com/articles/setting-your-email-in-git/>.\n>    - If you signed the CLA as a corporation, please let us know the\n>    company's name.\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tensorflow/tensorflow/pull/9457#issuecomment-297322150>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AZHpTJpnqK8znqyX-3Agi0H9fxZIy8loks5rzxG7gaJpZM4NInIl>\n> .\n>\n"]}, {"number": 9456, "title": "TFClassify taking too long to disply result", "body": "I am using tensorflow in android. I installed the apk for TFClassify available. I ran the application and it is running swiftly with inference time of not more than 400ms. However when I replaced the available trained model with my model, it is taking around 2000ms for computational before displaying the result. Why is there such a difference and how can I optimize my retrained_graph.pb? I have converted the retrained model to optimized & quantized graph.\r\n", "comments": ["This question is better asked on  [StackOverflow](http://stackoverflow.com/questions/tagged/tensorflow) since it is not a  bug or feature request. There is also a larger community that reads questions there. Thanks!"]}, {"number": 9455, "title": "Batch + dynamic_pad + squeeze + one_hot + dynamic_rnn throws shape error", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04.1 LTS (Xenial Xerus)\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: v1.1.0-rc2-259-g34c738c\r\n- **Bazel version (if compiling from source)**: 0.4.5\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Python version**: 3.5.2\r\n- **Exact command to reproduce**: `python ./bug.py`\r\n\r\n### Describe the problem\r\n\r\nA certain combination of ops causes `tf.nn.dynamic_rnn` to throw a `ValueError: Input size (depth of inputs) must be accessible via shape inference, but saw value None.` during compilation of the graph. I will attach the script to reproduce the issue and the required tfrecords file.\r\n\r\nThe problem seems to be a combination of batching with `dynamic_pad` enabled, and `squeeze` + `one_hot`. I use `squeeze` + `one_hot` because `SequenceExample` gives me a `[examples x time_steps x 1]` tensor, and `one_hot` adds another dimension, so I first need to get rid of the last dimension to get a `[examples x time_steps x 3]` one-hot encoded tensor.\r\n\r\nA few observations:\r\n\r\n- When excluding `availability_one_hot` from the `lstm_inputs` concat, the script runs ok.\r\n- When commenting out the `dynamic_rnn` op and evaluating `print(sess.run(tf.shape(lstm_inputs)))` instead, the output is `[2 8 4]`, which is the correct shape (1 normal feature + 3 from the one-hot encoding = 4 features)`.\r\n- I tried to recreate the batch with a `tf.constant()` literal, but using that the graph worked fine, so the batching with dynamic padding is needed to reproduce the issue. \r\n\r\n### Source code / logs\r\n\r\nScript + data file: [bug.zip](https://github.com/tensorflow/tensorflow/files/957645/bug.zip)\r\n\r\nOutput:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/ede/repos/xxx/xxx/misc/tftest/bug.py\", line 38, in <module>\r\n    inputs=lstm_inputs\r\n  File \"/home/ede/tensorflow/lib/python3.5/site-packages/tensorflow/python/ops/rnn.py\", line 582, in dynamic_rnn\r\n    dtype=dtype)\r\n  File \"/home/ede/tensorflow/lib/python3.5/site-packages/tensorflow/python/ops/rnn.py\", line 652, in _dynamic_rnn_loop\r\n    \"Input size (depth of inputs) must be accessible via shape inference,\"\r\nValueError: Input size (depth of inputs) must be accessible via shape inference, but saw value None.\r\n```", "comments": ["Okay, I figured out that the static shape information was lost at the `squeeze` op because I didn't specify an axis. Adding `axis=2` fixes it. I suppose this isn't so much of a bug but rather lack of understanding from my end. Will close this as the problem is resolved."]}, {"number": 9454, "title": "python tensorflow ImportError", "body": "The following is my code:\r\n\r\n#matplotlib inline\r\nimport matplotlib.pyplot as plt\r\nimport tensorflow as tf\r\nimport numpy as np\r\nfrom sklearn.metrics import confusion_matrix\r\n\r\ntf.__version__\r\nfrom tensorflow.examples.tutorials.mnist import input_data\r\ndata = input_data.read_data_sets(\"data/MNIST/\", one_hot=True)\r\n\r\nprint(\"Size of:\")\r\nprint(\"- Training-set:\\t\\t{}\".format(len(data.train.labels)))\r\nprint(\"- Test-set:\\t\\t{}\".format(len(data.test.labels)))\r\nprint(\"- Validation-set:\\t\\t\".format(len(data.validation.labels)))\r\n\r\ndata.test.labels[0:5, :]\r\ndata.test.cls = np.array([label.argmax() for label in data.test.labels])\r\ndata.test.cls[0:5]\r\n\r\n--------------------------------------------------------------------------------\r\n\r\nThe error in above code is:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:/Users/KumarRaja/Desktop/skywalker.py\", line 5, in <module>\r\n    from sklearn.metrics import confusion_matrix\r\n  File \"C:\\Users\\KumarRaja\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\sklearn\\__init__.py\", line 57, in <module>\r\n    from .base import clone\r\n  File \"C:\\Users\\KumarRaja\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\sklearn\\base.py\", line 10, in <module>\r\n    from scipy import sparse\r\n  File \"C:\\Users\\KumarRaja\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\scipy\\sparse\\__init__.py\", line 221, in <module>\r\n    from .csr import *\r\n  File \"C:\\Users\\KumarRaja\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\scipy\\sparse\\csr.py\", line 15, in <module>\r\n    from ._sparsetools import csr_tocsc, csr_tobsr, csr_count_blocks, \\\r\n  File \"C:\\Users\\KumarRaja\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\scipy\\sparse\\_sparsetools.py\", line 7, in <module>\r\n    __bootstrap__()\r\n  File \"C:\\Users\\KumarRaja\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\scipy\\sparse\\_sparsetools.py\", line 6, in __bootstrap__\r\n    imp.load_dynamic(__name__,__file__)\r\n  File \"C:\\Users\\KumarRaja\\AppData\\Local\\Programs\\Python\\Python35\\lib\\imp.py\", line 342, in load_dynamic\r\n    return _load(spec)\r\nImportError: DLL load failed: The specified module could not be found.\r\n\r\n---------------------------------------------------------------------------------------------------------------\r\nI hv installed the missing dll files in their respective location but the code isn't working after that also.Please help me with the above problem.\r\n\r\n", "comments": ["Please provide details about what platform you are using  (operating system, architecture). Also include your TensorFlow version. Also, did you compile from source or install a binary?  Make sure you also include the exact command if possible to produce  the output included in your test case. If you are unclear what to include  see the issue template displayed in  [the Github new issue template](https://github.com/tensorflow/tensorflow/issues/new).\r\n\r\n We ask for this in the issue submission template, because    it is really difficult to help without that information. Thanks!", "@Yoshiharo also, what specifically makes you thing it is a TensorFlow bug? \r\nI might be missing something but by the stack trace it seems related to scikit-learn. \r\nAre you sure you have the respective libraries installed? As you are on Windows, if you installed the unofficial scikit-learn binary you need Numpy+MKL too.", "@Adriano yeah previously the error was coming in sklearn module of python which I removed and now it is saying import error something related to dll's.\n\nThanks & Regards,\n\n\n\nRAJAT KUMAR\n\nTechnical Trainee\n\nFUJITSU CONSULTING INDIA\n Talwade, Pune\nOffice: +91-020-2769001\n\nMobile: + 91 9411292603\n\nEmail: Rajat.Kumar@in.fujitsu.com<mailto:Rajat.Kumar@in.fujitsu.com>\n\nShaping Tomorrow with You\n\n________________________________\nFrom: Adriano Carmezim <notifications@github.com>\nSent: Thursday, April 27, 2017 10:01 AM\nTo: tensorflow/tensorflow\nCc: Kumar, Rajat; Mention\nSubject: Re: [tensorflow/tensorflow] python tensorflow ImportError (#9454)\n\n\n@Yoshiharo<https://github.com/Yoshiharo> also, what specifically makes you thing it is a TensorFlow bug? I might be missing something but by the stack trace it seems related to scikit-learn\n\n-\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub<https://github.com/tensorflow/tensorflow/issues/9454#issuecomment-297608831>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AavOAnobKTDGmvseIFOiigOibVGzhc8zks5r0BozgaJpZM4NIcsu>.\n", "@Yoshiharo the suggestion remains as DLL errors may derive from the possibility I referred to previously, e.g. lack of required dependencies installed can generate this exact error, which is not related to TensorFlow in this case. By the way if you removed sci-kit learn it really shouldn't work.\r\n\r\nAlso as @girving oriented please provide the full information the Issue template requires, it assists in solving the problem more efficiently. Without all the information the support for your problem will be sub-optimal. \r\n", "Closing due to lack of recent activity. Please reopen if this is still an issue."]}, {"number": 9453, "title": " Tensorflow in Raspberry Pi -- Create kernel failed: Not found: No registered '_Arg' OpKernel", "body": "### System information\r\n-I have followed steps to install Tensorflow on Raspberry Pi 3 from the page \r\nhttps://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/makefile\r\n\r\nAfter installation I tried to run the example from this page \r\nhttps://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/pi_examples\r\n\r\n\r\n### Describe the problem\r\nWhile executing the command label_image, I got a number of errors which I am unable to find anywhere on stack overflow or google. The error that I get I have pasted below.\r\n\r\n### Source code / logs\r\npi@raspberrypi:~/tensorflow $ tensorflow/contrib/pi_examples/label_image/gen/bin/label_image \r\n\r\n2017-04-26 02:42:45.526198: I tensorflow/contrib/pi_examples/label_image/label_image.cc:145] Loaded JPEG: 512x600x3\r\n2017-04-26 02:42:46.861870: E tensorflow/core/framework/op_segment.cc:53] Create kernel failed: Not found: No registered '_Arg' OpKernel for CPU devices compatible with node _arg_Mul_0_0 = _Arg[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()\r\n\t.  Registered:  <no registered kernels>\r\n\r\n2017-04-26 02:42:46.862015: E tensorflow/core/common_runtime/executor.cc:644] Executor failed to create kernel. Not found: No registered '_Arg' OpKernel for CPU devices compatible with node _arg_Mul_0_0 = _Arg[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()\r\n\t.  Registered:  <no registered kernels>\r\n\r\n\t [[Node: _arg_Mul_0_0 = _Arg[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]\r\n2017-04-26 02:42:46.872857: E tensorflow/contrib/pi_examples/label_image/label_image.cc:376] Running model failed: Not found: No registered '_Arg' OpKernel for CPU devices compatible with node _arg_Mul_0_0 = _Arg[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()\r\n\t.  Registered:  <no registered kernels>\r\n\r\n\t [[Node: _arg_Mul_0_0 = _Arg[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]", "comments": ["I think I caused that in https://github.com/tensorflow/tensorflow/commit/858e0afcc45c39b6428bf82ab1444323e925cfd8. Just send out PR #9459 with a fix... if you get the change, can you try building with that change and see if it fixes the problem? Thanks!", "Which Makefile? Are you talking about this - tensorflow/contrib/pi_examples/label_image/Makefile. And where should I add this file?", "I added the \r\ntensorflow/core/kernels/function_ops.cc to tensorflow/contrib/makefile/tf_op_files.txt\r\n\r\nDo I need to run make again? With just this change when I run \"tensorflow/contrib/pi_examples/label_image/gen/bin/label_image\", I still get the same error.", "You would need to run `make` again, because the change adds a file containing the missing kernels to the build.\r\n\r\nIt looks like the PR was just merged, so can you try pulling from `master` and re-running `make`?", "The make worked and I was able to run the example with no other error. Thank you for responding and resolving this issue."]}, {"number": 9452, "title": "add support for flat both inner and outer dims", "body": "Hi,\r\n\r\nI'm trying to flat both the inner and outer dims and only keeps the middle ones but I didn't find any existing method in tensorflow that support this.  So I implement one. Hope this is helpful and can be merged into tensorflow.\r\n\r\nA brief changelog:\r\n\r\n1. add new method `flat_inner_outer_dims`\r\n2. change private method `ComputeFlatInnerDims` and `ComputeFlatOuterDims` to static member\r\n3. add tests for `flat_inner_outer_dims`", "comments": ["Can one of the admins verify this patch?", "@tensorflow-jenkins test this please.", "I will be traveling for the following week and will come back to continue on this after that.", "@tensorflow-jenkins test this please", "(Marking as stalled since the author is out for a few more days).", "everything should works well now", "@tensorflow-jenkins test this please", "@zasdfgbnm Thanks for the contribution!", "`ERROR: Couldn't find any revision to build. Verify the repository and branch configuration for this job.`\r\nWhat does this mean?", "@tensorflow-jenkins test this please", "@zasdfgbnm This appear to be an internal error in the test system, unrelated to your change. I think this is ready to merge.", "@tensorflow-jenkins test this please", "@yifeif @gunan do you know why the cmake keeps failing with \"ERROR: Couldn't find any revision to build. Verify the repository and branch configuration for this job.\"", "Updated the job, let's try again. @tensorflow-jenkins test this please.", "@yifeif it looks like another flaky test failed this time. I think it is safe to merge this."]}, {"number": 9451, "title": "typo: \"serialize\" -> \"serialized\"", "body": "", "comments": ["Can one of the admins verify this patch?", "@tensorflow-jenkins test this please"]}, {"number": 9450, "title": "Compute gradient inside tf.while_loop using TensorArray", "body": "I was trying to call opt.compute_gradients() inside the while_loop, but it failed with the error message:\r\n```\r\nAttributeError: 'WhileContext' object has no attribute 'pred'\r\n```\r\nI found a similiar problem in [stackoverflow](http://stackoverflow.com/questions/42313788/how-to-do-opt-compute-gradients-multiple-times-in-single-sess-run)\r\n\r\ntest code:\r\n```python\r\nbatch_size = 2\r\ninputs = tf.ones((batch_size, 10))\r\nlabels = tf.zeros((batch_size, 1))\r\noutputs = tf.layers.dense(inputs, units=1)\r\nloss = outputs - labels\r\nloss_ta = tf.TensorArray(dtype=tf.float32, size=batch_size)\r\nloss_ta = loss_ta.unstack(loss)\r\n\r\nopt = tf.train.AdamOptimizer(0.1)\r\ninit_grad = []\r\nvars_list = tf.trainable_variables()\r\nfor var in vars_list:\r\n    init_grad.append(tf.zeros_like(var))\r\n\r\ni = tf.constant(0, dtype=tf.int32)\r\ndef condition(i, *args):\r\n    return tf.less(i, batch_size)\r\ndef loop_fn(i, gradients, all_loss):\r\n    loss_ = all_loss.read(i)\r\n    grads = opt.compute_gradients(loss_, vars_list)\r\n    for idx, (grad, var) in enumerate(grads):\r\n        gradients[idx] += grad\r\n    return i + 1, gradients, all_loss\r\n_, final_grad, _ = tf.while_loop(condition, loop_fn, [i, init_grad, loss_ta])\r\n\r\ntrain_op = opt.apply_gradients(zip(final_grad, vars_list))\r\n```\r\nSeems like the problem is in the TensorArray, if I do not read loss from the TensorArray, it will be fine. Besides, I am using version1.0.1 on CPU", "comments": ["@yuanbyu Do you know what the problem is here?  Is it possible to improve the error messages?", "Closing since @yuanbyu is gone."]}, {"number": 9449, "title": "iOS Example error: Create kernel failed", "body": "I'm trying to run the iOS example 'simple' provided. Script build_all_ios.sh runs fine, I'M able to deploy the application, but when I click on the 'Run Model' button, I get the following error: \r\n```\r\n2017-04-26 00:16:30.272956: I /Users/robertofalk/Development/git/tensorflow/tensorflow/contrib/ios_examples/simple/RunModelViewController.mm:149] Session created.\r\n2017-04-26 00:16:30.273190: I /Users/robertofalk/Development/git/tensorflow/tensorflow/contrib/ios_examples/simple/RunModelViewController.mm:152] Graph created.\r\n2017-04-26 00:16:30.508996: I /Users/robertofalk/Development/git/tensorflow/tensorflow/contrib/ios_examples/simple/RunModelViewController.mm:157] Creating session.\r\n2017-04-26 00:16:30.772992: E tensorflow/core/framework/op_segment.cc:53] Create kernel failed: Not found: No registered '_Arg' OpKernel for CPU devices compatible with node _arg_input_0_0 = _Arg[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()\r\n\t.  Registered:  <no registered kernels>\r\n\r\n2017-04-26 00:16:30.773030: E tensorflow/core/common_runtime/executor.cc:644] Executor failed to create kernel. Not found: No registered '_Arg' OpKernel for CPU devices compatible with node _arg_input_0_0 = _Arg[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()\r\n\t.  Registered:  <no registered kernels>\r\n\r\n\t [[Node: _arg_input_0_0 = _Arg[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]\r\n2017-04-26 00:16:30.773723: E /Users/robertofalk/Development/git/tensorflow/tensorflow/contrib/ios_examples/simple/RunModelViewController.mm:221] Running model failed: Not found: No registered '_Arg' OpKernel for CPU devices compatible with node _arg_input_0_0 = _Arg[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()\r\n\t.  Registered:  <no registered kernels>\r\n\r\n\t [[Node: _arg_input_0_0 = _Arg[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]\r\n```\r\nThe error happens both on the simulator and on the device (iPhone 7). \r\n\r\nPlease let me know if you need any additional information about this issue from my side.\r\nThanks and regards,\r\nRoberto Falk", "comments": ["Check #8914.", "@petewarden, do you have any advice here?", "I think you might need to add tensorflow/core/kernels/function_ops.cc to tensorflow/contrib/makefile/tf_op_files.txt, since \"_Arg\" was recently added to some of the model generating code. Let me know if that helps?", "Same problem here.  @petewarden 's solution worked. Add the code and rebuild , now it's working.", "Yes, this solved the problem. Thanks @petewarden "]}, {"number": 9448, "title": "tf_upgrade.py now handles batch_matmul named args.", "body": "Addresses #9424\r\n", "comments": ["Can one of the admins verify this patch?", "@tensorflow-jenkins Test this please", "@tensorflow-jenkins Test this please"]}, {"number": 9447, "title": "Unable to install v0.11 - missing distribution", "body": "### System information\r\n- **OS Platform and Distribution**: Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: Not installed\r\n- **TensorFlow version (use command below)**: 0.11\r\n- **CUDA/cuDNN version**: 5.0\r\n- **GPU model and memory**: Titan X 12 GB\r\n- **Exact command to reproduce**:\r\nroot@system76-server:/# export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.11.0-cp35-cp35m-linux_x86_64.whl\r\nroot@system76-server:/# sudo -H pip3 install --upgrade TF_BINARY_URL\r\n\r\n\r\n### Describe the problem\r\nThe distribution for v0.11 is missing. I am building from binary. Here is the error message:\r\n\"Collecting TF_BINARY_URL\r\n  Could not find a version that satisfies the requirement TF_BINARY_URL (from versions: )\r\nNo matching distribution found for TF_BINARY_URL\"\r\n\r\nThere is some URGENCY here. At our startup, we have just started a pilot with our very first client. Due to privacy concerns, the app is being shipped to client on a desktop, which is being set up right now. Our current stable app version uses TF 0.11 and we dont wish to move to 1.0 unless absolutely unavoidable. \r\n\r\nWould really appreciate it if you would help asap!\r\n\r\nPS: This might help just me, but given this is a distribution issue, others may also benefit from this. Either ways, many apologies if this is the wrong request for GitHub!  ", "comments": ["add a $ to TF_BINARY_URL i.e.\r\n```\r\nsudo -H pip3 install --upgrade $TF_BINARY_URL\r\n```", "Duh! Sorry this should not have been logged here. Its closed now."]}, {"number": 9446, "title": "dynamic_rnn: session.run with train_step behaves differently than train_step run alone", "body": "### System information\r\n- 4.4.0-72-generic #93-Ubuntu SMP Fri Mar 31 14:07:41 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n- via pip\r\n- 1.0.0-65-g4763edf-dirty 1.0.1\r\n- cuda-8.0 + cudnn-5.1.10\r\n- GeForce GTX 760 + 1996MiB\r\n\r\n### Describe the problem\r\n\r\nConsider the following pieces of code:\r\n\r\n#### Variant 1\r\n    loop:\r\n        feed_dict = {c_state: current_state.c, h_state: current_state.h, ...}\r\n        loss_sum, current_state, _ = sess.run([reduce_sum(loss), final_state, train_step], feed_dict=feed_dict)\r\n\r\n#### Variant 2\r\n    loop:\r\n        feed_dict = {...}\r\n        loss_sum, current_state = sess.run([reduce_sum(loss), final_state], feed_dict=feed_dict)\r\n        train_step.run(feed_dict)\r\n\r\n#### Variant 3\r\n    loop:\r\n        feed_dict = {...}\r\n        loss_sum, current_state = sess.run([reduce_sum(loss), final_state], feed_dict=feed_dict)\r\n        sess.run([train_step], feed_dict=feed_dict)\r\n\r\n\r\n**Variant 1** breaks after a couple of iterations (15 in my case) by raising a \"ResourceExhaustedError (see above for traceback): OOM when allocating tensor with shape[200,10,25600]\" exception whereas **Variant 2** and **Variant 3** do not.\r\n\r\ntrain_step is a minimize operation (optimizer doesn't matter) on a dynamic_rnn with a given initial_state and a single layer of LSTM cells.\r\n\r\n\r\nI cannot imagine the reason why **Variant 1** needs more and more memory whereas the other both don't. Seems like something's wrong here.\r\n\r\nSO question: http://stackoverflow.com/questions/43620353/resourceexhaustederror-when-using-session-run-instead-of-train-step-run-in-a-loo", "comments": ["It's quite reasonable that doing more things in parallel would need more memory.  Thus, this question is better asked on  [StackOverflow](http://stackoverflow.com/questions/tagged/tensorflow) since it is not a  bug or feature request. There is also a larger community that reads questions there. Thanks!", "@girving Thanks for your quick response. I would agree with you when the ResourceExhaustedError would occur on the first loop iteration.\r\n\r\nBut it is not and so it seems like a session.run accidentally keeps/leaks some memory.", "Unfortunately, memory usage is not necessarily deterministic in TensorFlow, since parallel ops execute asynchronously.", "A ResourceExhaustedError after always 15 iterations seems like a quite deterministic memory increase if you ask me.\r\n\r\nCould be luck of course. Also such log messages occur:\r\n\r\n    I tensorflow/core/common_runtime/gpu/pool_allocator.cc:247] PoolAllocator: After 5510 get requests, put_count=4382 evicted_count=1000 eviction_rate=0.228206 and unsatisfied allocation rate=0.404356\r\n    I tensorflow/core/common_runtime/gpu/pool_allocator.cc:259] Raising pool_size_limit_ from 100 to 110\r\n    I tensorflow/core/common_runtime/gpu/pool_allocator.cc:247] PoolAllocator: After 6569 get requests, put_count=6516 evicted_count=2000 eviction_rate=0.306937 and unsatisfied allocation rate=0.31466\r\n    I tensorflow/core/common_runtime/gpu/pool_allocator.cc:259] Raising pool_size_limit_ from 160 to 176\r\n    I tensorflow/core/common_runtime/gpu/pool_allocator.cc:247] PoolAllocator: After 6730 get requests, put_count=6782 evicted_count=2000 eviction_rate=0.294898 and unsatisfied allocation rate=0.292868\r\n    I tensorflow/core/common_runtime/gpu/pool_allocator.cc:259] Raising pool_size_limit_ from 256 to 281\r\n    .....", "Well, you haven't shown any code, so there's no evidence it's a bug in TensorFlow and no way for us to debug it.  If you have code and evidence, we can reopen.", "Here you are. It could be possible if there's something wrong with my code but when it's non-obvious from reading the docs (at least not to me).\r\n\r\n    from itertools import islice\r\n    \r\n    from io import BytesIO\r\n    from tensorflow import float32, placeholder, Variable, zeros, matmul, reduce_mean, reduce_sum, train, \\\r\n        InteractiveSession, global_variables_initializer, argmax, constant, truncated_normal, reshape\r\n    from tensorflow.contrib.rnn import LSTMCell\r\n    from tensorflow.contrib.rnn import LSTMStateTuple\r\n    from tensorflow.python.ops.nn_ops import sparse_softmax_cross_entropy_with_logits\r\n    from tensorflow.python.ops.rnn import dynamic_rnn\r\n    \r\n    \r\n    def get_one_hot(i, num_units, num_chars, on=1.0):\r\n        from numpy import zeros\r\n        one_hot = zeros([num_chars * num_units])\r\n        one_hot[[i+j*num_chars for j in range(num_units)]] = on\r\n        return one_hot\r\n    \r\n    \r\n    def gen_data(batch_size, file, max_length=None, forward_size=None):\r\n        forward_size = forward_size or batch_size\r\n        def get_one_hot_stream(file):\r\n            while True:\r\n                byte = file.read(1)\r\n                if not byte or max_length and file.tell() > max_length:\r\n                    file.seek(0)\r\n                    continue\r\n                yield get_one_hot(ord(byte), num_units, num_chars)\r\n        one_hots_stream = get_one_hot_stream(file)\r\n        one_hots = [one_hot for one_hot in islice(one_hots_stream, 0, num_steps+batch_size+num_steps//2)]\r\n        while True:\r\n            yield [one_hots[i:num_steps+i] for i in range(batch_size)], [one_hots[i+num_steps//2:num_steps+i+num_steps//2] for i in range(batch_size)]\r\n            for i in range(forward_size):\r\n                one_hots = one_hots[1:] + [next(one_hots_stream)]\r\n    \r\n    def get_one_hot_string(x):\r\n        return ''.join(chr(a) if chr(a) not in ['\\n', '\\t', '\\r'] else ' ' for a in x)\r\n    \r\n    \r\n    num_chars = 256\r\n    num_units = 100\r\n    num_steps = 200\r\n    \r\n    chars = placeholder(float32, [None, None, num_units * num_chars], 'chars')\r\n    targets = placeholder(float32, [None, None, num_units * num_chars], 'targets')\r\n    \r\n    cell = LSTMCell(num_units)\r\n    c_state = placeholder(float32, [None, num_units], 'c_state')\r\n    h_state = placeholder(float32, [None, num_units], 'h_state')\r\n    initial_state = LSTMStateTuple(c_state, h_state)\r\n    outputs, final_state = dynamic_rnn(cell, chars, initial_state=initial_state)\r\n    \r\n    softmax_w = Variable(truncated_normal([num_units, num_chars], stddev=0.1))\r\n    softmax_b = Variable(constant(0.1, shape=[num_chars]))\r\n    output = reshape(outputs, [-1, num_units])\r\n    logits = matmul(output, softmax_w) + softmax_b\r\n    loss = sparse_softmax_cross_entropy_with_logits(logits=logits, labels=reshape(argmax(targets[:, :, 0:255], 2), [-1]))\r\n    cost = reduce_mean(loss)\r\n    \r\n    train_step = train.AdamOptimizer(0.01).minimize(cost)\r\n    \r\n    sess = InteractiveSession()\r\n    sess.run(global_variables_initializer())\r\n    \r\n    batch_size = 10\r\n    source = gen_data(batch_size, BytesIO(b'test'))\r\n    current_state = LSTMStateTuple(c=zeros([batch_size, cell.state_size.c]).eval(), h=zeros([batch_size, cell.state_size.h]).eval())\r\n    for i, batch in enumerate(source):\r\n        feed_dict = {c_state: current_state.c, h_state: current_state.h, chars: batch[0], targets: batch[1]}\r\n        loss_sum, current_state, _ = sess.run([reduce_sum(loss), final_state, train_step], feed_dict=feed_dict)\r\n    \r\n", "After tweaking the minimal example, I also got the error after 17 and 18 iterations\r\nI noticed the free memory increased from 1.45 GiB (runs with 15 iterations to fail) to 1.63 GiB\r\n\r\n    Total memory: 1.95GiB\r\n    Free memory: 1.63GiB\r\n\r\nEDIT: started several graphical applications to decrease memory to 1.22GiB. Now only 7 iterations until exception.", "I played around with the num_units parameter:\r\n\r\n1.22 GiB + num_units=100 => ~7 iterations until exception\r\n1.22 GiB + num_units=75 => ~20 iterations until exception\r\n1.22 GiB + num_units=50 => ~70 iterations until exception\r\n1.22 GiB + num_units=25 => ~350 iterations until exception\r\n\r\nSeems like some references to the RNN's old internal states are held within tensorflow.\r\n\r\n(NOTE: I replicated my finding on SO to incease coverag; still thanks for your trouble.)", "@girving What else is needed to re-consider this issue?", "Apologies: was on vacation and should have transferred to someone else.  Back now.\r\n\r\nFrom your code I'd be quite surprised if the leak is in TensorFlow.  Sessions don't hold onto any tensors between runs at all unless you're doing partial run.  What happens if you skip the `session.run` calls for the iterations that don't run out of memory, and just do it once on the iteration that should crash?"]}, {"number": 9445, "title": "Issue with running Tensorflow with OpenCL - Ubuntu 14.04.3 (Trusty) - AMD R5 Radeon M335 GPU", "body": "Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No\r\n\r\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):14.04.3-->Trusty\r\n\r\nTensorFlow installed from (source or binary):Source\r\n\r\nTensorFlow version (use command below):1.0 (Steps-> Downloaded tensorflow from https://github.com/benoitsteiner/tensorflow-opencl, ./configure - to configure project)\r\n\r\nBazel version (if compiling from source):0.4.5\r\n\r\nCUDA/cuDNN version:NA\r\n\r\nOPENCL Version:\r\nNumber of platforms:\t1\r\nPlatform Profile:\tFULL_PROFILE\r\nPlatform Version:\tOpenCL 2.0 AMD-APP (1800.11)\r\nPlatform Name:\tAMD Accelerated Parallel Processing\r\nPlatform Vendor:\tAdvanced Micro Devices, Inc.\r\nPlatform Extensions:\tcl_khr_icd cl_amd_event_callback cl_amd_offline_devices\r\n\r\nGPU model and memory:\r\nPlatform Name:\tAMD Accelerated Parallel Processing\r\nNumber of devices:\t2\r\nDevice Type:\tCL_DEVICE_TYPE_GPU\r\nBoard name:\tAMD Radeon (TM) R5 M335\r\nMemory:\t4096M\r\n\r\nExact command to reproduce:\r\nrun the python script -- ipython keras_code.py\r\n\r\n** G++/GCC version**:\r\ng++-4.9 (Ubuntu 4.9.4-2ubuntu1~14.04.1) 4.9.4\r\n\r\nI have compiled CPP programs, they work fine.\r\n\r\nComputeCPP: 0.1.4\r\n-- ** Python**: I am using Anaconda distribution Python for 2.7.2. (Anaconda - 2.4.3)\r\n\r\nDescribe the problem\r\n\r\nI have compile tensorflow, and deployed the same -> No issues here. when I try to run the code I run into the following error:\r\n\r\n2017-04-23 14:01:15.180795: W ./tensorflow/core/common_runtime/sycl/sycl_util.h:44] No OpenCL GPU found that is supported by ComputeCpp, trying OpenCL CPU\r\n2017-04-23 14:01:15.180843: F ./tensorflow/core/common_runtime/sycl/sycl_util.h:53] No OpenCL GPU nor CPU found that is supported by ComputeCpp\r\nAborted (core dumped)\r\n\r\nI have attached the code file. Please note this is a simplified version of the file. The logic is:\r\n\r\nRead data from files,\r\nPass it through a NN\r\nI am using Keras as the Functional programming API on top of Tensorflow.\r\n\r\nMore details: Output of Computecpp_info:\r\n********************************************************************************\r\n\r\nComputeCpp Info (CE 0.1.4)\r\n\r\n********************************************************************************\r\n\r\nToolchain information:\r\n\r\nGLIBCXX: 20150426\r\nThis version of libstdc++ is supported.\r\n\r\n********************************************************************************\r\n\r\n\r\nDevice Info:\r\n\r\nDiscovered 2 devices matching:\r\n  platform    : <any>\r\n  device type : <any>\r\n\r\n--------------------------------------------------------------------------------\r\nDevice 0:\r\n\r\n  Device is supported                     : UNTESTED - Device not tested on this OS\r\n  CL_DEVICE_NAME                          : Hainan\r\n  CL_DEVICE_VENDOR                        : Advanced Micro Devices, Inc.\r\n  CL_DRIVER_VERSION                       : 1800.11 (VM)\r\n  CL_DEVICE_TYPE                          : CL_DEVICE_TYPE_GPU \r\n--------------------------------------------------------------------------------\r\nDevice 1:\r\n\r\n  Device is supported                     : UNTESTED - Device running untested driver\r\n  CL_DEVICE_NAME                          : Intel(R) Core(TM) i7-6500U CPU @ 2.50GHz\r\n  CL_DEVICE_VENDOR                        : GenuineIntel\r\n  CL_DRIVER_VERSION                       : 1800.11 (sse2,avx)\r\n  CL_DEVICE_TYPE                          : CL_DEVICE_TYPE_CPU \r\n\r\nIf you encounter problems when using any of these OpenCL devices, please consult\r\nthis website for known issues:\r\nhttps://computecpp.codeplay.com/releases/v0.1.4/platform-support-notes\r\n\r\n********************************************************************************\r\nPlease let me know if there are any fixes or if I can do something to get round this issue.\r\nThanks and regards\r\nSayantan\r\n[tensorflow-code-throwing-error.txt](https://github.com/tensorflow/tensorflow/files/956152/tensorflow-code-throwing-error.txt)\r\n\r\n", "comments": ["We are in the middle of a merge (https://github.com/tensorflow/tensorflow/pull/9117). It might be a good idea to patch up your code and start from there.", "Thanks, I will wait for the merge to complete and restart from that point.\r\n\r\nRegards\r\nSayantan", "OpenCL support in TF still is not finalized.\r\nI recommend reaching out to CodePlay (authors of ComputeCPP) for more help on this, as the compiler is still in beta, and it may be a compiler or a runtime issue.\r\n\r\nAlso, from what I can see in Platform Support Notes in CodePlay website, they do not have support for any AMD GPUs under ubuntu 16.04\r\nTherefore, I will close this issue.", "I am using Ubuntu 14 (Trusty) as I had mentioned earlier. Anyway, I will be eagerly waiting for TF to roll out support for AMD. Guess it was anyway a bad decision to buy AMD..", "> Also, from what I can see in Platform Support Notes in CodePlay website, they do not have support for any AMD GPUs under ubuntu 16.04\r\n\r\nFor some reason they dropped the note _description_ itself after [0.3.2](https://developer.codeplay.com/computecppce/v0.3.2/supported-platforms) docs. \r\nThough, it doesn't make sense. Even a year ago [cl_khr_spir](https://community.amd.com/thread/207051#2756287) was already supported in amd 'latest' closed driver. \r\n\r\n@DuncanMcBain do you know perhaps who wrote that part of the readme? And/or why the note \"*note*\" is still there, even though people are starting to report successes even on dismembered drivers over unofficial OSs?\r\n\r\n@rahasayantan you could or could not be interested to supposed forward-port of [fglrx for 16.04](https://launchpad.net/~dokomix/+archive/ubuntu/fglrx-xenial) (god knows why it seems just so harder on ubuntu, compared to fedora or arch)", "Hi!\r\nThe readme is written by us. To some extent, you have answered your own question there in the way you described people getting stuff working - we tend to say that any compliant, SPIR-supporting platform *should* work, but we will only describe something as supported if we know we have tested that combination of driver and hardware internally, because we can then actually reproduce failures, write new tests, get a fix implemented and so on.\r\n\r\nThat section might be due an overhaul anyway, but ultimately my advice is (and always has been): OpenCL 1.2 platforms supporting SPIR (and now SPIR-V!) should work. However, if we don't have that combination of hardware and software in our internal testing, it's unlikely we can genuinely say we support it with fixes.\r\n\r\n(As an aside, I am sure that there was at least one release of AMD's drivers that claimed cl_khr_spir support, but when I tried it I just got crashes. Additionally, AMD employees publicly stated on Github that they were dropping SPIR support due to a lack of use, so at the time we stuck with the driver version we knew worked and we already had internally.)", "I was reading AMD itself [knows](https://community.amd.com/thread/221158#2832345) their latest proprietary driver (at least on linux) is shit with SPIR. \r\n\r\nThen, it's legit that you just claim as \"supported\" (even though maybe a better word could be tested or certified) platforms you tested.. But I think it's pretty blatant that \"_somehow_ broken support\" is different than no support at all. \r\n\r\np.s. I'm not sure why in the world they'd drop SPIR, considering SPIR-V is part of core CL 2.1, vulkan, and soon even vulkanCL or whatever they are gonna call it. \r\np.p.s hope you are gonna fix those docs \ud83d\ude43 :\r\n* bring back that amd-4 note description\r\n* recheck your results in light of everything people said in #22 (TL;DR amdgpu-pro is supposedly working)\r\n* idk about ubuntu (as I linked above), but reliable patches to get fglrx to work even on 4.15 are available for both [fedora](https://github.com/imageguy/fglrx-for-Fedora) and [arch](https://aur.archlinux.org/packages/catalyst-total/) - and for as much certainly unofficial, a slim hint could really make the day for _many_ people/newcomers", "I believe the computecpp_info tool will describe platforms we test internally as supported, most other platforms as \"untested\" and those we know won't work as \"unsupported\". The documentation could be clearer on that point.\r\n\r\nSPIR 1.2 and SPIR-V are very distinct formats. It might well be easier for them not to have to support 1.2 in favour of developing other IR formats, like SPIR-V.\r\n\r\nWhich AMD note 4 is that exactly? When I look at the historical docs, it looks like that is the one saying that we can't do AMD on 16.04, no? I can try to find a spare machine to test the GPUPRO driver but I don't actually have compatible hardware myself, so this might not happen. We could also add some notes about the Fedora and Arch patches though that seems more flaky than I'd be comfortable suggesting.\r\n\r\nWhat I will say as a final thought is that we are planning to continue updating the compiler to tip Clang, which will increase the number of IR formats that we can support (for example, recently we enabled PTX output from compute++, and while it's early days we can run some basic samples on nvidia hardware).", "> I believe the computecpp_info tool will describe platforms we test internally as supported, most other platforms as \"untested\" and those we know won't work as \"unsupported\". The documentation could be clearer on that point.\r\n\r\nCool, that would really be neat. \r\n\r\n> SPIR 1.2 and SPIR-V are very distinct formats. It might well be easier for them not to have to support 1.2 in favour of developing other IR formats, like SPIR-V.\r\n\r\nWell, then in turn you'd be dumping OpenCL 1.2 support altogether. \r\nWhich to be really honest, at least atm is the biggest selling point of all the affair. \r\n\r\n> Which AMD note 4 is that exactly? When I look at the historical docs, it looks like that is the one saying that we can't do AMD on 16.04, no?\r\n\r\nYes, and notice how it's still there, mentioned in the table notes.. Yet no description is currently available. \r\np.s. I just noticed it kind of moved inside AMD-2 now. \r\n\r\n> I can try to find a spare machine to test the GPUPRO driver but I don't actually have compatible hardware myself, so this might not happen.\r\n\r\nFTR folks over at #22 are calling it a day. \r\nI wouldn't know if it was something fixed on theirs or yours part though. \r\n\r\n> We could also add some notes about the Fedora and Arch patches though that seems more flaky than I'd be comfortable suggesting.\r\n\r\nI can totally see it. \r\nMaybe just simply something between brackets at the end of current note could do it too?\r\nWith or without even links, if you don't feel at ease. \r\n\r\n> What I will say as a final thought is that we are planning to continue updating the compiler to tip Clang, which will increase the number of IR formats that we can support (for example, recently we enabled PTX output from compute++, and while it's early days we can run some basic samples on nvidia hardware).\r\n\r\nAbsolutely, keep going. \r\nWith that, AFAIK you are the most (possibly only) cross-vendor library/path out there for accelerating ML/DNN. ", ">Well, then in turn you'd be dumping OpenCL 1.2 support altogether.\r\n>Which to be really honest, at least atm is the biggest selling point of all the affair.\r\n\r\nI'm not sure I follow you here - SPIR is optional, not core, so there is nothing to say they have to support SPIR 1.2 over anything else. I believe the SYCL specification rather deliberately doesn't demand a particular IR format either. Or am I misunderstanding you?\r\n>Yes, and notice how it's still there, mentioned in the table notes.. Yet no description is currently available.\r\n>p.s. I just noticed it kind of moved inside AMD-2 now.\r\n\r\n@rodburns could we maybe get this updated with the next release? These are all useful hints for our documentation.\r\n> With that, AFAIK you are the most (possibly only) cross-vendor library/path out there for accelerating ML/DNN.\r\n\r\nI've always felt that we should be proud of how compatible ComputeCpp is. We'd also not have managed this without the open standards work driving this either!", "> Or am I misunderstanding you?\r\n\r\nIf your OCL 1.2 support relies on the mandatory support of SPIR 1.2, I assumed dropping this latter also inversely entailed dropping opencl 1.2 compatibility. \r\n\r\n> @rodburns could we maybe get this updated with the next release? These are all useful hints for our documentation.\r\n\r\nI'm also in the process of *\\*finally\\** getting to test one of the said arch fglrx platforms (on kernel 4.14 nonetheless) running a humble AMD E-350* [that for as much a low power apu, still has a fully fledged gpu (*yes I'm looking at you intel*)]\r\nMight you be interested to results?\r\n\r\n*quite distant from your fury - but hell, if this works, no reason for everything in-between not to"]}, {"number": 9444, "title": "Added a max_pool1d wrapper for max_pool", "body": "From #9442\r\n\r\nmax_pool1d wraps around max_pool like conv1d wraps conv2d", "comments": ["Can one of the admins verify this patch?", "Looks like this is unnecessary given the generic `pool` function that handles 1D already.", "Closing following discussion in #9442. Please comment to reopen if my interpretation was mistaken."]}, {"number": 9443, "title": "Create kernel failed: Not found: No registered '_Arg' OpKernel for CPU devices compatible with node _arg_input_0_0 = _Arg[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()", "body": "iPhone6 und tensorflow/tensorflow/contrib/ios_examples/simple/\r\nI have this Error! Hife!\r\n\r\n\r\n<pre>\r\n2017-04-25 18:19:07.181759: I /Users/liyong/Downloads/tensorflow-master/tensorflow/contrib/ios_examples/simple/RunModelViewController.mm:149] Session created.\r\n2017-04-25 18:19:07.181966: I /Users/liyong/Downloads/tensorflow-master/tensorflow/contrib/ios_examples/simple/RunModelViewController.mm:152] Graph created.\r\n2017-04-25 18:19:07.642122: I /Users/liyong/Downloads/tensorflow-master/tensorflow/contrib/ios_examples/simple/RunModelViewController.mm:157] Creating session.\r\n2017-04-25 18:19:08.422609: E tensorflow/core/framework/op_segment.cc:53] Create kernel failed: Not found: No registered '_Arg' OpKernel for CPU devices compatible with node _arg_input_0_0 = _Arg[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()\r\n\t.  Registered:  <no registered kernels>\r\n\r\n2017-04-25 18:19:08.422813: E tensorflow/core/common_runtime/executor.cc:644] Executor failed to create kernel. Not found: No registered '_Arg' OpKernel for CPU devices compatible with node _arg_input_0_0 = _Arg[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()\r\n\t.  Registered:  <no registered kernels>\r\n\r\n\t [[Node: _arg_input_0_0 = _Arg[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]\r\n2017-04-25 18:19:08.425927: E /Users/liyong/Downloads/tensorflow-master/tensorflow/contrib/ios_examples/simple/RunModelViewController.mm:221] Running model failed: Not found: No registered '_Arg' OpKernel for CPU devices compatible with node _arg_input_0_0 = _Arg[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()\r\n\t.  Registered:  <no registered kernels>\r\n\r\n\t [[Node: _arg_input_0_0 = _Arg[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]\r\n2017-04-25 18:19:08.426901: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"BatchToSpace\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"crops\"')\r\n2017-04-25 18:19:08.426969: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"BatchToSpace\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"crops\"')\r\n2017-04-25 18:19:08.427017: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SpaceToBatch\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tpaddings\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"paddings\"')\r\n2017-04-25 18:19:08.427041: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SpaceToBatch\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tpaddings\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"paddings\"')\r\n2017-04-25 18:19:08.427073: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Requantize\" device_type: \"CPU\" constraint { name: \"Tinput\" allowed_values { list { type: DT_QINT32 } } } constraint { name: \"out_type\" allowed_values { list { type: DT_QUINT8 } } }')\r\n2017-04-25 18:19:08.427122: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RequantizationRange\" device_type: \"CPU\" constraint { name: \"Tinput\" allowed_values { list { type: DT_QINT32 } } }')\r\n2017-04-25 18:19:08.427146: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedReshape\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QUINT8 } } } host_memory_arg: \"shape\"')\r\n2017-04-25 18:19:08.427166: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedReshape\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QINT32 } } } host_memory_arg: \"shape\"')\r\n2017-04-25 18:19:08.427186: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedMaxPool\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QUINT8 } } }')\r\n2017-04-25 18:19:08.427206: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedAvgPool\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QUINT8 } } }')\r\n2017-04-25 18:19:08.427371: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedMul\" device_type: \"CPU\" constraint { name: \"T1\" allowed_values { list { type: DT_QUINT8 } } } constraint { name: \"T2\" allowed_values { list { type: DT_QUINT8 } } } constraint { name: \"Toutput\" allowed_values { list { type: DT_QINT32 } } }')\r\n2017-04-25 18:19:08.427407: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedMatMul\" device_type: \"CPU\" constraint { name: \"T1\" allowed_values { list { type: DT_QUINT8 } } } constraint { name: \"T2\" allowed_values { list { type: DT_QUINT8 } } } constraint { name: \"Toutput\" allowed_values { list { type: DT_QINT32 } } }')\r\n2017-04-25 18:19:08.427452: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedInstanceNorm\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QUINT8 } } }')\r\n2017-04-25 18:19:08.427646: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedBiasAdd\" device_type: \"CPU\" constraint { name: \"T1\" allowed_values { list { type: DT_QUINT8 } } } constraint { name: \"T2\" allowed_values { list { type: DT_QUINT8 } } } constraint { name: \"out_type\" allowed_values { list { type: DT_QINT32 } } }')\r\n2017-04-25 18:19:08.427697: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedBiasAdd\" device_type: \"CPU\" constraint { name: \"T1\" allowed_values { list { type: DT_QINT8 } } } constraint { name: \"T2\" allowed_values { list { type: DT_QINT8 } } } constraint { name: \"out_type\" allowed_values { list { type: DT_QINT32 } } }')\r\n2017-04-25 18:19:08.427737: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedRelu6\" device_type: \"CPU\" constraint { name: \"Tinput\" allowed_values { list { type: DT_QINT32 } } } constraint { name: \"out_type\" allowed_values { list { type: DT_QINT32 } } }')\r\n2017-04-25 18:19:08.427760: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedRelu6\" device_type: \"CPU\" constraint { name: \"Tinput\" allowed_values { list { type: DT_QUINT8 } } } constraint { name: \"out_type\" allowed_values { list { type: DT_QUINT8 } } }')\r\n2017-04-25 18:19:08.428026: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedRelu\" device_type: \"CPU\" constraint { name: \"Tinput\" allowed_values { list { type: DT_QINT32 } } } constraint { name: \"out_type\" allowed_values { list { type: DT_QINT32 } } }')\r\n2017-04-25 18:19:08.428054: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedRelu\" device_type: \"CPU\" constraint { name: \"Tinput\" allowed_values { list { type: DT_QUINT8 } } } constraint { name: \"out_type\" allowed_values { list { type: DT_QUINT8 } } }')\r\n2017-04-25 18:19:08.428077: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizeV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QUINT8 } } }')\r\n2017-04-25 18:19:08.428098: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizeV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QINT8 } } }')\r\n2017-04-25 18:19:08.428270: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizeV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QUINT16 } } }')\r\n2017-04-25 18:19:08.428319: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizeV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QINT16 } } }')\r\n2017-04-25 18:19:08.428341: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizeV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QINT32 } } }')\r\n2017-04-25 18:19:08.428366: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizeDownAndShrinkRange\" device_type: \"CPU\" constraint { name: \"Tinput\" allowed_values { list { type: DT_QINT32 } } } constraint { name: \"out_type\" allowed_values { list { type: DT_QUINT8 } } }')\r\n2017-04-25 18:19:08.428461: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"AddN\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.428482: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"AddN\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.428502: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ArgMin\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"dimension\"')\r\n2017-04-25 18:19:08.428543: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ArgMin\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"dimension\"')\r\n2017-04-25 18:19:08.428564: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ArgMax\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"dimension\"')\r\n2017-04-25 18:19:08.428653: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ArgMax\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"dimension\"')\r\n2017-04-25 18:19:08.428676: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"AvgPoolGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"orig_input_shape\"')\r\n2017-04-25 18:19:08.428695: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"AvgPool\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.428732: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"AvgPool\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_HALF } } }')\r\n2017-04-25 18:19:08.428755: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"BatchNormWithGlobalNormalizationGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.428892: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"BroadcastGradientArgs\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"s0\" host_memory_arg: \"s1\" host_memory_arg: \"r0\" host_memory_arg: \"r1\"')\r\n2017-04-25 18:19:08.429034: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"BroadcastGradientArgs\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"s0\" host_memory_arg: \"s1\" host_memory_arg: \"r0\" host_memory_arg: \"r1\"')\r\n2017-04-25 18:19:08.429056: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"_HostCast\" device_type: \"GPU\" host_memory_arg: \"x\" host_memory_arg: \"y\"')\r\n2017-04-25 18:19:08.429090: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"_HostCast\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.429238: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ConcatOffset\" device_type: \"GPU\" host_memory_arg: \"concat_dim\" host_memory_arg: \"shape\" host_memory_arg: \"offset\"')\r\n2017-04-25 18:19:08.429406: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ConcatOffset\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.429433: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ConcatV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"axis\"')\r\n2017-04-25 18:19:08.429456: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ConcatV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"axis\"')\r\n2017-04-25 18:19:08.429564: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ConcatV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QUINT8 } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"axis\"')\r\n2017-04-25 18:19:08.429815: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ConcatV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QINT8 } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"axis\"')\r\n2017-04-25 18:19:08.429871: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ConcatV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QUINT16 } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"axis\"')\r\n2017-04-25 18:19:08.429896: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ConcatV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QINT16 } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"axis\"')\r\n2017-04-25 18:19:08.429920: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ConcatV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QINT32 } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"axis\"')\r\n2017-04-25 18:19:08.429997: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ConcatV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_BFLOAT16 } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"axis\"')\r\n2017-04-25 18:19:08.430316: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Placeholder\" device_type: \"GPU\"')\r\n2017-04-25 18:19:08.430334: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"PlaceholderV2\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.430365: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Placeholder\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.430412: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"OnesLike\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.430511: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"OnesLike\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.430535: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ZerosLike\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.430554: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ZerosLike\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.430595: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Fill\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"dims\"')\r\n2017-04-25 18:19:08.430616: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Fill\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"dims\"')\r\n2017-04-25 18:19:08.430636: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Fill\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QUINT8 } } } host_memory_arg: \"dims\"')\r\n2017-04-25 18:19:08.430714: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Const\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.430737: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"BatchNormWithGlobalNormalization\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.430753: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Abort\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.430769: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ControlTrigger\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.430784: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"LoopCond\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.430821: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefNextIteration\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.430940: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefNextIteration\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_BOOL } } }')\r\n2017-04-25 18:19:08.430963: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefNextIteration\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"data\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.431032: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefNextIteration\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_STRING } } } host_memory_arg: \"data\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.431109: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefNextIteration\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.431125: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"NextIteration\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.431145: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefExit\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"data\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.431254: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefExit\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_STRING } } } host_memory_arg: \"data\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.431387: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefEnter\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.431408: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefEnter\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_BOOL } } }')\r\n2017-04-25 18:19:08.431428: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefEnter\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"data\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.431572: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefEnter\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_STRING } } } host_memory_arg: \"data\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.431596: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Enter\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.431616: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Enter\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_BOOL } } }')\r\n2017-04-25 18:19:08.431635: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Enter\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"data\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.431705: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Enter\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_STRING } } } host_memory_arg: \"data\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.431957: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Enter\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_RESOURCE } } } host_memory_arg: \"data\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.431988: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefMerge\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"value_index\"')\r\n2017-04-25 18:19:08.432009: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefMerge\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_BOOL } } } host_memory_arg: \"value_index\"')\r\n2017-04-25 18:19:08.432030: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefMerge\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"inputs\" host_memory_arg: \"output\" host_memory_arg: \"value_index\"')\r\n2017-04-25 18:19:08.432252: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefMerge\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_STRING } } } host_memory_arg: \"inputs\" host_memory_arg: \"output\" host_memory_arg: \"value_index\"')\r\n2017-04-25 18:19:08.432286: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefMerge\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_RESOURCE } } } host_memory_arg: \"inputs\" host_memory_arg: \"output\" host_memory_arg: \"value_index\"')\r\n2017-04-25 18:19:08.432304: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ControlTrigger\" device_type: \"GPU\"')\r\n2017-04-25 18:19:08.432322: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Merge\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"value_index\"')\r\n2017-04-25 18:19:08.432342: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Merge\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_BOOL } } } host_memory_arg: \"value_index\"')\r\n2017-04-25 18:19:08.432558: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Merge\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"inputs\" host_memory_arg: \"output\" host_memory_arg: \"value_index\"')\r\n2017-04-25 18:19:08.432584: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Merge\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_STRING } } } host_memory_arg: \"inputs\" host_memory_arg: \"output\" host_memory_arg: \"value_index\"')\r\n2017-04-25 18:19:08.432607: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Merge\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_RESOURCE } } } host_memory_arg: \"inputs\" host_memory_arg: \"output\" host_memory_arg: \"value_index\"')\r\n2017-04-25 18:19:08.432624: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefMerge\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.432883: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Merge\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.432955: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefSelect\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"index\"')\r\n2017-04-25 18:19:08.433006: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefSelect\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"index\"')\r\n2017-04-25 18:19:08.433030: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefSwitch\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"pred\"')\r\n2017-04-25 18:19:08.433053: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefSwitch\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"data\" host_memory_arg: \"pred\" host_memory_arg: \"output_false\" host_memory_arg: \"output_true\"')\r\n2017-04-25 18:19:08.433164: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefSwitch\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_BOOL } } } host_memory_arg: \"data\" host_memory_arg: \"pred\" host_memory_arg: \"output_false\" host_memory_arg: \"output_true\"')\r\n2017-04-25 18:19:08.433683: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefSwitch\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_STRING } } } host_memory_arg: \"data\" host_memory_arg: \"pred\" host_memory_arg: \"output_false\" host_memory_arg: \"output_true\"')\r\n2017-04-25 18:19:08.433715: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Switch\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"pred\"')\r\n2017-04-25 18:19:08.433829: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Switch\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"data\" host_memory_arg: \"pred\" host_memory_arg: \"output_false\" host_memory_arg: \"output_true\"')\r\n2017-04-25 18:19:08.434041: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Switch\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_BOOL } } } host_memory_arg: \"data\" host_memory_arg: \"pred\" host_memory_arg: \"output_false\" host_memory_arg: \"output_true\"')\r\n2017-04-25 18:19:08.434068: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Switch\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_STRING } } } host_memory_arg: \"data\" host_memory_arg: \"pred\" host_memory_arg: \"output_false\" host_memory_arg: \"output_true\"')\r\n2017-04-25 18:19:08.434091: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefSwitch\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"pred\"')\r\n2017-04-25 18:19:08.434111: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefSwitch\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"pred\"')\r\n2017-04-25 18:19:08.434243: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Switch\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"pred\"')\r\n2017-04-25 18:19:08.434264: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Switch\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"pred\"')\r\n2017-04-25 18:19:08.434285: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Conv2DBackpropInput\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } label: \"eigen_tensor\"')\r\n2017-04-25 18:19:08.434305: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Conv2DBackpropInput\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } label: \"custom\"')\r\n2017-04-25 18:19:08.434443: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Conv2DBackpropInput\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.434466: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Conv2DBackpropFilter\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } label: \"eigen_tensor\"')\r\n2017-04-25 18:19:08.434487: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedConcat\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QUINT8 } } } host_memory_arg: \"concat_dim\"')\r\n2017-04-25 18:19:08.434526: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedConcat\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QINT32 } } } host_memory_arg: \"concat_dim\"')\r\n2017-04-25 18:19:08.434567: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Conv2DBackpropFilter\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } label: \"custom\"')\r\n2017-04-25 18:19:08.434641: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Conv2DBackpropFilter\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.434662: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"FusedPadConv2D\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.434682: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"FusedResizeAndPadConv2D\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.434703: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"CropAndResizeGradImage\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"image_size\"')\r\n2017-04-25 18:19:08.434757: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"PlaceholderV2\" device_type: \"GPU\"')\r\n2017-04-25 18:19:08.434835: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"CropAndResizeGradBoxes\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.434856: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"CropAndResizeGradBoxes\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.434876: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"CropAndResize\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"crop_size\"')\r\n2017-04-25 18:19:08.434896: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"CropAndResize\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"crop_size\"')\r\n2017-04-25 18:19:08.434942: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"CTCGreedyDecoder\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.435029: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"BiasAdd\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.435049: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"BiasAdd\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.435068: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Add\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.435087: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RealDiv\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.435158: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Div\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.435178: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Div\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_UINT8 } } }')\r\n2017-04-25 18:19:08.435247: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ApproximateEqual\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.435268: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ApproximateEqual\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } }')\r\n2017-04-25 18:19:08.435287: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Equal\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.435306: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Greater\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.435341: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"GreaterEqual\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.435490: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"IsFinite\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.435511: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Less\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.435643: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SpaceToBatchND\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tblock_shape\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tpaddings\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"block_shape\" host_memory_arg: \"paddings\"')\r\n2017-04-25 18:19:08.435674: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SpaceToBatchND\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tblock_shape\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tpaddings\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"block_shape\" host_memory_arg: \"paddings\"')\r\n2017-04-25 18:19:08.435743: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Log\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.435784: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"LogicalNot\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.435917: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Minimum\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.435940: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Mul\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.435958: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Mul\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.436025: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ReciprocalGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.436045: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"InvGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.436083: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RsqrtGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.436104: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"BroadcastArgs\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"s0\" host_memory_arg: \"s1\" host_memory_arg: \"r0\"')\r\n2017-04-25 18:19:08.436124: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Rsqrt\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.436273: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Select\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.436327: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Select\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.436346: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Sign\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.436365: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SigmoidGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.436418: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Sigmoid\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.436482: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Sqrt\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.436540: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SquaredDifference\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"x\" host_memory_arg: \"y\" host_memory_arg: \"z\"')\r\n2017-04-25 18:19:08.436564: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SquaredDifference\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.436582: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Sub\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.436601: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Sub\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.436663: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TanhGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.436684: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"AssignSub\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.436702: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"AssignSub\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.436836: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"AssignAdd\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.436859: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"AssignAdd\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.436879: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SpaceToDepth\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.437030: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SpaceToDepth\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.437089: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"DepthToSpace\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.437110: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"DepthToSpace\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.437128: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Reciprocal\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.437147: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"DynamicPartition\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.437211: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"DynamicPartition\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.437232: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"DynamicStitch\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"indices\"')\r\n2017-04-25 18:19:08.437252: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"DynamicStitch\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"indices\"')\r\n2017-04-25 18:19:08.437271: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"FakeQuantWithMinMaxVarsPerChannelGradient\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.437289: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"FakeQuantWithMinMaxVarsPerChannel\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.437305: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"FakeQuantWithMinMaxVarsGradient\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.437432: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"FakeQuantWithMinMaxVars\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.437452: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"FakeQuantWithMinMaxArgsGradient\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.437471: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"FusedBatchNormGrad\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.437488: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"FusedBatchNorm\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.437509: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Gather\" device_type: \"CPU\" constraint { name: \"Tparams\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.437550: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Gather\" device_type: \"CPU\" constraint { name: \"Tparams\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.437687: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Gather\" device_type: \"CPU\" constraint { name: \"Tparams\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.437809: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Gather\" device_type: \"CPU\" constraint { name: \"Tparams\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.437834: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"DepthwiseConv2dNative\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.437854: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StopGradient\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.438011: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StopGradient\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_BFLOAT16 } } }')\r\n2017-04-25 18:19:08.438050: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Dequantize\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QUINT8 } } }')\r\n2017-04-25 18:19:08.438072: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Dequantize\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QINT8 } } }')\r\n2017-04-25 18:19:08.438091: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Dequantize\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QUINT16 } } }')\r\n2017-04-25 18:19:08.438109: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Dequantize\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QINT16 } } }')\r\n2017-04-25 18:19:08.438176: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Dequantize\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QINT32 } } }')\r\n2017-04-25 18:19:08.438198: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"PreventGradient\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.438217: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"PreventGradient\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_BFLOAT16 } } }')\r\n2017-04-25 18:19:08.438237: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Identity\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.438256: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Identity\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_BFLOAT16 } } }')\r\n2017-04-25 18:19:08.438379: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefIdentity\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.438397: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"PreventGradient\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.438413: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StopGradient\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.438428: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Identity\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.438465: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"InTopK\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.438483: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"InTopK\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.438502: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ParallelConcat\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.438573: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ParallelConcat\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.438595: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"_ParallelConcatStart\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.438614: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"_ParallelConcatStart\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.438633: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefIdentity\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.438683: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefIdentity\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_BFLOAT16 } } }')\r\n2017-04-25 18:19:08.438841: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ParseSingleSequenceExample\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.438870: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"_ParallelConcatUpdate\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.438946: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"_ParallelConcatUpdate\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.438964: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Print\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.439073: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Assert\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.439105: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"LRN\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.439127: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"MatMul\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } label: \"eigen\"')\r\n2017-04-25 18:19:08.439310: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"MatMul\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } label: \"eigen\"')\r\n2017-04-25 18:19:08.439333: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Assign\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.439386: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Assign\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.439416: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"MatMul\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.439434: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"MatMul\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.439506: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"MaxPoolGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.439527: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"MaxPoolGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.439622: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"MaxPool\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.439661: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"MaxPool\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.439690: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"MirrorPad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tpaddings\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"paddings\"')\r\n2017-04-25 18:19:08.439883: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"MirrorPad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tpaddings\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"paddings\"')\r\n2017-04-25 18:19:08.439906: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"NonMaxSuppression\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.440020: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"OneHot\" device_type: \"CPU\" constraint { name: \"TI\" allowed_values { list { type: DT_UINT8 } } } constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"depth\"')\r\n2017-04-25 18:19:08.440046: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"OneHot\" device_type: \"CPU\" constraint { name: \"TI\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"depth\"')\r\n2017-04-25 18:19:08.440219: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"OneHot\" device_type: \"CPU\" constraint { name: \"TI\" allowed_values { list { type: DT_INT64 } } } constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"depth\"')\r\n2017-04-25 18:19:08.440246: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"OneHot\" device_type: \"CPU\" constraint { name: \"TI\" allowed_values { list { type: DT_UINT8 } } } constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"depth\"')\r\n2017-04-25 18:19:08.440287: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"OneHot\" device_type: \"CPU\" constraint { name: \"TI\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"depth\"')\r\n2017-04-25 18:19:08.440312: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"OneHot\" device_type: \"CPU\" constraint { name: \"TI\" allowed_values { list { type: DT_INT64 } } } constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"depth\"')\r\n2017-04-25 18:19:08.440423: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Pack\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.440443: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Pack\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.440490: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Pack\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_STRING } } }')\r\n2017-04-25 18:19:08.440516: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Pad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"paddings\"')\r\n2017-04-25 18:19:08.440536: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Pad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"paddings\"')\r\n2017-04-25 18:19:08.440611: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceApplyMomentum\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"var\" host_memory_arg: \"accum\"')\r\n2017-04-25 18:19:08.440629: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"PaddingFIFOQueue\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.440645: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"FakeQueue\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.440660: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Cast\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.440676: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QueueClose\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.440708: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"PaddingFIFOQueueV2\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.440861: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QueueDequeueUpToV2\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.440898: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QueueDequeueUpTo\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.440921: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayWriteV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.440941: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayWriteV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.440958: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QueueDequeueV2\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.440974: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QueueEnqueueManyV2\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.440989: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QueueEnqueueMany\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.441050: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QueueEnqueueV2\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.441075: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Softsign\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.441128: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Softsign\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.441152: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyFtrl\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.441176: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyFtrl\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.441248: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StackPush\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.441265: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QueueEnqueue\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.441285: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Any\" device_type: \"CPU\" constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"reduction_indices\"')\r\n2017-04-25 18:19:08.441425: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Max\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.441451: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Max\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.441621: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"BatchToSpaceND\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tblock_shape\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tcrops\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"block_shape\" host_memory_arg: \"crops\"')\r\n2017-04-25 18:19:08.441651: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"BatchToSpaceND\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tblock_shape\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tcrops\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"block_shape\" host_memory_arg: \"crops\"')\r\n2017-04-25 18:19:08.441675: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Mean\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.441820: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Mean\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.441847: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TopKV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.441867: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TopKV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.441887: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Min\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.442038: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Min\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.442185: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Prod\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.442209: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Prod\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.442226: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefExit\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.442246: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Sum\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.442384: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Sum\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.442414: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyCenteredRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_HALF } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.442439: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyCenteredRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_HALF } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.442463: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyCenteredRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.442627: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyCenteredRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.442671: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyCenteredRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.442697: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyCenteredRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.442718: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"EluGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.442784: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Relu6Grad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.442868: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Relu6Grad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.442891: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Relu6\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.442928: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Relu6\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.442950: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ReluGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.443026: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ReluGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.443044: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ImmutableConst\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.443063: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Relu\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.443082: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Relu\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.443220: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"FakeQuantWithMinMaxArgs\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.443244: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Reshape\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tshape\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"shape\"')\r\n2017-04-25 18:19:08.443407: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Reshape\" device_type: \"CPU\" constraint { name: \"Tshape\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"shape\"')\r\n2017-04-25 18:19:08.443445: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArraySizeV2\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.443462: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayCloseV3\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.443478: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QueueCloseV2\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.443497: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResizeBilinearGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.443518: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResizeNearestNeighborGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"size\"')\r\n2017-04-25 18:19:08.443584: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResizeNearestNeighborGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"size\"')\r\n2017-04-25 18:19:08.443606: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResizeNearestNeighbor\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"size\"')\r\n2017-04-25 18:19:08.443626: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResizeNearestNeighbor\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"size\"')\r\n2017-04-25 18:19:08.443643: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RestoreSlice\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.443904: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Concat\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"concat_dim\"')\r\n2017-04-25 18:19:08.443960: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Concat\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"concat_dim\"')\r\n2017-04-25 18:19:08.443980: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Concat\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QUINT8 } } } host_memory_arg: \"concat_dim\"')\r\n2017-04-25 18:19:08.443999: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Concat\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QINT8 } } } host_memory_arg: \"concat_dim\"')\r\n2017-04-25 18:19:08.444017: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Concat\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QUINT16 } } } host_memory_arg: \"concat_dim\"')\r\n2017-04-25 18:19:08.444179: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Concat\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QINT16 } } } host_memory_arg: \"concat_dim\"')\r\n2017-04-25 18:19:08.444209: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Concat\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QINT32 } } } host_memory_arg: \"concat_dim\"')\r\n2017-04-25 18:19:08.444230: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Concat\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_BFLOAT16 } } } host_memory_arg: \"concat_dim\"')\r\n2017-04-25 18:19:08.444255: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"InvertPermutation\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"x\" host_memory_arg: \"y\"')\r\n2017-04-25 18:19:08.444278: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Reverse\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"dims\"')\r\n2017-04-25 18:19:08.444480: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Reverse\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"dims\"')\r\n2017-04-25 18:19:08.444526: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ReverseSequence\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tlen\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.444581: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ReverseSequence\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tlen\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.444604: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ReverseSequence\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tlen\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.444692: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ReverseSequence\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tlen\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.444711: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SaveSlices\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.444726: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Save\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.444742: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayClose\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.444825: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"MergeV2Checkpoints\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.444842: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RestoreV2\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.444904: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SaveV2\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.444921: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ParseExample\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.444986: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterNd\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"shape\"')\r\n2017-04-25 18:19:08.445011: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterNd\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } } host_memory_arg: \"shape\"')\r\n2017-04-25 18:19:08.445035: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterNd\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"shape\"')\r\n2017-04-25 18:19:08.445244: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterNd\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } } host_memory_arg: \"shape\"')\r\n2017-04-25 18:19:08.445271: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterNdUpdate\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.445294: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterNdUpdate\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.445316: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterNdUpdate\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.445471: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterNdUpdate\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.445529: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyMomentum\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.445554: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyMomentum\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.445704: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterSub\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.445730: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterSub\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.445752: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterSub\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.445775: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterSub\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.445943: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterDiv\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.445968: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterDiv\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.445990: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterDiv\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.446029: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterDiv\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.446317: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Size\" device_type: \"CPU\" constraint { name: \"out_type\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.446342: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Size\" device_type: \"CPU\" constraint { name: \"out_type\" allowed_values { list { type: DT_INT64 } } } host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.446363: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterAdd\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.446400: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterAdd\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.446534: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterAdd\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.446557: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterAdd\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.446647: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterNdAdd\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.446689: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterNdAdd\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.446774: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterNdAdd\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.446904: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterNdAdd\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.446926: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"_Recv\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.446944: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"_HostSend\" device_type: \"GPU\" host_memory_arg: \"tensor\"')\r\n2017-04-25 18:19:08.446964: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ApplyAdadelta\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.447107: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.447136: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.447154: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"_Send\" device_type: \"GPU\"')\r\n2017-04-25 18:19:08.447285: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"LinSpace\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"start\" host_memory_arg: \"stop\" host_memory_arg: \"num\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.447357: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ApplyRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.447429: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"_HostRecv\" device_type: \"GPU\" host_memory_arg: \"tensor\"')\r\n2017-04-25 18:19:08.447454: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"LinSpace\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"start\" host_memory_arg: \"stop\" host_memory_arg: \"num\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.447479: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Range\" device_type: \"CPU\" constraint { name: \"Tidx\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"start\" host_memory_arg: \"limit\" host_memory_arg: \"delta\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.447722: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Range\" device_type: \"CPU\" constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"start\" host_memory_arg: \"limit\" host_memory_arg: \"delta\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.447744: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"_HostRecv\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.447761: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"DeleteSessionTensor\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.447781: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"GetSessionTensor\" device_type: \"GPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.447801: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"GetSessionTensor\" device_type: \"GPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.447984: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"GetSessionTensor\" device_type: \"GPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_BOOL } } } host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.448005: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"GetSessionTensor\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.448024: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"GetSessionHandleV2\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.448063: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"GetSessionHandleV2\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.448086: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"GetSessionHandleV2\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_BOOL } } } host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.448162: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"GetSessionHandle\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.448184: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"GetSessionHandle\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.448204: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"GetSessionHandle\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_BOOL } } } host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.448287: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"_Recv\" device_type: \"GPU\"')\r\n2017-04-25 18:19:08.448331: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"GetSessionHandleV2\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.448352: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterMul\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.448536: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterMul\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.448562: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterMul\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.448583: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterMul\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.448746: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Rank\" device_type: \"CPU\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.448769: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ShapeN\" device_type: \"CPU\" constraint { name: \"out_type\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.448789: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ShapeN\" device_type: \"CPU\" constraint { name: \"out_type\" allowed_values { list { type: DT_INT64 } } } host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.448806: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"VariableV2\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.448855: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Shape\" device_type: \"CPU\" constraint { name: \"out_type\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.448879: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Shape\" device_type: \"CPU\" constraint { name: \"out_type\" allowed_values { list { type: DT_INT64 } } } host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.448982: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"LogSoftmax\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.449110: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Softmax\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.449132: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"CheckNumerics\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.449151: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SoftplusGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.449170: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SoftplusGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.449348: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Slice\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"begin\" host_memory_arg: \"size\"')\r\n2017-04-25 18:19:08.449390: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Slice\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"begin\" host_memory_arg: \"size\"')\r\n2017-04-25 18:19:08.449435: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Slice\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_BFLOAT16 } } } host_memory_arg: \"begin\" host_memory_arg: \"size\"')\r\n2017-04-25 18:19:08.449456: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SoftsignGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.449475: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SoftsignGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.449545: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedConv2D\" device_type: \"CPU\" constraint { name: \"Tinput\" allowed_values { list { type: DT_QUINT8 } } } constraint { name: \"Tfilter\" allowed_values { list { type: DT_QUINT8 } } } constraint { name: \"out_type\" allowed_values { list { type: DT_QINT32 } } }')\r\n2017-04-25 18:19:08.449591: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseMatMul\" device_type: \"CPU\" constraint { name: \"Ta\" allowed_values { list { type: DT_BFLOAT16 } } } constraint { name: \"Tb\" allowed_values { list { type: DT_BFLOAT16 } } }')\r\n2017-04-25 18:19:08.449613: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseMatMul\" device_type: \"CPU\" constraint { name: \"Ta\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tb\" allowed_values { list { type: DT_BFLOAT16 } } }')\r\n2017-04-25 18:19:08.449867: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseMatMul\" device_type: \"CPU\" constraint { name: \"Ta\" allowed_values { list { type: DT_BFLOAT16 } } } constraint { name: \"Tb\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.449894: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseMatMul\" device_type: \"CPU\" constraint { name: \"Ta\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tb\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.449916: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayReadV2\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.449940: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayReadV2\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.449957: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QueueDequeueMany\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.450118: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseToDense\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.450145: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseToDense\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.450167: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseToDense\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.450190: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseToDense\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.450369: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseToDense\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_BOOL } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.450395: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseToDense\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_BOOL } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.450449: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseToDense\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_STRING } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.450473: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseToDense\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_STRING } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.450578: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StackClose\" device_type: \"GPU\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.450602: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StackPop\" device_type: \"GPU\" constraint { name: \"elem_type\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.450647: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StackPop\" device_type: \"GPU\" constraint { name: \"elem_type\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"handle\" host_memory_arg: \"elem\"')\r\n2017-04-25 18:19:08.450671: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StackPop\" device_type: \"GPU\" constraint { name: \"elem_type\" allowed_values { list { type: DT_BOOL } } } host_memory_arg: \"handle\" host_memory_arg: \"elem\"')\r\n2017-04-25 18:19:08.450760: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Stack\" device_type: \"GPU\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.450778: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ShardedFilespec\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.450794: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Stack\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.450813: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Exit\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.450862: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Exit\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_BOOL } } }')\r\n2017-04-25 18:19:08.450895: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Exit\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"data\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.450916: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Exit\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_STRING } } } host_memory_arg: \"data\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.450978: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StackPop\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.451002: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StridedSliceGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"shape\" host_memory_arg: \"begin\" host_memory_arg: \"end\" host_memory_arg: \"strides\"')\r\n2017-04-25 18:19:08.451070: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StridedSliceGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"shape\" host_memory_arg: \"begin\" host_memory_arg: \"end\" host_memory_arg: \"strides\"')\r\n2017-04-25 18:19:08.451101: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StridedSliceGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_BFLOAT16 } } } host_memory_arg: \"shape\" host_memory_arg: \"begin\" host_memory_arg: \"end\" host_memory_arg: \"strides\"')\r\n2017-04-25 18:19:08.451181: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayCloseV3\" device_type: \"GPU\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.451357: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayCloseV2\" device_type: \"GPU\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.451381: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Square\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.451398: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayClose\" device_type: \"GPU\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.451431: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayCloseV2\" device_type: \"CPU\"')\r\n\r\n2017-04-25 18:19:08.452321: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"NoOp\" device_type: \"GPU\"')\r\n2017-04-25 18:19:08.452347: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArraySizeV2\" device_type: \"GPU\" host_memory_arg: \"handle\" host_memory_arg: \"size\"')\r\n2017-04-25 18:19:08.452406: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArraySizeV3\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.452446: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArraySplitV3\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.452489: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArraySplitV3\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.452511: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StridedSliceAssign\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"begin\" host_memory_arg: \"end\" host_memory_arg: \"strides\"')\r\n2017-04-25 18:19:08.452774: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StridedSliceAssign\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"begin\" host_memory_arg: \"end\" host_memory_arg: \"strides\"')\r\n2017-04-25 18:19:08.452800: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StridedSliceAssign\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_BFLOAT16 } } } host_memory_arg: \"begin\" host_memory_arg: \"end\" host_memory_arg: \"strides\"')\r\n2017-04-25 18:19:08.452907: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StringJoin\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.452928: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGradV2\" device_type: \"GPU\" host_memory_arg: \"handle\" host_memory_arg: \"grad_handle\"')\r\n2017-04-25 18:19:08.452944: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QueueDequeue\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.453024: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"PlaceholderWithDefault\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.453041: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGrad\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.453056: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"NoOp\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.453072: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"CTCBeamSearchDecoder\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.453109: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArraySplitV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.453132: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArraySplitV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.453169: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"BiasAddGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.453236: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"BiasAddGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.453259: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArraySplit\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.453364: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArraySplit\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.453411: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Neg\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.453431: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"NextIteration\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.453552: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"NextIteration\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_BOOL } } }')\r\n2017-04-25 18:19:08.453628: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"NextIteration\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"data\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.453649: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"NextIteration\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_STRING } } } host_memory_arg: \"data\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.453690: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterNdSub\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.453798: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterNdSub\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.453822: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterNdSub\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.453943: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterNdSub\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.453968: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayScatterV3\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.454149: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayScatterV3\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.454176: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayUnpack\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.454195: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayUnpack\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.454246: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcatV2\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.454279: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcatV2\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.454347: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcatV2\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QUINT8 } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.454370: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcatV2\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QINT8 } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.454391: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcatV2\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QINT32 } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.454460: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcatV2\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_BFLOAT16 } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.454567: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcat\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.454590: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcat\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.454611: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcat\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QUINT8 } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.454651: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcat\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QINT8 } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.454745: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcat\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QINT32 } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.454768: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcat\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_BFLOAT16 } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.454788: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGatherV3\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.454808: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGatherV3\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.454941: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGatherV3\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QUINT8 } } }')\r\n2017-04-25 18:19:08.454963: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGatherV3\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QINT8 } } }')\r\n2017-04-25 18:19:08.454982: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGatherV3\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QINT32 } } }')\r\n2017-04-25 18:19:08.455020: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGatherV3\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_BFLOAT16 } } }')\r\n2017-04-25 18:19:08.455037: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Restore\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.455061: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyAdagradDA\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.455132: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyAdagradDA\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.455156: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyAdagradDA\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.455180: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyAdagradDA\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.455322: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayScatterV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.455345: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayScatterV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.455370: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyProximalAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.455394: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyProximalAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.455419: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyProximalAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.455584: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyProximalAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.455609: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Unpack\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.455629: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Unpack\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.455726: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceApplyProximalGradientDescent\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"var\"')\r\n2017-04-25 18:19:08.455794: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceApplyProximalGradientDescent\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } host_memory_arg: \"var\"')\r\n2017-04-25 18:19:08.455815: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGatherV2\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.455861: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGatherV2\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.455894: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGatherV2\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QUINT8 } } }')\r\n2017-04-25 18:19:08.455914: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGatherV2\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QINT8 } } }')\r\n2017-04-25 18:19:08.455979: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGatherV2\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QINT32 } } }')\r\n2017-04-25 18:19:08.456000: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGatherV2\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_BFLOAT16 } } }')\r\n2017-04-25 18:19:08.456017: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArray\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.456115: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ReverseV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"axis\"')\r\n2017-04-25 18:19:08.456157: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ReverseV2\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tidx\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"axis\"')\r\n2017-04-25 18:19:08.456293: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"IsVariableInitialized\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.456316: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayPack\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.456405: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayPack\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.456426: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayPack\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QUINT8 } } }')\r\n2017-04-25 18:19:08.456445: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayPack\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QINT8 } } }')\r\n2017-04-25 18:19:08.456524: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayPack\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QINT32 } } }')\r\n2017-04-25 18:19:08.456544: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayPack\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_BFLOAT16 } } }')\r\n2017-04-25 18:19:08.456565: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Elu\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.456627: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayWriteV3\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.456664: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayWriteV3\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.456725: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"_Send\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.456742: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"RefEnter\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.456761: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayWrite\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.456901: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayWrite\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.456921: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGradV3\" device_type: \"GPU\" host_memory_arg: \"handle\" host_memory_arg: \"grad_handle\"')\r\n2017-04-25 18:19:08.456940: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ApplyAdam\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.457066: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGrad\" device_type: \"GPU\" host_memory_arg: \"handle\" host_memory_arg: \"grad_handle\"')\r\n2017-04-25 18:19:08.457089: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Softplus\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.457108: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Softplus\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.457125: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGradV3\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.457140: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGradV2\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.457186: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayV3\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.457283: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayV2\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.457302: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TileGrad\" device_type: \"CPU\" host_memory_arg: \"multiples\"')\r\n2017-04-25 18:19:08.457322: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGather\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.457341: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGather\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.457378: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGather\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QUINT8 } } }')\r\n2017-04-25 18:19:08.457401: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGather\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QINT8 } } }')\r\n2017-04-25 18:19:08.457480: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGather\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QINT32 } } }')\r\n2017-04-25 18:19:08.457501: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayGather\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_BFLOAT16 } } }')\r\n2017-04-25 18:19:08.457594: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"LogicalAnd\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.457640: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Exp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.457659: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArraySizeV3\" device_type: \"GPU\" host_memory_arg: \"handle\" host_memory_arg: \"size\"')\r\n2017-04-25 18:19:08.457804: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Tile\" device_type: \"CPU\" constraint { name: \"Tmultiples\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"multiples\"')\r\n2017-04-25 18:19:08.457828: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TopK\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.457848: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TopK\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.457871: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_HALF } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.457896: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_HALF } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.458022: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.458047: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.458071: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.458095: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.458247: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Pow\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.458274: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceApplyCenteredRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"var\" host_memory_arg: \"mg\" host_memory_arg: \"ms\" host_memory_arg: \"mom\"')\r\n2017-04-25 18:19:08.458296: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayReadV3\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.458316: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayReadV3\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.458439: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceApplyRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"var\" host_memory_arg: \"ms\" host_memory_arg: \"mom\"')\r\n2017-04-25 18:19:08.458478: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"LoopCond\" device_type: \"GPU\" host_memory_arg: \"input\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.458495: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Variable\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.458516: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceApplyProximalAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"var\" host_memory_arg: \"accum\"')\r\n2017-04-25 18:19:08.458538: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceApplyProximalAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } host_memory_arg: \"var\" host_memory_arg: \"accum\"')\r\n2017-04-25 18:19:08.458747: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SplitV\" device_type: \"CPU\" constraint { name: \"Tlen\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"size_splits\" host_memory_arg: \"split_dim\"')\r\n2017-04-25 18:19:08.458872: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SplitV\" device_type: \"CPU\" constraint { name: \"Tlen\" allowed_values { list { type: DT_INT64 } } } constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"size_splits\" host_memory_arg: \"split_dim\"')\r\n2017-04-25 18:19:08.459022: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SplitV\" device_type: \"CPU\" constraint { name: \"Tlen\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"size_splits\" host_memory_arg: \"split_dim\"')\r\n2017-04-25 18:19:08.459209: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SplitV\" device_type: \"CPU\" constraint { name: \"Tlen\" allowed_values { list { type: DT_INT64 } } } constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"size_splits\" host_memory_arg: \"split_dim\"')\r\n2017-04-25 18:19:08.459237: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SplitV\" device_type: \"CPU\" constraint { name: \"Tlen\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"T\" allowed_values { list { type: DT_BFLOAT16 } } } host_memory_arg: \"size_splits\" host_memory_arg: \"split_dim\"')\r\n2017-04-25 18:19:08.459361: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SplitV\" device_type: \"CPU\" constraint { name: \"Tlen\" allowed_values { list { type: DT_INT64 } } } constraint { name: \"T\" allowed_values { list { type: DT_BFLOAT16 } } } host_memory_arg: \"size_splits\" host_memory_arg: \"split_dim\"')\r\n2017-04-25 18:19:08.459512: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceApplyAdam\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"var\" host_memory_arg: \"m\" host_memory_arg: \"v\"')\r\n2017-04-25 18:19:08.459645: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QueueSize\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.459665: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"BiasAddV1\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.459684: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"BiasAddV1\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.459723: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_HALF } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.459842: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_HALF } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.459867: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.459946: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.460054: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.460306: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.460357: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StackClose\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.460379: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Maximum\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.460439: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyAdadelta\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.460704: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyAdadelta\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.460732: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyMomentum\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.460755: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyMomentum\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.460828: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterUpdate\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.461054: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterUpdate\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.461081: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterUpdate\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.461103: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ScatterUpdate\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.461126: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyAdadelta\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.461255: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyAdadelta\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.461278: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StackPush\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.461299: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StackPush\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"handle\" host_memory_arg: \"elem\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.461320: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StackPush\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_BOOL } } } host_memory_arg: \"handle\" host_memory_arg: \"elem\" host_memory_arg: \"output\"')\r\n2017-04-25 18:19:08.461451: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ApplyMomentum\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.461475: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyFtrl\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.461499: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyFtrl\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.461610: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceApplyFtrl\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"var\" host_memory_arg: \"accum\" host_memory_arg: \"linear\"')\r\n2017-04-25 18:19:08.461679: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ApplyAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.461699: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ApplyFtrl\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.461762: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyAdagradDA\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"var\" host_memory_arg: \"gradient_accumulator\" host_memory_arg: \"gradient_squared_accumulator\"')\r\n2017-04-25 18:19:08.461793: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyAdagradDA\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } } host_memory_arg: \"var\" host_memory_arg: \"gradient_accumulator\" host_memory_arg: \"gradient_squared_accumulator\"')\r\n2017-04-25 18:19:08.461868: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyAdagradDA\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"var\" host_memory_arg: \"gradient_accumulator\" host_memory_arg: \"gradient_squared_accumulator\"')\r\n2017-04-25 18:19:08.461896: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyAdagradDA\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } } host_memory_arg: \"var\" host_memory_arg: \"gradient_accumulator\" host_memory_arg: \"gradient_squared_accumulator\"')\r\n2017-04-25 18:19:08.462044: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArraySize\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.462124: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"MaxPoolGradGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.462146: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"MaxPoolGradGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.462211: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyProximalAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.462236: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyProximalAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.462395: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyProximalAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.462423: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyProximalAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.462447: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceApplyAdagradDA\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"var\" host_memory_arg: \"gradient_accumulator\" host_memory_arg: \"gradient_squared_accumulator\"')\r\n2017-04-25 18:19:08.462607: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceApplyAdagradDA\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } host_memory_arg: \"var\" host_memory_arg: \"gradient_accumulator\" host_memory_arg: \"gradient_squared_accumulator\"')\r\n2017-04-25 18:19:08.462708: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Tanh\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.462744: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Inv\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.462761: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Squeeze\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.462779: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ApplyAdagradDA\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.462924: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ApplyAdagradDA\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } }')\r\n2017-04-25 18:19:08.462947: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayRead\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.462967: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayRead\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.462984: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Enter\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.463003: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceApplyAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"var\" host_memory_arg: \"accum\"')\r\n2017-04-25 18:19:08.463047: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyProximalGradientDescent\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.463166: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyProximalGradientDescent\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.463193: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyProximalGradientDescent\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.463264: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyProximalGradientDescent\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.463373: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"InvertPermutation\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.463398: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyProximalGradientDescent\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.463423: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyProximalGradientDescent\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.463518: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyProximalGradientDescent\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.463616: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SparseApplyProximalGradientDescent\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.463639: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ApplyProximalGradientDescent\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.463677: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ApplyProximalGradientDescent\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } }')\r\n2017-04-25 18:19:08.463716: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Exit\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.463798: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QueueDequeueManyV2\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.463819: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayScatter\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.463839: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayScatter\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.463879: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"MirrorPadGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tpaddings\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"paddings\"')\r\n2017-04-25 18:19:08.463921: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"MirrorPadGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tpaddings\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"paddings\"')\r\n2017-04-25 18:19:08.464117: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceApplyAdadelta\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"var\" host_memory_arg: \"accum\" host_memory_arg: \"accum_update\"')\r\n2017-04-25 18:19:08.464154: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"GetSessionHandle\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.464174: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcatV3\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.464195: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcatV3\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.464343: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcatV3\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QUINT8 } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.464367: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcatV3\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QINT8 } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.464388: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcatV3\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_QINT32 } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.464408: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArrayConcatV3\" device_type: \"CPU\" constraint { name: \"dtype\" allowed_values { list { type: DT_BFLOAT16 } } } host_memory_arg: \"lengths\" host_memory_arg: \"handle\"')\r\n2017-04-25 18:19:08.464548: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ApplyCenteredRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.464567: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QueueSizeV2\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.464604: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceApplyGradientDescent\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"var\"')\r\n2017-04-25 18:19:08.464626: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SqrtGrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.464642: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"_HostSend\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.464661: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Conv2D\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.464735: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResizeBilinear\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"size\"')\r\n2017-04-25 18:19:08.464756: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResizeBilinear\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"size\"')\r\n2017-04-25 18:19:08.464774: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TemporaryVariable\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.464792: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ExpandDims\" device_type: \"CPU\" constraint { name: \"Tdim\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"dim\"')\r\n2017-04-25 18:19:08.464844: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"DestroyTemporaryVariable\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.464865: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TruncateDiv\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_UINT8 } } }')\r\n2017-04-25 18:19:08.464954: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ApplyProximalAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.464976: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ApplyProximalAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } }')\r\n2017-04-25 18:19:08.464992: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ShardedFilename\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.465013: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"BroadcastArgs\" device_type: \"GPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"s0\" host_memory_arg: \"s1\" host_memory_arg: \"r0\"')\r\n2017-04-25 18:19:08.465053: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Split\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"split_dim\"')\r\n2017-04-25 18:19:08.465155: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Split\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"split_dim\"')\r\n2017-04-25 18:19:08.465176: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Split\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_QUINT8 } } } host_memory_arg: \"split_dim\"')\r\n2017-04-25 18:19:08.465193: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Where\" device_type: \"CPU\"')\r\n2017-04-25 18:19:08.465299: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"SoftmaxCrossEntropyWithLogits\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.465323: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StridedSlice\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"begin\" host_memory_arg: \"end\" host_memory_arg: \"strides\"')\r\n2017-04-25 18:19:08.465475: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StridedSlice\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } host_memory_arg: \"begin\" host_memory_arg: \"end\" host_memory_arg: \"strides\"')\r\n2017-04-25 18:19:08.465501: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"StridedSlice\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_BFLOAT16 } } } host_memory_arg: \"begin\" host_memory_arg: \"end\" host_memory_arg: \"strides\"')\r\n2017-04-25 18:19:08.465527: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Transpose\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_INT32 } } } constraint { name: \"Tperm\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"perm\"')\r\n2017-04-25 18:19:08.465550: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Transpose\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tperm\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"perm\"')\r\n2017-04-25 18:19:08.465676: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"Transpose\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_BFLOAT16 } } } constraint { name: \"Tperm\" allowed_values { list { type: DT_INT32 } } } host_memory_arg: \"perm\"')\r\n2017-04-25 18:19:08.465702: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.465726: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyAdagrad\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.465868: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyCenteredRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_HALF } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.465895: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyCenteredRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_HALF } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.465919: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyCenteredRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.465973: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyCenteredRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.466096: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyCenteredRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT32 } } }')\r\n2017-04-25 18:19:08.466123: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ResourceSparseApplyCenteredRMSProp\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_DOUBLE } } } constraint { name: \"Tindices\" allowed_values { list { type: DT_INT64 } } }')\r\n2017-04-25 18:19:08.466248: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"ApplyGradientDescent\" device_type: \"CPU\" constraint { name: \"T\" allowed_values { list { type: DT_FLOAT } } }')\r\n2017-04-25 18:19:08.466276: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"QuantizedBatchNormWithGlobalNormalization\" device_type: \"CPU\" constraint { name: \"Tinput\" allowed_values { list { type: DT_QUINT8 } } } constraint { name: \"out_type\" allowed_values { list { type: DT_QINT32 } } }')\r\n2017-04-25 18:19:08.466431: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"TensorArraySize\" device_type: \"GPU\" host_memory_arg: \"handle\" host_memory_arg: \"size\"')\r\n2017-04-25 18:19:08.466453: I tensorflow/core/framework/op_kernel.cc:996] OpKernel ('op: \"DeleteSessionTensor\" device_type: \"GPU\" host_memory_arg: \"handle\"')\r\n</pre>", "comments": ["I apologize but I am having a hard time understanding what the problem is, where the problem is, and what version it affects. Please resubmit and pay attention to the issue template (https://github.com/tensorflow/tensorflow/issues/new) . Please provide all the information it asks. Thank you."]}, {"number": 9442, "title": "No 1-dimensional max pool?", "body": "It seems that there is no 1-dimensional max pool.  \r\n\r\nI'm using one for my own projects.  Should I submit a pull request?", "comments": ["Yep, a pull request would be welcome.  Please do it in pure Python, though: just a thin `tf.nn.max_pool1d` wrapper calling down to `tf.nn.max_pool`.", "Will do.", "Hmm, there's already a `max_pooling1d` in layers.  If you make a non-layer `max_pool1d`, it might be good to share code with the layer.  That is, you'd pull the layer code out into a separate function, and then make the layer code use the function.", "@girving \r\nThat's interesting.   I submitted a pull request for the first change.  I wasn't sure if it was a good idea to touch the layers bit, but feel free to edit.\r\n\r\nI also noticed this on line 784 of nn_ops:\r\n\r\n    pooling_ops = {(\"MAX\", 1): max_pool,                                                                           \r\n                   (\"MAX\", 2): max_pool,                                                                           \r\n                   (\"MAX\", 3): max_pool3d,  # pylint: disable=undefined-variable                                   \r\n                   (\"AVG\", 1): avg_pool,                                                                           \r\n                   (\"AVG\", 2): avg_pool,                                                                           \r\n                   (\"AVG\", 3): avg_pool3d,  # pylint: disable=undefined-variable                                   \r\n                  }\r\n\r\nThis is suggesting that max_pool functions as for dim 1, but I don't think this will work.\r\n\r\n", "Hmm, actually that looks like it works great.  Note that `expand_dims` and `squeeze` that happen if `num_spatial_dims == 1`.  I don't think your PR will be necessary.", "Can you verify that it works for you?", "@girving \r\n\r\nThat's fine.  But note that there's also a generic N-dim convolution function, as well as specialized 1,2,3 dim versions.\r\n\r\nIt's up to you.", "The generic form is newer than the specialized versions, and I think it's nicer.", "@girving \r\n\r\nGot it.  Thanks.", "there https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/pooling.py\r\ngiven a function : pooling1d()"]}, {"number": 9441, "title": "Non deterministic behaviour of tf.train.batch in case the number of threads is higher than 1.", "body": "This is related to the StackOverflow question: http://stackoverflow.com/questions/43612366/tf-train-batch-output-is-not-deterministic/43613376#43613376\r\n\r\nThe thread owner creates a batch with the following code:\r\n```\r\nBatchedInputs = tf.train.batch(\r\n  Inputs,\r\n  batch_size=64,\r\n  num_threads=8,\r\n  capacity=500 + 3 * 64)\r\n``` \r\n\r\nAnd he noticed that created batches are not in every run the same. They are quite similar, but sometimes the inputs are mixed or some are missing.\r\nAccording to the answer on StackOverflow reducing the number of pre-fetch threads to 1 is solving this issue.\r\n\r\nSince this could be an issue for test-set evaluation (where everyone would expect the exact same outcome for every run), I wonder if this is the intended behaviour?\r\nIt should at least be added to the documentation for `tf.train.batch` that the generated batches can be non-deterministic.\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nWindows 10\r\n- **TensorFlow installed from (source or binary)**:\r\nBinary (pip3)\r\n- **TensorFlow version (use command below)**:\r\n1.1.0\r\n- **Bazel version (if compiling from source)**:\r\nnon\r\n- **CUDA/cuDNN version**:\r\nCUDA 8.0, cuDNN 5.1\r\n- **GPU model and memory**:\r\nGTX680\r\n- **Exact command to reproduce**:\r\nSee above.\r\n\r\n### Describe the problem\r\nsee above\r\n\r\n### Source code / logs\r\n-", "comments": ["I've added it to our docs fixit event list of documentation items to fix. Thanks for the contribution."]}, {"number": 9440, "title": "Loading sklearn model in Java. Model created with DNNClassifier in python", "body": "The goal is to open in Java a model created/trained in phyton with tensorflow.contrib.learn.learn.DNNClassifier.\r\n\r\nAt the moment the main issue is to know the correct name of the \"Operation\" to give in java on the session runner method.\r\n\r\nI have this test code in python :\r\n\r\n`from __future__ import division, print_function, absolute_import\r\nimport tensorflow as tf\r\nimport pandas as pd\r\nimport tensorflow.contrib.learn as learn\r\nimport numpy as np\r\nfrom sklearn import metrics\r\nfrom sklearn.cross_validation import train_test_split\r\nfrom tensorflow.contrib import layers\r\nfrom tensorflow.contrib.learn.python.learn.utils import input_fn_utils\r\nfrom tensorflow.python.ops import array_ops\r\nfrom tensorflow.python.framework import dtypes\r\nfrom tensorflow.python.util.compat import as_text\r\n\r\nprint(tf.VERSION)\r\n\r\ndf = pd.read_csv('../NNNormalizeData-out.csv')\r\n\r\ninputs = []\r\ntarget = []\r\n\r\ny=0;    \r\nfor x in df.columns:\r\n    if y != 35 :\r\n        #print(\"added %d\" %y)\r\n        inputs.append(x)\r\n    else :\r\n        target.append(x)\r\n    y+=1\r\n\r\ntotal_inputs,total_output = df.as_matrix(inputs).astype(np.float32),df.as_matrix([target]).astype(np.int32)\r\n\r\ntrain_inputs, test_inputs, train_output, test_output = train_test_split(total_inputs, total_output, test_size=0.2, random_state=42)\r\n\r\n# Define inputs format\r\nfeature_columns = [tf.contrib.layers.real_valued_column(\"\",dimension=train_inputs.shape[1],dtype=tf.float32)]\r\n#target_column = [tf.contrib.layers.real_valued_column(\"output\", dimension=train_output.shape[1])]\r\n\r\nclassifier = learn.DNNClassifier(hidden_units=[10, 20, 5], n_classes=5\r\n                                 ,feature_columns=feature_columns)\r\n\r\nclassifier.fit(train_inputs, train_output, steps=100)\r\n\r\n# Save Model into saved_model.pbtxt file (possible to Load in Java)\r\ntfrecord_serving_input_fn = tf.contrib.learn.build_parsing_serving_input_fn(layers.create_feature_spec_for_parsing(feature_columns))  \r\nclassifier.export_savedmodel(export_dir_base=\"test\", serving_input_fn = tfrecord_serving_input_fn,as_text=True)\r\n\r\n\r\n# Measure accuracy\r\npred = list(classifier.predict(test_inputs, as_iterable=True))\r\nscore = metrics.accuracy_score(test_output, pred)\r\nprint(\"Final score: {}\".format(score))\r\n\r\n# test individual samples \r\nsample_1 = np.array( [[0.37671986791414125,0.28395908337619136,-0.0966095873607713,-1.0,0.06891621389763203,-0.09716678086712205,0.726029084013637,4.984689881073479E-4,-0.30296253267499107,-0.16192917054985334,0.04820256230479658,0.4951319883569152,0.5269983894210499,-0.2560313828048315,-0.3710980821053321,-0.4845867212612598,-0.8647234314469595,-0.6491591208322198,-1.0,-0.5004549422844073,-0.9880910165770813,0.5540293108747256,0.5625990251930839,0.7420121698556554,0.5445551415657979,0.4644276850235627,0.7316976292340245,0.636690006814346,0.16486621649984112,-0.0466018967678159,0.5261100063227044,0.6256168612312738,-0.544295484930702,0.379125782517193,0.6959368575211544]], dtype=float)\r\nsample_2 = np.array( [[1.0,0.7982741870963959,1.0,-0.46270838239235024,0.040320274521029376,0.443451913224413,-1.0,1.0,1.0,-1.0,0.36689718911339564,-0.13577379160035796,-0.5162916256414466,-0.03373651520104648,1.0,1.0,1.0,1.0,0.786999801054777,-0.43856035121103853,-0.8199093927945158,1.0,-1.0,-1.0,-0.1134921695894473,-1.0,0.6420892436196663,0.7871737734493178,1.0,0.6501788845358409,1.0,1.0,1.0,-0.17586627413625022,0.8817194210401085]], dtype=float)\r\n\r\npred = list(classifier.predict(sample_2, as_iterable=True))\r\nprint(\"Prediction for sample_1 is:{} \".format(pred))\r\n\r\npred = list(classifier.predict_proba(sample_2, as_iterable=True))\r\nprint(\"Prediction for sample_2 is:{} \".format(pred))`\r\n____________________________________________________________________________________________________________\r\nA model_saved.pbtxt file is created.\r\n\r\nI try to load this model in Java with the following code :\r\n\r\n` public class HelloTF {\r\n    public static void main(String[] args) throws Exception {\r\n        SavedModelBundle bundle=SavedModelBundle.load(\"/java/workspace/APIJavaSampleCode/tfModels/dnn/ModelSave\",\"serve\");\r\n        Session s = bundle.session();\r\n\r\n        double[] inputDouble = {1.0,0.7982741870963959,1.0,-0.46270838239235024,0.040320274521029376,0.443451913224413,-1.0,1.0,1.0,-1.0,0.36689718911339564,-0.13577379160035796,-0.5162916256414466,-0.03373651520104648,1.0,1.0,1.0,1.0,0.786999801054777,-0.43856035121103853,-0.8199093927945158,1.0,-1.0,-1.0,-0.1134921695894473,-1.0,0.6420892436196663,0.7871737734493178,1.0,0.6501788845358409,1.0,1.0,1.0,-0.17586627413625022,0.8817194210401085};\r\n        float [] inputfloat=new float[inputDouble.length];\r\n        for(int i=0;i<inputfloat.length;i++)\r\n        {\r\n            inputfloat[i]=(float)inputDouble[i];\r\n        }\r\n        Tensor inputTensor = Tensor.create(new long[] {35}, FloatBuffer.wrap(inputfloat) );\r\n\r\n        Tensor result = s.runner()\r\n                .feed(\"input_example_tensor\", inputTensor)\r\n                .fetch(\"dnn/multi_class_head/predictions/probabilities\")\r\n                .run().get(0);\r\n\r\n\r\n         float[] m = new float[5];\r\n         float[] vector = result.copyTo(m);\r\n         float maxVal = 0;\r\n         int inc = 0;\r\n         int predict = -1;\r\n         for(float val : vector) \r\n         {\r\n             System.out.println(val+\"  \");\r\n             if(val > maxVal) {\r\n                 predict = inc;\r\n                 maxVal = val;\r\n             }\r\n             inc++;\r\n         }\r\n         System.out.println(predict);\r\n\r\n\r\n\r\n    }`\r\n\r\n\r\nI get the error on the .run().get(0); line :\r\n\r\n`Exception in thread \"main\" org.tensorflow.TensorFlowException: Output 0 of type float does not match declared output type string for node _recv_input_example_tensor_0 = _Recv[_output_shapes=[[-1]], client_terminated=true, recv_device=\"/job:localhost/replica:0/task:0/cpu:0\", send_device=\"/job:localhost/replica:0/task:0/cpu:0\", send_device_incarnation=3663984897684684554, tensor_name=\"input_example_tensor:0\", tensor_type=DT_STRING, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()\r\n    at org.tensorflow.Session.run(Native Method)\r\n    at org.tensorflow.Session.access$100(Session.java:48)\r\n    at org.tensorflow.Session$Runner.runHelper(Session.java:285)\r\n    at org.tensorflow.Session$Runner.run(Session.java:235)\r\n    at tensorflow.HelloTF.main(HelloTF.java:35)`\r\n\r\nIt seams like the \"runner\" is expecting strings instead of floats array ... (?)\r\n\r\nI suspect the \"operation\" names (that were extracted looking into the saved_model.pbtxt)are not correct in the lines :\r\n\r\n`  .feed(\"input_example_tensor\", inputTensor)\r\n                .fetch(\"dnn/multi_class_head/predictions/probabilities\")`\r\n\r\nSome help would be appreciated since it is really important to execute in \"real-time\" the models in Java. \r\n\r\n ", "comments": ["This question is better asked on  [StackOverflow](http://stackoverflow.com/questions/tagged/tensorflow) since it is not a  bug or feature request. There is also a larger community that reads questions there. Thanks!", "I have put it there also :\r\n\r\nhttp://stackoverflow.com/questions/43598953/loading-sklearn-model-in-java-model-created-with-dnnclassifier-in-python/43599728#43599728\r\n\r\n"]}, {"number": 9439, "title": "small error in DynamicAttentionWrapper", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n\r\nNot relevant\r\n\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\n\r\nNot relevant\r\n\r\n- **TensorFlow installed from (source or binary)**:\r\n\r\nNot relevant\r\n\r\n- **TensorFlow version (use command below)**:\r\n\r\n1.1\r\n\r\n- **Bazel version (if compiling from source)**:\r\n\r\nNot relevant\r\n\r\n- **CUDA/cuDNN version**:\r\n\r\nNot relevant\r\n\r\n- **GPU model and memory**:\r\n\r\nNot relevant\r\n\r\n- **Exact command to reproduce**:\r\n\r\nNot relevant\r\n\r\n### Describe the problem\r\n\r\nline 465 in tensorflow/tensorflow/contrib/seq2seq/python/ops/dynamic_attention_wrapper.py says \r\n\r\n'''\r\nif not callable(cell_input_fn):. \r\n'''\r\nI think it should say \r\n\r\n'''\r\nif not callable(probability_fn):\r\n'''\r\n\r\n### Source code / logs\r\n\r\nNone", "comments": ["The attention wrapper has been rewritten in master branch, there is no dynamic_attention_wrapper.py any more. \r\nAnyway, I think this typo was fixed in commit https://github.com/tensorflow/tensorflow/commit/0557e8f90c1a2f027f4561c70558c6c836138058. You can update your TensorFlow and check it.", "@vrenkens, thanks for submitting this, but it looks like it is already fixed. Closing for now. Let us know if upgrading doesn't resolve your issues."]}, {"number": 9438, "title": "Delete an unnecessary include and define", "body": "", "comments": ["Can one of the admins verify this patch?", "Thanks for the PR!  I'm not entirely sure this is \"safe\" to do given the way Eigen works -- that define needs to be before the first include of the Tensor class so that the threaded implementations in Eigen are used.  Looking at some of the includers of this file, they are not defining EIGEN_USE_THREADS at the very beginning.\r\n\r\ncc @rmlarsen \r\n\r\nI have two suggestions:\r\n\r\n1. Find all cc files that include linalg_ops_common and add the #define at the top, so you can remove the need for the define in the header file.  This will take some work because you need to add the EIGEN_USE_THREADS in a bunch of places.\r\n\r\n2. Leave the code as is -- less ideal since I think it's bad practice to put this define in a header file, but certainly less work :)\r\n", "(For example, other ops that use Eigen typically define this field at the top of the implementation, like https://github.com/tensorflow/tensorflow/blob/754048a0453a04a761e112ae5d99c149eb9910dd/tensorflow/core/kernels/bias_op.cc#L18).", "Hello Vijay,\r\n\r\nI agree with you that defining `EIGEN_USE_THREADS` before including \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\" is so that the multi-threaded implementations of Eigen-unsupported Tensor ops will be enabled. In this case, it's a little confusing to have that preprocessor define in there, and an include of the Eigen-unsupported Tensor library, because the linalg ops don't actually use the Tensor library; they are using the Eigen Matrix library. So, effectively the presence of the define and include is unnecessarily slowing down compilation of linalg ops.\r\n\r\nDaniel", "Thanks for the clarification!  Since @rmlarsen has written most of this code, I'll let him take over :)", "@dtrebbien This goes back to before I touched this code and must have been copied from some generic op template back when the world was young. Thanks for the cleanup. You are correct that these are not needed for the linear algebra ops.", "@tensorflow-jenkins test this please"]}, {"number": 9437, "title": "Docs generation is broken in Python 3.5", "body": "### System information\r\n- **Have I written custom code**: No\r\n- **OS Platform and Distribution**: Ubuntu 16.04\r\n- **TensorFlow installed from**: Source\r\n- **TensorFlow version**: b6bafadd51a471daa7157f515598e08e8f9f1611\r\n- **Bazel version**: 0.4.5\r\n- **Exact command to reproduce**: `bazel run -- //tensorflow/tools/docs:generate --src_dir=tensorflow/docs_src --output_dir=/tmp/tf_docs`\r\n\r\n### Describe the problem\r\nProblem 1: Since python 3.5, `namedtuple` objects have no `__dict__` property. See [here](http://stackoverflow.com/questions/34166469/did-something-about-namedtuple-change-in-3-5-1) and [here](http://bugs.python.org/issue24931) for more details. This problem is easily fixed by changing all instances of `h3.format(**info.__dict__)` to `h3.format(**info._asdict())` in [`pretty_docs.py`](https://github.com/tensorflow/tensorflow/blob/b6bafadd51a471daa7157f515598e08e8f9f1611/tensorflow/tools/docs/pretty_docs.py).\r\n\r\nProblem 2: The codegen library used by the docs generator is 5 years old and doesn't work with python 3.5 (the problem I'm getting is identical to https://github.com/berkerpeksag/astor/issues/48 and https://github.com/alecthomas/importmagic/issues/25).\r\n\r\n### Source code / logs\r\nInitial stack trace:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/amcrae/.cache/bazel/_bazel_amcrae/c5da01ed82406ffc0f71b490859f88cc/execroot/tf_docs/bazel-out/local-py3-opt/bin/tensorflow/tools/docs/generate.runfiles/org_tensorflow/tensorflow/tools/docs/generate.py\", line 49, in <module>\r\n    sys.exit(doc_generator.build(flags))\r\n  File \"/home/amcrae/.cache/bazel/_bazel_amcrae/c5da01ed82406ffc0f71b490859f88cc/execroot/tf_docs/bazel-out/local-py3-opt/bin/tensorflow/tools/docs/generate.runfiles/org_tensorflow/tensorflow/tools/docs/generate_lib.py\", line 473, in build\r\n    write_docs(output_dir, parser_config, yaml_toc=self.yaml_toc)\r\n  File \"/home/amcrae/.cache/bazel/_bazel_amcrae/c5da01ed82406ffc0f71b490859f88cc/execroot/tf_docs/bazel-out/local-py3-opt/bin/tensorflow/tools/docs/generate.runfiles/org_tensorflow/tensorflow/tools/docs/generate_lib.py\", line 127, in write_docs\r\n    f.write(pretty_docs.build_md_page(page_info))\r\n  File \"/home/amcrae/.cache/bazel/_bazel_amcrae/c5da01ed82406ffc0f71b490859f88cc/execroot/tf_docs/bazel-out/local-py3-opt/bin/tensorflow/tools/docs/generate.runfiles/org_tensorflow/tensorflow/tools/docs/pretty_docs.py\", line 39, in build_md_page\r\n    return _build_class_page(page_info)\r\n  File \"/home/amcrae/.cache/bazel/_bazel_amcrae/c5da01ed82406ffc0f71b490859f88cc/execroot/tf_docs/bazel-out/local-py3-opt/bin/tensorflow/tools/docs/generate.runfiles/org_tensorflow/tensorflow/tools/docs/pretty_docs.py\", line 126, in _build_class_page\r\n    parts.append(h3.format(**method_info.__dict__))\r\nAttributeError: '_MethodInfo' object has no attribute '__dict__'\r\nERROR: Non-zero return code '1' from command: Process exited with status 1.\r\n```\r\n\r\nStack trace after fixing dictionary problem:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/amcrae/.cache/bazel/_bazel_amcrae/c5da01ed82406ffc0f71b490859f88cc/execroot/tf_docs/bazel-out/local-py3-opt/bin/tensorflow/tools/docs/generate.runfiles/org_tensorflow/tensorflow/tools/docs/generate.py\", line 49, in <module>\r\n    sys.exit(doc_generator.build(flags))\r\n  File \"/home/amcrae/.cache/bazel/_bazel_amcrae/c5da01ed82406ffc0f71b490859f88cc/execroot/tf_docs/bazel-out/local-py3-opt/bin/tensorflow/tools/docs/generate.runfiles/org_tensorflow/tensorflow/tools/docs/generate_lib.py\", line 473, in build\r\n    write_docs(output_dir, parser_config, yaml_toc=self.yaml_toc)\r\n  File \"/home/amcrae/.cache/bazel/_bazel_amcrae/c5da01ed82406ffc0f71b490859f88cc/execroot/tf_docs/bazel-out/local-py3-opt/bin/tensorflow/tools/docs/generate.runfiles/org_tensorflow/tensorflow/tools/docs/generate_lib.py\", line 119, in write_docs\r\n    page_info = parser.docs_for_object(full_name, py_object, parser_config)\r\n  File \"/home/amcrae/.cache/bazel/_bazel_amcrae/c5da01ed82406ffc0f71b490859f88cc/execroot/tf_docs/bazel-out/local-py3-opt/bin/tensorflow/tools/docs/generate.runfiles/org_tensorflow/tensorflow/tools/docs/parser.py\", line 1201, in docs_for_object\r\n    page_info.set_signature(py_object, parser_config.reverse_index)\r\n  File \"/home/amcrae/.cache/bazel/_bazel_amcrae/c5da01ed82406ffc0f71b490859f88cc/execroot/tf_docs/bazel-out/local-py3-opt/bin/tensorflow/tools/docs/generate.runfiles/org_tensorflow/tensorflow/tools/docs/parser.py\", line 797, in set_signature\r\n    self._signature = _generate_signature(function, reverse_index)\r\n  File \"/home/amcrae/.cache/bazel/_bazel_amcrae/c5da01ed82406ffc0f71b490859f88cc/execroot/tf_docs/bazel-out/local-py3-opt/bin/tensorflow/tools/docs/generate.runfiles/org_tensorflow/tensorflow/tools/docs/parser.py\", line 638, in _generate_signature\r\n    default_text = codegen.to_source(ast_default)\r\n  File \"/home/amcrae/workspace/tf_docs/venv/lib/python3.5/site-packages/codegen.py\", line 68, in to_source\r\n    generator.visit(node)\r\n  File \"/usr/lib/python3.5/ast.py\", line 245, in visit\r\n    return visitor(node)\r\n  File \"/home/amcrae/workspace/tf_docs/venv/lib/python3.5/site-packages/codegen.py\", line 386, in visit_Call\r\n    if node.starargs is not None:\r\nAttributeError: 'Call' object has no attribute 'starargs'\r\nERROR: Non-zero return code '1' from command: Process exited with status 1.\r\n```\r\n\r\nUPDATE: Command for fixing dictionary issue is \r\n```\r\nsed -i -e 's/__dict__/_asdict()/' tensorflow/tools/docs/pretty_docs.py\r\n```", "comments": ["@martinwicke, could you take a look?", "Yes, the doc generator does not work in python 3. Because of the many differences in (especially) `inspect`, we did not make the doc generator work for py3. It can be done -- but the issues you hit are not the only ones.\r\n\r\nReplacing `codegen` is probably also feasible, but I have not looked into it.\r\n\r\nIf someone spends the time to make it work for py3, I'd be happy about that. But it's not a priority for us.\r\n", "Closing since this is very low priority.  PRs welcome, though!", "Necessary changes to `codegen` is: https://github.com/andreif/codegen/pull/16.\r\nNot sure if the project is still maintained.\r\n\r\nAnother solution is to switch to https://github.com/berkerpeksag/astor which is a modern fork of codegen.", "Could anyone take a look at my PR?"]}, {"number": 9436, "title": "Python Configuration Error: 'PYTHON_BIN_PATH' environment variable is not set", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: N/A\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Mac OS X Sierra\r\n- **TensorFlow installed from (source or binary)**: N/A (compiling from HEAD)\r\n- **TensorFlow version (use command below)**: N/A (see above)\r\n- **Bazel version (if compiling from source)**: 0.4.5-homebrew\r\n- **CUDA/cuDNN version**: none (AMD GPU)\r\n- **GPU model and memory**: Radeon Pro 460\r\n- **Exact command to reproduce**:\r\n\r\n`sudo bazel build --config opt --copt=-msse4.1 --copt=-msse4.1 --copt=-mavx --copt=-mavx2 --copt=-mfma //tensorflow/tools/pip_package:build_pip_package`\r\n\r\n### Describe the problem\r\n\r\nTrying to build tensorflow from source (version installed via pip does not use some optimised CPU instructions), get the following error:\r\n\r\n\r\n```bash\r\n ~/workspace/tensorflow \ue0b0 \ue0a0 master \ue0b0 sudo bazel build --config opt --copt=-msse4.1 --copt=-msse4.1 --copt=-mavx --copt=-mavx2 --copt=-mfma //tensorflow/tools/pip_package:build_pip_package\r\nWARNING: Config values are not defined in any .rc file: opt\r\nERROR: /Users/kachkach/workspace/tensorflow/third_party/py/numpy/BUILD:11:1: no such package '@local_config_python//': Traceback (most recent call last):\r\n\tFile \"/Users/kachkach/workspace/tensorflow/third_party/py/python_configure.bzl\", line 180\r\n\t\t_create_python_repository(repository_ctx)\r\n\tFile \"/Users/kachkach/workspace/tensorflow/third_party/py/python_configure.bzl\", line 157, in _create_python_repository\r\n\t\t_get_env_var(repository_ctx, _PYTHON_BIN_PATH)\r\n\tFile \"/Users/kachkach/workspace/tensorflow/third_party/py/python_configure.bzl\", line 48, in _get_env_var\r\n\t\t_python_configure_fail(\"'%s' environment variable is no...)\r\n\tFile \"/Users/kachkach/workspace/tensorflow/third_party/py/python_configure.bzl\", line 36, in _python_configure_fail\r\n\t\tfail(\"\r\n%sPython Configuration Error:%...))\r\n\r\nPython Configuration Error: 'PYTHON_BIN_PATH' environment variable is not set\r\n and referenced by '//third_party/py/numpy:headers'.\r\nERROR: Analysis of target '//tensorflow/tools/pip_package:build_pip_package' failed; build aborted.\r\n```\r\nNote that I used `which python3` to find where my Python binary is located, and exported that as PYTHON_BIN_PATH, but it does not seem to help.", "comments": ["Also (unrelated), the `tools/tf_env_collect.sh` script does not work::\r\n\r\n```bash\r\nbash tools/tf_env_collect.sh\r\nCollecting system information...\r\ncat: /proc/1/cgroup: No such file or directory\r\ntools/tf_env_collect.sh: line 31: syntax error near unexpected token `>'\r\ntools/tf_env_collect.sh: line 31: `c++ --version &>> $OUTPUT_FILE'\r\n```", "Did you run `configure`?", "@girving I had the same error when I'm build tensorflow-serving.And I've configured the tensorflow alreay.", "@caisq Is `tf_env_collect` supposed to work on Mac?  It appears Linux only since it has an unguarded reference to `/proc`.", "cc @aselle (author) for whether `tf_env_collect.sh` is supposed to work on Mac.", "I am getting the same error trying to run command 'bazel build --config opt tensorflow/examples/image_retraining:retrain' Error:  'PYTHON_BIN_PATH' environment variable is not set and referenced by '//util/python:python_headers'.", "I think this is a recent problem with the current master's source codes. I tested the compilation of Tensorflow serving both locally and in docker. Both environments gave me the same error \"Python Configuration Error: 'PYTHON_BIN_PATH' environment variable is not set\". Of course, I set the configure before the build. In fact, I was able to successfully compile Tensorflow under the same environment with the same configuration a few weeks ago and there was no problem. So this must be a recent issue.\r\n\r\nThe full error message is:\r\n`ERROR: /root/.cache/bazel/_bazel_root/f8d1071c69ea316497c31e40fe01608c/external/org_tensorflow/util/python/BUILD:5:1: no such package '@local_config_python//': Traceback (most recent call last):\r\n\tFile \"/root/.cache/bazel/_bazel_root/f8d1071c69ea316497c31e40fe01608c/external/org_tensorflow/third_party/py/python_configure.bzl\", line 180\r\n\t\t_create_python_repository(repository_ctx)\r\n\tFile \"/root/.cache/bazel/_bazel_root/f8d1071c69ea316497c31e40fe01608c/external/org_tensorflow/third_party/py/python_configure.bzl\", line 157, in _create_python_repository\r\n\t\t_get_env_var(repository_ctx, _PYTHON_BIN_PATH)\r\n\tFile \"/root/.cache/bazel/_bazel_root/f8d1071c69ea316497c31e40fe01608c/external/org_tensorflow/third_party/py/python_configure.bzl\", line 48, in _get_env_var\r\n\t\t_python_configure_fail(\"'%s' environment variable is no...)\r\n\tFile \"/root/.cache/bazel/_bazel_root/f8d1071c69ea316497c31e40fe01608c/external/org_tensorflow/third_party/py/python_configure.bzl\", line 36, in _python_configure_fail\r\n\t\tfail(\"\r\n%sPython Configuration Error:%...))\r\n\r\nPython Configuration Error: 'PYTHON_BIN_PATH' environment variable is not set`", "@jart Do you know what the issue might be?", "I just ran into this issue as well. I am compiling in an Ubuntu 14.04 Docker container (using the standard Dockerfile.devel image). ", "Just want to make people aware of that you don't need to wait for this to be solved if you don't necessarily need to work with the latest RC version. I have just tested it with Tensorflow serving, and it works with its latest release (tag 0.5.1). You can simply clone that tag by running.\r\n`git clone -b 0.5.1 --recurse-submodules https://github.com/tensorflow/serving`\r\nFor anyone who are using Tensorflow itself, you could do similar things such as:\r\n`git clone -b v1.1.0 https://github.com/tensorflow/tensorflow`\r\nI haven't tested it for Tensorflow, if it still doesn't work, you could switch to any earlier release which is over [here](https://github.com/tensorflow/tensorflow/tags).\r\n", "Adding to @shadowfury330's point, if you have TF Serving source checked out at `master` already, you can switch to the latest release by running: \r\n```\r\ngit checkout 0.5.1\r\ngit submodule update\r\n```\r\nYou should then be able to run bazel successfully.", "@girving : Turns out I forgot to run `configure` on this instance (it was freshly cloned from HEAD), that fixed it for me but I'm leaving this open as some people seem to be having this problem even after running configure.", "<del>I think I finally found out the problem that caused my issue. So the problem is Anaconda</del>. Thanks to @MtDersvan and @Shoshin23 ,  It seems that the problem doesn't only apply to Anaconda. But no matter what caused it, the problem seems to be that the building system did not set the path variable PYTHON_BIN_PATH correctly via the \".configure\" file even though it seems to detect your path without any problem. \r\n\r\nIn order to solve it, you could simply try to export the variable it needed before the build with:\r\n`export PYTHON_BIN_PATH = /home/ubuntu/anaconda3/bin/python` or wherever your python binary is placed.\r\nHopefully, it can help some of you guys.", "@hantingxie I have the same problem, but I'm building tensorflow-serving using standard Dockerfile.devel image as @neocortical did. So it might not be specifically only Anaconda related problem. Also, it worked for me just couple weeks before with the same configuration. ", "@MtDersvan Good to hear that you solved it. I agree with you, this issue might be caused by several different reasons. Anaconda can be one of them. ", "Hi, it seems to be working fine for me with @hantingxie 's solution. For some reason desipte ./configure recognizing my default path I still had to manually set my PYTHON_BIN_PATH. And yes, this is happening in the default dockerfile that's mentioned in the tensorflow serving docs.", "There's a possibility this is a bug upstream in Bazel. Maybe `--action_env` is not being passed along to repository_ctx properly.", "@nlopezgi should know about this issue.", "For anyone who's still getting this error:\r\nadd `--action_env=PYTHON_BIN_PATH=/usr/bin/python` to `~/.bazelrc` as per [https://bazel.build/designs/2016/06/21/environment.html](url)\r\nIf you're building from your own Dockerfile, adding `ENV PYTHON_BIN_PATH=/usr/bin/python` will be adequate.", "Might be unrelated for many, but this is how I circumvented the error. I am installing in a virtual env. \r\n\r\nI installed the virtualenv library in python3.5. Upon making the env, I point to the binaries for python3.6. This gives me the error.\r\n\r\nNow I solved the problem as follows. I install virtualenv for python3.6 and use that to make an env. In this env, this above error does not occur.", "I solve the same problem by adding the PYTHON_BIN_PATH to \" ~/.bash_profile \".\r\n\r\nIf you don't have a Environment Parameter named PYTHON_BIN_PATH, the  error msg will be ['PYTHON_BIN_PATH' environment variable is not set], if you already have one but not correct, the error msg would be [ PYTHON_BIN_PATH is not executable ]. \r\n\r\nNote that the PYTHON_BIN_PATH should specify to \".../bin/python\" instead of \".../bin \", the latter would raise the [ not executable ] error.", "Since https://github.com/tensorflow/tensorflow/pull/14467 it is again required to have the env variable PYTHON_BIN_PATH explicitly set, run configure script to set it, or to set it via --action_env.", "yeah, you are right. I'v found that later. If run configure, both problem I\nmentioned above should not happen.\n\n2017-12-05 23:31 GMT+08:00 Nicolas Lopez <notifications@github.com>:\n\n> Since #14467 <https://github.com/tensorflow/tensorflow/pull/14467> it is\n> again required to have the env variable PYTHON_BIN_PATH explicitly set, run\n> configure script to set it, or to set it via --action_env.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tensorflow/tensorflow/issues/9436#issuecomment-349337565>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ASdZr8UEiLTohC88z7iyqVOrxAQYPADYks5s9WG7gaJpZM4NHX2y>\n> .\n>\n", "I have the same issue, none of the above solution worked for me.\r\n\r\nI'm getting the following error in Windows 10 x64:\r\n```\r\nC:/users/{user}/_bazel_{user}/sudrsvim/external/tf_toolchains/toolchains/remote_config/configs.bzl:6:28: in initialize_rbe_configs\r\n  C:/users/{user}/_bazel_{user}/sudrsvim/external/tf_toolchains/toolchains/remote_config/rbe_config.bzl:158:27: in _tensorflow_local_config\r\nRepository rule local_python_configure defined at:\r\n  C:/users/{user}/_bazel_{user}/sudrsvim/external/org_tensorflow/third_party/py/python_configure.bzl:275:41: in <toplevel>\r\nERROR: An error occurred during the fetch of repository 'local_execution_config_python':\r\n   Traceback (most recent call last):\r\n        File \"C:/users/{user}/_bazel_{user}/sudrsvim/external/org_tensorflow/third_party/py/python_configure.bzl\", line 209, column 22, in _create_local_python_repository\r\n                _check_python_bin(repository_ctx, python_bin)\r\n        File \"C:/users/{user}/_bazel_{user}/sudrsvim/external/org_tensorflow/third_party/py/python_configure.bzl\", line 145, column 25, in _check_python_bin\r\n                auto_config_fail(\"--define %s='%s' is not executable. Is it the python binary?\" % (\r\n        File \"C:/users/{user}/_bazel_{user}/sudrsvim/external/org_tensorflow/third_party/remote_config/common.bzl\", line 12, column 9, in auto_config_fail\r\n                fail(\"%sConfiguration Error:%s %s\\n\" % (red, no_color, msg))\r\nError in fail: Configuration Error: --define PYTHON_BIN_PATH='C:\\Users\\{user}\\AppData\\Local\\Microsoft\\WindowsApps\\python3.exe' is not executable. Is it the python binary?\r\n\r\n```\r\nI thought it must be an OS issue, I tried on Ubuntu 18.04 LTS (Windows Subsystem).\r\n\r\nThen I got the same error with\r\n\r\n```\r\nERROR: An error occurred during the fetch of repository 'local_execution_config_python':\r\n   Traceback (most recent call last):\r\n        File \"/home/mirwisek/.cache/bazel/_bazel_mirwisek/da48a9b0cd92faf980f30b2a4925b53a/external/org_tensorflow/third_party/py/python_configure.bzl\", line 212, column 41, in _create_local_python_repository\r\n                python_include = _get_python_include(repository_ctx, python_bin)\r\n        File \"/home/mirwisek/.cache/bazel/_bazel_mirwisek/da48a9b0cd92faf980f30b2a4925b53a/external/org_tensorflow/third_party/py/python_configure.bzl\", line 152, column 21, in _get_python_include\r\n                result = execute(\r\n        File \"/home/mirwisek/.cache/bazel/_bazel_mirwisek/da48a9b0cd92faf980f30b2a4925b53a/external/org_tensorflow/third_party/remote_config/common.bzl\", line 230, column 13, in execute\r\n                fail(\r\nError in fail: Problem getting python include path.\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nImportError: cannot import name 'sysconfig'\r\nIs the Python binary path set up right? (See ./configure or PYTHON_BIN_PATH.) Is distutils installed?\r\n```\r\n\r\nYes, Python is installed correctly and I can use it with python3 on CMD as well as terminal. I tried to define the `PYTHON_BIN_PATH` in system variable to the location of python3, that didn't work.", "@mirwisek, or anyone else on this thread, which parts of tensorflow do you intend to use? There might be a docker container available for your use case. My original interest in tensorflow was syntaxnet, for which I found and subsequently forked a more user friendly version of the syntaxnet container. Point is, the containers are much more reliable than building and running the source.\r\n\r\n"]}, {"number": 9435, "title": "Tensorflow Error - no such package '@local_config_cuda//cuda'", "body": "So I'm trying to run the image retraining official tensorflow tutorial from this link: https://www.tensorflow.org/tutorials/image_retraining \r\n\r\nI need to get it working for my dissertation with my own images in less than a month so it's extremely urgent.\r\nOnce I get to the line \"bazel build tensorflow/examples/image_retraining:retrain\"\r\nI get this output:\r\n\"ERROR: error loading package 'tensorflow/examples/image_retraining': Encountered error while reading extension file 'cuda/build_defs.bzl': no such package '@local_config_cuda//cuda': error loading package 'external': The repository named 'local_config_cuda' could not be resolved.\"\r\n\r\nThis thread seems to be the same issue, but no solutions offered: https://github.com/tensorflow/tensorflow/issues/5805\r\n\r\nThis thread has more activity but it's talking about '@local_config_cuda//crosstool' rather than '@local_config_cuda/cuda/' so may not be helpful for me: https://github.com/tensorflow/tensorflow/issues/4105\r\n\r\nI'm using Linux Mint.\r\nHere is my tf_env.txt file for details about my system: [tf_env.txt](https://github.com/tensorflow/tensorflow/files/954822/tf_env.txt)\r\nLet me know if there's any other details I should add which could be useful.\r\n\r\nI used this page for installation: https://www.tensorflow.org/install/install_linux\r\nSo CUDA\u00ae Toolkit 8.0.\r\ncuDNN v5.1\r\nvirtualenv install of Tensorflow\r\n\r\nTrying to run python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\nsays \"Failed to load the native TensorFlow runtime.\"\r\nbut I can get other simple Tensorflow stuff to work so not sure why that is.\r\n\r\n\r\n", "comments": ["What verison of tensorflow source are you using? i.e. run\r\n```\r\ngit describe \r\n```\r\nfrom the root of your tensorflow sources?\r\n\r\nAre you able to build a working whl from source in general?\r\nhttps://www.tensorflow.org/install/install_sources\r\n\r\nIf that doesn't work, Try to build TensorFlow with only CPU suppport. If that can be made to work then try flowers with the cpu version.\r\n\r\n", "When I run \r\n> git describe\r\n\r\nI get \r\n> fatal: Not a git repository (or any parent up to mount point /home)\r\nStopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).\r\n\r\nSo I must have done something wrong. What exactly do you mean by \"from the root of your tensorflow sources\"? \r\nDoes that simply mean to call \r\n> cd /home/bonkoodle/tensorflow\r\n\r\nso that I'm in my tensorflow folder before running it? Or is there something more complex I have to do?\r\nI feel like most things aren't explained clearly enough for a beginner like me. It's just assumed that I know loads of stuff.\r\n\r\nBut if I call \r\n> source ./tensorflow/bin/activate\r\n\r\nthen I can successfully run the standard test code of: \r\n> python \r\n>>> import tensorflow as tf\r\n>>> hello = tf.constant('Hello, TensorFlow!')\r\n>>> sess = tf.Session()\r\n>>> print(sess.run(hello))\r\n\r\nI tried installing it on my laptop but encountered the exact same error.\r\nBoth times my tensorflow folder was missing the examples folder and didn't have the BUILD file or tensorflow.bzl.\r\nSo what I did was to download the whole tensorflow-master from https://github.com/tensorflow/tensorflow\r\nThen copy the files over to my regular tensorflow installation.\r\nBut that's quite likely why it's not working, I must have done something incorrectly, is there some other way of adding these additional folders/files which are needed for running \"bazel build tensorflow/examples/image_retraining:retrain\"?\r\n\r\nAlso should I be using Python 2.7 or Python 3.x?\r\nI'm attempting with 2.7 atm but not really sure which is best.\r\n\r\n\r\nAs for installing from source I gave it a go and so far got down to the line where you call\r\n> sudo pip install /tmp/tensorflow_pkg/tensorflow-1.0.1-py2-none-any.whl\r\n\r\n but I'm getting an error \r\n> IOError: [Errno 2] No such file or directory: '/tmp/tensorflow_pkg/tensorflow-1.0.1-py2-none-any.whl'\r\n\r\nIsn't that the name of the file which we're trying to install though? So why would it be looking for the file it's installing?", "Your /home/bonkoodle/tensorflow seems to be the root of a virtualenv.\r\n- The root of your TensorFlow sources is where git clone dropped a tensorflow directory.\r\n- Please follow this to build TensorFlow https://www.tensorflow.org/install/install_sources\r\n- I don't think image_retraining even requires creating a whl part. Just follow the previous document up to building the pip package. Then switch to the flower train instructions.\r\n- I'd use python 2.7. \r\n", "I finally got the image retraining file to work by installing from sources, thanks a lot dude.\r\n\r\nI'm fairly sure I got this line to work somehow\r\n>sudo pip install /tmp/tensorflow_pkg/tensorflow-1.0.1-py2-none-any.whl\r\n\r\nI think I forgot to set the LD_LIBRARY_PATH variables last time since I wasn't sure how to do it at first. Which I think I did correctly by running the code from section 6.1.1 of:\r\nhttp://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#axzz4fM4cvC1G\r\nAlthough it didn't display any confirmation so I wasn't sure it it worked or not, and wasn't sure if you're actually supposed to copy the '$' sign on the 2nd line.\r\n\r\nAlso I got an ImportError so I had to run \r\n>pip install mock\r\nwhich I found on here http://stackoverflow.com/questions/11501520/importerror-no-module-named-mock\r\n\r\nNow I want to train it with my own images, I'm planning to use over 12000 images for 8 flower categories from the ImageNet database.\r\nIs there a good way to automatically process them in terms of cropping them to size or adding whitespace/shrinking to make them the right size?\r\nFrom what I understand they'll be automatically cropped anyway if you feed them in normally, but the performance will be worse since they'll be cropped badly.\r\n\r\nAnd there seems to be around 3000 images for the standard retraining set, so I'm guessing it'd take about 4 times the time (so about 4 hours). Or will the cropping add loads of extra time?\r\nBecause it's running with CPU only atm which will make it much longer.\r\nAs long as the cropping doesn't make it take like several days it should be fine though.\r\n\r\nI was getting some error when trying to follow the exact same steps on my main PC instead of laptop.\r\n\r\n", "Closing now since the not-working issue is resolved. Please ask this usage question on StackOverflow (and post the link here). You can create a numpy or tensorflow script that resizes image as a separate process and writes them into a new directory.\r\n\r\n\"And there seems to be around 3000 images for the standard retraining set, so I'm guessing it'd take about 4 times the time (so about 4 hours). Or will the cropping add loads of extra time?\r\nBecause it's running with CPU only atm which will make it much longer.\r\nAs long as the cropping doesn't make it take like several days it should be fine though.\"\r\n", "For anyone else who didn't install tensorflow from sources and just wants to run the image_retraining example: you can just run the python code (retrain.py). You don't have to re-install from sources.", "@aselle I have faced with the same error during the building tensorflow v2.3.0 ...\r\n```console\r\nERROR: Skipping '//tensorflow/tools/pip_package:build_pip_package': no such package '@local_config_cuda//cuda': Traceback (most recent call last):\r\n    File \"/home/{User}/Projects/AI/tensorflow/third_party/gpus/cuda_configure.bzl\", line 1369\r\n        _create_local_cuda_repository(<1 more arguments>)\r\n    File \"/home/{User}/Projects/AI/tensorflow/third_party/gpus/cuda_configure.bzl\", line 955, in _create_local_cuda_repository\r\n        _get_cuda_config(repository_ctx, <1 more arguments>)\r\n    File \"/home/{User}/Projects/AI/tensorflow/third_party/gpus/cuda_configure.bzl\", line 657, in _get_cuda_config\r\n        find_cuda_config(repository_ctx, <2 more arguments>)\r\n    File \"/home/{User}/Projects/AI/tensorflow/third_party/gpus/cuda_configure.bzl\", line 635, in find_cuda_config\r\n        _exec_find_cuda_config(<3 more arguments>)\r\n    File \"/home/{User}/Projects/AI/tensorflow/third_party/gpus/cuda_configure.bzl\", line 629, in _exec_find_cuda_config\r\n        execute(repository_ctx, <1 more arguments>)\r\n    File \"/home/{User}/Projects/AI/tensorflow/third_party/remote_config/common.bzl\", line 208, in execute\r\n        fail(<1 more arguments>)\r\nRepository command failed\r\nscript.py:124: DeprecationWarning: invalid escape sequence \\d\r\n  match = re.match(\"#define %s +(\\d+)\" % name, line)\r\nscript.py:260: DeprecationWarning: invalid escape sequence \\d\r\n  pattern = \"Cuda compilation tools, release \\d+\\.\\d+, V(\\d+\\.\\d+\\.\\d+)\"\r\nscript.py:553: DeprecationWarning: invalid escape sequence \\w\r\n  match = re.match(\"^(/[^/ ]*)+/lib/\\w+-linux-gnu/?$\", os.environ[env_name])\r\nscript.py:123: ResourceWarning: unclosed file <_io.TextIOWrapper name='/usr/local/cuda-10.2/include/cuda.h' mode='r' encoding='utf-8'>\r\n  for line in io.open(path, \"r\", encoding=\"utf-8\").readlines():\r\nResourceWarning: Enable tracemalloc to get the object allocation traceback\r\nscript.py:123: ResourceWarning: unclosed file <_io.TextIOWrapper name='/usr/local/cuda/include/cublas_api.h' mode='r' encoding='utf-8'>\r\n  for line in io.open(path, \"r\", encoding=\"utf-8\").readlines():\r\nResourceWarning: Enable tracemalloc to get the object allocation traceback\r\nscript.py:123: ResourceWarning: unclosed file <_io.TextIOWrapper name='/usr/include/cudnn.h' mode='r' encoding='utf-8'>\r\n  for line in io.open(path, \"r\", encoding=\"utf-8\").readlines():\r\nResourceWarning: Enable tracemalloc to get the object allocation traceback\r\nscript.py:123: ResourceWarning: unclosed file <_io.TextIOWrapper name='/usr/include/cudnn_version.h' mode='r' encoding='utf-8'>\r\n  for line in io.open(path, \"r\", encoding=\"utf-8\").readlines():\r\nResourceWarning: Enable tracemalloc to get the object allocation traceback\r\nWARNING: Target pattern parsing failed.\r\nERROR: no such package '@local_config_cuda//cuda': Traceback (most recent call last):\r\n    File \"/home/{User}/Projects/AI/tensorflow/third_party/gpus/cuda_configure.bzl\", line 1369\r\n        _create_local_cuda_repository(<1 more arguments>)\r\n    File \"/home/{User}/Projects/AI/tensorflow/third_party/gpus/cuda_configure.bzl\", line 955, in _create_local_cuda_repository\r\n        _get_cuda_config(repository_ctx, <1 more arguments>)\r\n    File \"/home/{User}/Projects/AI/tensorflow/third_party/gpus/cuda_configure.bzl\", line 657, in _get_cuda_config\r\n        find_cuda_config(repository_ctx, <2 more arguments>)\r\n    File \"/home/{User}/Projects/AI/tensorflow/third_party/gpus/cuda_configure.bzl\", line 635, in find_cuda_config\r\n        _exec_find_cuda_config(<3 more arguments>)\r\n    File \"/home/{User}/Projects/AI/tensorflow/third_party/gpus/cuda_configure.bzl\", line 629, in _exec_find_cuda_config\r\n        execute(repository_ctx, <1 more arguments>)\r\n    File \"/home/{User}/Projects/AI/tensorflow/third_party/remote_config/common.bzl\", line 208, in execute\r\n        fail(<1 more arguments>)\r\nRepository command failed\r\nscript.py:124: DeprecationWarning: invalid escape sequence \\d\r\n  match = re.match(\"#define %s +(\\d+)\" % name, line)\r\nscript.py:260: DeprecationWarning: invalid escape sequence \\d\r\n  pattern = \"Cuda compilation tools, release \\d+\\.\\d+, V(\\d+\\.\\d+\\.\\d+)\"\r\nscript.py:553: DeprecationWarning: invalid escape sequence \\w\r\n  match = re.match(\"^(/[^/ ]*)+/lib/\\w+-linux-gnu/?$\", os.environ[env_name])\r\nscript.py:123: ResourceWarning: unclosed file <_io.TextIOWrapper name='/usr/local/cuda-10.2/include/cuda.h' mode='r' encoding='utf-8'>\r\n  for line in io.open(path, \"r\", encoding=\"utf-8\").readlines():\r\nResourceWarning: Enable tracemalloc to get the object allocation traceback\r\nscript.py:123: ResourceWarning: unclosed file <_io.TextIOWrapper name='/usr/local/cuda/include/cublas_api.h' mode='r' encoding='utf-8'>\r\n  for line in io.open(path, \"r\", encoding=\"utf-8\").readlines():\r\nResourceWarning: Enable tracemalloc to get the object allocation traceback\r\nscript.py:123: ResourceWarning: unclosed file <_io.TextIOWrapper name='/usr/include/cudnn.h' mode='r' encoding='utf-8'>\r\n  for line in io.open(path, \"r\", encoding=\"utf-8\").readlines():\r\nResourceWarning: Enable tracemalloc to get the object allocation traceback\r\nscript.py:123: ResourceWarning: unclosed file <_io.TextIOWrapper name='/usr/include/cudnn_version.h' mode='r' encoding='utf-8'>\r\n  for line in io.open(path, \"r\", encoding=\"utf-8\").readlines():\r\nResourceWarning: Enable tracemalloc to get the object allocation traceback\r\nINFO: Elapsed time: 8.508s\r\nINFO: 0 processes.\r\nFAILED: Build did NOT complete successfully (0 packages loaded)\r\n    currently loading: tensorflow/tools/pip_package\r\n```"]}, {"number": 9434, "title": "Using replace to evaluate multiple gradients during training in Keras", "body": "I am a researcher in optimization and I am interested in testing algorithms for training DNNs using keras, and am now using tensorflow backend.\r\n\r\nIn practice, I would like to do something a bit different from the other optimizers, I would like to compute the gradient at a slightly different value of the tensor of parameters than the current one, and the update I will make to the parameters will depend on both the current gradient and this other gradient.  \r\n\r\nIn practice this has proven more difficult than anticipated.\r\nSee https://github.com/fchollet/keras/issues/6175\r\nit was suggested I come to here for further suggestions.\r\n\r\nMy code is a standard keras python code, the body does\r\n\r\nmodel = Sequential()\r\nmodel.add(Dense(512, input_shape=(784,)))\r\n...\r\nmodel.compile(loss='categorical_crossentropy',\r\n              optimizer = myopt,\r\n              metrics=['accuracy'])\r\nhistory = model.fit(X_train, Y_train,\r\n                    batch_size=batch_size, nb_epoch=nb_epoch, \r\n                    verbose=1, validation_data=(X_test, Y_test))\r\n\r\n\r\nIn the get_updates call function of my custom optimizer, it begins as usual\r\n\r\n    def get_updates(self, params, constraints, loss):\r\n        grads = self.get_gradients(loss, params)\r\n\r\nNow, I want to now get the gradients at a different value of grads. First I tried just defining another tensor of the same structure but different values and take the get_gradients, but of course the loss is a graph depending on params already. Then I tried changing params itself (then copying the old values of the tensor to another one, to replace params after the evaluation) but apparently as the forward pass was not made this was ineffective. As per the advice in the above github conversation in keras, I tried,\r\n\r\n        tempparams = [a+1. for a in params]\r\n        replace = {p:npm for p, npm in zip(params, tempparams)}\r\n        gradsn = [tf.contrib.graph_editor.graph_replace(g.op, replace) for g in grads]\r\n\r\n\r\nbut this is still not OK, as I get the error\r\n\r\nTypeError: Expected a type in (<class 'tensorflow.python.framework.ops.Operation'>), got: <class 'tensorflow.python.ops.variables.Variable'\r\n\r\n\r\nThank you\r\n\r\n\r\n\r\n", "comments": ["@purpledog: Can you glance at the last error message about `graph_replace`?  Seems like it might be an easy fix, but I'm unfamiliar with the code.", "@slavakung rewriting the graph is a bit painful. When I do prototype non-standard optimizations I prefer keeping everything in variables. IE you run following ops \r\n```\r\ngradient1.assign(current_gradient)\r\nparameter_copy.assign(current_parameters)\r\ncurrent_parameters.assign(current_parameters+gradient1)\r\ngradient3.assign(fancy_gradient(gradient1, current_gradient))\r\ncurrent_parameters.assign(parameter_copy)\r\ncurrent_parameters.assign(current_parameters+gradient3)\r\n```\r\nIf you have these things in the loop, modifying the graph (like doing var.assign()) will add 1-10ms delay, so you may have to refactor things to pre-create those ops ahead of time.  @alextp is working on a solution that will make such applications easier", "I am not sure I fully understand. What is the reason I am getting the error message with graph_replace as done here? Why would it be prohibited from modifying the gradients within a get_updates call?\r\n\r\nyaroslav,\r\nWhere in my code would/should I use assign instead?\r\nI had heard that possibly I would have create the entire model again to begin with, which would seek computationally excessive. ", "@slavakung did you manage to resolve this?", "No, unfortunately. I was not able to get this working in TF or Theano, and\nam now working on trying to implement my algorithm in Pytorch instead. It\nlooks as though the tensorflow architecture is just not properly suited for\nnon-standard (anything but one gradient evaluation at the current point,\nper iteration) optimization.\n\n\nOn Saturday, June 17, 2017, Skye Wanderman-Milne <notifications@github.com>\nwrote:\n> @slavakung did you manage to resolve this?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.<\nhttps://ci6.googleusercontent.com/proxy/ueJjjLeq1cdj8ageFMeNn9nU2zw6tn0o0V7-UGhiwS1jmPCwymZAyXOfnayxfpIqyv99eQURntsgepfLupGLG20mpUzafHIFKUcF8BZlCIwMXb0bsLbdd-unl4eNljiP9KXdfhnPLsZgMTzX7l7Jz-xIoY6JaA=s0-d-e1-ft#https://github.com/notifications/beacon/AEGh29DDNlCeFxf9mLn0KPOpx7QveKM_ks5sEvePgaJpZM4NHUAR.gif>\n", "Ah, I'm sorry to hear that. I'll leave this open for now since it hasn't been resolved, but I'm marking it \"contributions welcome\" since unfortunately this is a somewhat obscure use case and I don't think we have any plans to address it currently.", "Was anyone able to solve this problem?\r\n\r\nI even copied the function 'clone_replace' from @bstriner 's [code](https://github.com/bstriner/keras-adversarial/blob/master/keras_adversarial/backend/tensorflow_backend.py) and utilized it like this:\r\n\r\n```\r\ngrads = self.get_gradients(loss, params)\r\ntempparams = [tf.add(a,a) for a in params]\r\nreplace = {p:npm for p, npm in zip(params, tempparams)}\r\ngradsn = [clone_replace(g, replace) for g in grads]\r\n```\r\n\r\nThis give the error:\r\n\r\n`TypeError: Expected a type in (<class 'tensorflow.python.framework.ops.Operation'>), got: <class 'tensorflow.python.ops.variables.Variable'>`\r\n\r\nIf I use the `op` attribute like \r\n\r\n`gradsn = [clone_replace(g.op, replace) for g in grads]\r\n`\r\n\r\nI get the error:\r\n\r\n`TypeError: Expected a type in (<class 'tensorflow.python.framework.ops.Tensor'>), got: <class 'tensorflow.python.framework.ops.Operation'>`\r\n\r\nUtterly confusing...\r\n\r\n", "Very late, but in case anyone else googles their way to this thread:\r\nI came across this while looking for ways to implement SVRG in tensorflow. I think the `graph_replace` method does work for me - the only thing that needed to be fixed was the `TypeError`, because `graph_replace` takes `Tensor` as input, rather than `Variable`. I fixed this with `tf.convert_to_tensor`.\r\nUsing OP's original example, this is:\r\n```\r\ngrads = tf.gradients(loss, params)\r\ntempparams = [a+1. for a in params]\r\nreplace = {tf.convert_to_tensor(p) : tf.convert_to_tensor(npm) for p, npm in zip(params, tempparams)}\r\ngradsn = tf.contrib.graph_editor.graph_replace(grads, replace)\r\n```", "Hi @slavakung! \r\nWe are checking to see if you still need help in this issue , Have you tried latest stable version TF 2.6  yet? Please create a new issue if the issue is replicating in newer version. Thanks! ", "This issue has been automatically marked as stale because it has no recent activity. It will be closed if no further activity occurs. Thank you.\n", "Closing as stale. Please reopen if you'd like to work on this further.\n", "Are you satisfied with the resolution of your issue?\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/9434\">Yes</a>\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/9434\">No</a>\n"]}, {"number": 9433, "title": "scan in theano and tensorflow", "body": "There is a function written with theano:\r\n\r\n```\r\n`import numpy as np\r\nimport theano as theano\r\nimport theano.tensor as T\r\n\r\ndef forward_prop_step(x_t, s_t1_prev, s_t2_prev):\r\n            # This is how we calculated the hidden state in a simple RNN. No longer!\r\n            # s_t = T.tanh(U[:,x_t] + W.dot(s_t1_prev))\r\n\r\n            # Word embedding layer\r\n            x_e = E[:,x_t]\r\n\r\n            # GRU Layer 1\r\n            z_t1 = T.nnet.hard_sigmoid(U[0].dot(x_e) + W[0].dot(s_t1_prev) + b[0])\r\n            r_t1 = T.nnet.hard_sigmoid(U[1].dot(x_e) + W[1].dot(s_t1_prev) + b[1])\r\n            c_t1 = T.tanh(U[2].dot(x_e) + W[2].dot(s_t1_prev * r_t1) + b[2])\r\n            s_t1 = (T.ones_like(z_t1) - z_t1) * c_t1 + z_t1 * s_t1_prev\r\n\r\n            # GRU Layer 2\r\n            z_t2 = T.nnet.hard_sigmoid(U[3].dot(s_t1) + W[3].dot(s_t2_prev) + b[3])\r\n            r_t2 = T.nnet.hard_sigmoid(U[4].dot(s_t1) + W[4].dot(s_t2_prev) + b[4])\r\n            c_t2 = T.tanh(U[5].dot(s_t1) + W[5].dot(s_t2_prev * r_t2) + b[5])\r\n            s_t2 = (T.ones_like(z_t2) - z_t2) * c_t2 + z_t2 * s_t2_prev\r\n\r\n            # Final output calculation\r\n            # Theano's softmax returns a matrix with one row, we only need the row\r\n            o_t = T.nnet.softmax(V.dot(s_t2) + c)[0]\r\n\r\nreturn [o_t, s_t1, s_t2]`\r\n```\r\n\r\nI have tried to rewrite it with tensorflow:\r\n\r\n```\r\n`import numpy as np, tensorflow as tf, operator\r\n\r\ndef forward_prop_step(x_t, s_t1_prev, s_t2_prev):\r\n                        # This is how we calculated the hidden state in a simple RNN. No longer!\r\n                        # s_t = T.tanh(U[:,x_t] + W.dot(s_t1_prev))\r\n\r\n                        # Word embedding layer\r\n                        x_e = E[:,x_t]\r\n\r\n                        # GRU Layer 1\r\n                        z_t1 = tf.nn.sigmoid(tf.reduce_sum(tf.multiply(U[0], x_e)) + tf.reduce_sum(tf.multiply(W[0], s_t1_prev)) + b[0])\r\n                        r_t1 = tf.nn.sigmoid(tf.reduce_sum(tf.multiply(U[1], x_e)) + tf.reduce_sum(tf.multiply(W[1], s_t1_prev)) + b[1])\r\n                        c_t1 = tf.nn.tanh(tf.reduce_sum(tf.multiply(U[2], x_e)) + tf.reduce_sum(tf.multiply(W[2], (s_t1_prev * r_t1))) + b[2])\r\n                        s_t1 = (tf.ones_like(z_t1) - z_t1) * c_t1 + z_t1 * s_t1_prev\r\n\r\n                        # GRU Layer 2\r\n                        z_t2 = tf.nn.sigmoid(tf.reduce_sum(tf.multiply(U[3], s_t1)) + tf.reduce_sum(tf.multiply(W[3], s_t2_prev)) + b[3])\r\n                        r_t2 = tf.nn.sigmoid(tf.reduce_sum(tf.multiply(U[4], s_t1)) + tf.reduce_sum(tf.multiply(W[4], s_t2_prev)) + b[4])\r\n                        c_t2 = tf.nn.tanh(tf.reduce_sum(tf.multiply(U[5], s_t1)) + tf.reduce_sum(tf.multiply(W[5], (s_t2_prev * r_t2))) + b[5])\r\n                        s_t2 = (tf.ones_like(z_t2) - z_t2) * c_t2 + z_t2 * s_t2_prev\r\n\r\n                        # Final output calculation\r\n                        # Tensorflow's softmax returns a matrix with one row, we only need the row\r\n                        o_t = tf.nn.softmax(tf.reduce_sum(tf.multiply(V, s_t2)) + c)[0]\r\n\r\n                        return [o_t, s_t1, s_t2]`\r\n```\r\n\r\nIn theano, scan function is called to perform \"forward_prep_step\" function in a loop:\r\n\r\n```\r\n`[o, s, s2], updates = theano.scan(\r\n            forward_prop_step,\r\n            sequences=x,\r\n            truncate_gradient=self.bptt_truncate,\r\n            outputs_info=[None, \r\n                          dict(initial=T.zeros(self.hidden_dim)),\r\ndict(initial=T.zeros(self.hidden_dim))])`\r\n```\r\n\r\nThere is a scan function in tensorflow as well, but they don't get the same parameters. How could be the transformation of scan function above, into tensorflow scan function? ", "comments": ["This question is better asked on  [StackOverflow](http://stackoverflow.com/questions/tagged/tensorflow) since it is not a  bug or feature request. There is also a larger community that reads questions there. Thanks!"]}, {"number": 9432, "title": "Add ibverbs support for RoCEv2 networks", "body": "Current support for ibverbs cannot run on RoCE networks, as RoCE requires the global identifier (gid) to connect. This patch adds gid information for RDMA connection setup.", "comments": ["Can one of the admins verify this patch?", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->", "I signed it!", "CLAs look good, thanks!\n\n<!-- ok -->", "@junshi15 mind also taking a look?", "taking a look now..", "The patch looks good to me. I compiled it successfully on Ubuntu 14.04. I did not have a chance to run tests as our IB networks were not available at this moment. \r\n\r\n@shamoya - how does it look to you? especially the settings for attr.ah_attr?", "I can verify all is working on IB and RoCE on our cluster soon .. I'll run and update \n", "Jenkins, test this please", "@junshi15 @shamoya Thank you so much for your help!\r\n\r\nOn my RoCE testbed, it can compile and run successfully.", "Hi @junshi15  @li-ch @jhseu @poxvoculi @bkovalev,\r\n\r\nAfter thinking about it in the last day, we must move to rdmacm for the connection management part !\r\nThis makes much more sense and the the correct way to code verbs applications.\r\n\r\nThis way rdmacm will configure the correct rdma device and port, according to the gRPC channels given by the user in the cluster definition (the rdma device+port which belongs to the IP Address of each server in cluster specification will be chosen and configured correctly by a code that specialized in it).\r\n\r\nThis will also eliminate the need for this code, as rdmacm will configure anything needed for the connection according to the link detected (IB or Ethernet) on the corresponding interface of the specified gRPC channel, and if Ethernet it will also take care of  RoCE V0/V1/V2 configuration according to user desired choice (The user configures the GID tables specifying which RoCE mode to configure for each gid index, and you also don't need to configure all the hop_limit and other low level values).\r\n\r\nrdmacm knows the best how to configure everything in the connection (you don't need to set all the fields in ah_attr or even pass the QPs between its states) and it's a well maintained code by the rdma community - https://github.com/linux-rdma/rdma-core/tree/master/librdmacm\r\n\r\nAlso this way I don't need the user the specify the rdma/port from the Server definition in the python.\r\nThis is the way to go also when you use the same cluster for Ethernet and IB (different adapters).\r\n\r\nI can start working on it immediately and shouldn't take long (few days).\r\nSo what do you think ? ", "@shamoya \r\nI totally support the idea of using rdma_cm to establish the cluster. I compared rdma_cm and out-of-band communication (gRPC in this case) during the early stage of my design. I chose the latter mostly out of  convenience: I had working code from CaffeOnSpark, which uses Spark to establish the cluster. In addition, we only use IB fabric in house, no need to worry about the diversity of the family of IB networks. Rdma_cm should make it easy to support most of them with minimal effort. \r\n\r\nNote we still need specify host:port in python server definition as we use gRPC for sending graphs, etc.\r\n \r\nIf this patch looks good, let's approve it. We can start another PR for rdma_cm. I am happy to work with you.", "No problem @junshi15, Thanks.\r\nI Checked the code on our setup and it's working good.", "@shamoya I tested this in our RoCE environment, and the session run will get stuck. Here is the test scripts:\r\nhttps://gist.github.com/llhe/da4e6ac1be65291d30de08a90ecc01e2", "I saw (line 85) \r\n```sess = tf.Session(\"grpc://\" + cluster['worker'][0], config=default_config())```\r\n in your code. \r\n\r\nShouldn't it be \r\n```sess = tf.Session(\"grpc+verbs://\" + cluster['worker'][0], config=default_config())```\r\n?", "@byronyi I think the verbs are supported at Server level instead of Session level. Only 'grpc' session is registered in the session factory.", "@llhe, you code looks ok to me. Did you try it on an IB network or you only have RoCE? \r\n\r\n@li-ch @shamoya Mind taking a look?", "Very cool script @llhe , thanks.\r\n\r\nNow I rechecked again and indeed the code doesn't work on Ethernet (RoCE) setup.\r\nIt does work on IB.\r\nAlso rechecked with our scripts (Inception and VGG) and it doesn't work as well on Ethernet/RoCE.\r\nWe probably checked IB last week and made some error when checking the RoCE case.\r\n\r\nI see the following issue in my case:\r\nOne of the worker (usually task 1) will report \"retry count exceeded\".\r\nUsually there's an issue with the connection (we connected QPs but for some reason, the packets one QP send doesn't reach to other side QP).\r\nAll the GIDs configuration looks ok, I'm debugging it now.\r\n@llhe - is this what you see as well ? \r\n\r\nI hope to send the rdmacm code soon and then we won't fall (hopefully) on those connection bugs.\r\n", "OK @llhe @junshi15 @li-ch - I see the issue now.\r\n\r\nIt comes from:\r\n(line 478 rdma.cc) attr.path_mtu = IBV_MTU_4096; \r\n\r\nThis won't work on standard 1500 MTU Ethernet network of course.\r\nIn this case (1500 MTU Ethernet network) one should use IBV_MTU_1024 (RoCE MTU are always power of 2).\r\n\r\nI guess whoever didn't noticed it, is working with MTU 9000 (or above 4K) on his Ethernet network.\r\n\r\nAlso in IB network this is wrong (since the MTU configured can also different, depends on how SM was configured) but will most likely work as 4K as the usually the MTU.\r\n\r\nAnother good reason to use rdmacm, as it deals with it in the best way (queries the correct MTU configured on the device, in both IB/Ethernet cases).\r\n\r\nUntil we'll have the rdmacm code (I hope soon, having some delays here) I think we should change to attr.path_mtu = IBV_MTU_1024 - which will work for 99.99% of the cases and the performance will not be felt.", "Verified there isn't performance impact for 1K MTU and sent PR #9667 "]}, {"number": 9431, "title": "Hi,", "body": "", "comments": []}, {"number": 9430, "title": "(v1.1.0, CPU)SSE,SSE2,etc warning messages on Windows 10", "body": "These are awkward messages since TensofFlow doesn't support windows build officially.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/4515120/25375011/5e524a40-29da-11e7-96f9-b9f4f17ae3ee.png)\r\n", "comments": ["You'll need to compile it yourself if you want to get rid of them."]}, {"number": 9429, "title": "Make orthogonal initializer use qr factorization (instead of svd)", "body": "Use QR factorization in orthogonal initializer to get better efficiency when computing orthogonal matrix.", "comments": ["Can one of the admins verify this patch?", "BTW, that doesn't give uniform distribution over orthogonal matrices. Search for \"wrong distribution\" in https://arxiv.org/pdf/math-ph/0609050.pdf\r\n\r\nTo do uniformly at random, need to adjust diagonal entries of the qr term. IE, something like this in numpy\r\n```\r\nfrom scipy import linalg\r\nimport numpy as np\r\ndef orthogonal_measure(n):\r\n    z = np.random.randn(n,n)\r\n    q, r = linalg.qr(z)\r\n    d = np.diagonal(r)\r\n    ph = d/np.absolute(d)\r\n    return q*ph\r\n\r\n```\r\n\r\nthe difference is significant. IE, rotating single point in 3d by a random matrix using your approach \r\n<img width=\"397\" alt=\"screenshot 2017-04-25 13 09 13\" src=\"https://cloud.githubusercontent.com/assets/23068/25405556/8465cee0-29b8-11e7-9a54-3a57e23998aa.png\">\r\n\r\nafter normalization\r\n<img width=\"388\" alt=\"screenshot 2017-04-25 13 09 27\" src=\"https://cloud.githubusercontent.com/assets/23068/25405565/8a034ae4-29b8-11e7-9599-cd015d0a6ae3.png\">\r\n\r\n[Notebook with sanity checks](https://wolfr.am/lbWEtaFF)", "@yaroslavvb thanks for pointing it out !\r\nAlready fix it.", "Not super familiar with this code. Lobbing over to @rmlarsen ", "Thanks for the change!", "@tensorflow-jenkins test this please", "There is an issue with the tests in a ominous location -- @GBLin5566 can you look into this?", "I checked the error message and found that it was caused due to the mean of Q was bigger than 0. over the threshold. (In this case, mean of Q is  0.04, bigger than +- 0.03).\r\nHowever, if I change the shape of array or change the seed (123 to 124 for example), the test will be fine.\r\nSo I guess the error is from minor instability and it's permissible ?", "It is probably ok, but it does cast some doubt on the quality of this test. Increasing the threshold (or changing the seed) are acceptable, assuming we have made extra certain that our new scheme does not introduce some bias.", "Oops.", "Can one of the admins verify this patch?", "@martinwicke Thanks for the feedback !"]}]