[{"number": 51334, "title": "Prevent division by 0 in LSH projection.", "body": "PiperOrigin-RevId: 387225857\r\nChange-Id: Iaeb572a763618c64f503e0026f6dd9fd769bf50c", "comments": []}, {"number": 51333, "title": "Prevent division by 0 in LSH projection.", "body": "PiperOrigin-RevId: 387225857\r\nChange-Id: Iaeb572a763618c64f503e0026f6dd9fd769bf50c", "comments": []}, {"number": 51332, "title": "Prevent division by 0 in LSH projection.", "body": "PiperOrigin-RevId: 387225857\r\nChange-Id: Iaeb572a763618c64f503e0026f6dd9fd769bf50c", "comments": []}, {"number": 51331, "title": "Prevent nullptr dereference in MLIR TFLite dialect/optimizer.", "body": "PiperOrigin-RevId: 387220762\r\nChange-Id: Id136ef04bb3d36123b4685d316ae81a9ec924d6b", "comments": []}, {"number": 51330, "title": "Prevent nullptr dereference in MLIR TFLite dialect/optimizer.", "body": "PiperOrigin-RevId: 387220762\r\nChange-Id: Id136ef04bb3d36123b4685d316ae81a9ec924d6b", "comments": []}, {"number": 51329, "title": "Prevent nullptr dereference in MLIR TFLite dialect/optimizer.", "body": "PiperOrigin-RevId: 387220762\r\nChange-Id: Id136ef04bb3d36123b4685d316ae81a9ec924d6b", "comments": []}, {"number": 51328, "title": "Prevent dereferencing of null pointers in TFLite's `add.cc`.", "body": "PiperOrigin-RevId: 387244946\r\nChange-Id: I56094233327fbd8439b92e1dbb1262176e00eeb9", "comments": []}, {"number": 51327, "title": "Prevent dereferencing of null pointers in TFLite's `add.cc`.", "body": "PiperOrigin-RevId: 387244946\r\nChange-Id: I56094233327fbd8439b92e1dbb1262176e00eeb9", "comments": []}, {"number": 51326, "title": "Prevent dereferencing of null pointers in TFLite's `add.cc`.", "body": "PiperOrigin-RevId: 387244946\r\nChange-Id: I56094233327fbd8439b92e1dbb1262176e00eeb9", "comments": []}, {"number": 51325, "title": "Prevent heap OOB read in TFLite's `gather_nd.cc`.", "body": "Passing negative indices is illegal but there was a missing check so that resulted in OOB accesses.\r\n\r\nPiperOrigin-RevId: 387208551\r\nChange-Id: I6b7a8a62d3e7c13a16d81619e5bc23ae2cdbc7fd", "comments": []}, {"number": 51324, "title": "Prevent heap OOB read in TFLite's `gather_nd.cc`.", "body": "Passing negative indices is illegal but there was a missing check so that resulted in OOB accesses.\r\n\r\nPiperOrigin-RevId: 387208551\r\nChange-Id: I6b7a8a62d3e7c13a16d81619e5bc23ae2cdbc7fd", "comments": []}, {"number": 51323, "title": "Prevent heap OOB read in TFLite's `gather_nd.cc`.", "body": "Passing negative indices is illegal but there was a missing check so that resulted in OOB accesses.\r\n\r\nPiperOrigin-RevId: 387208551\r\nChange-Id: I6b7a8a62d3e7c13a16d81619e5bc23ae2cdbc7fd", "comments": []}, {"number": 51322, "title": "Prevent an OOB read in `expand_dims.cc`", "body": "The for loop that follows this check assumes that `axis` is between `0` and `input_dims.size`. If user supplied `axis` is negative, the if code before this check is supposed to bring it back to positive (similar to how in Python one can do `l[-3]` to mean `l[-3 + len(l)]`).\r\n\r\nPiperOrigin-RevId: 387200206\r\nChange-Id: I162f4feba12d547c3a4340833ae682016a2ebfab", "comments": []}, {"number": 51321, "title": "Prevent an OOB read in `expand_dims.cc`", "body": "The for loop that follows this check assumes that `axis` is between `0` and `input_dims.size`. If user supplied `axis` is negative, the if code before this check is supposed to bring it back to positive (similar to how in Python one can do `l[-3]` to mean `l[-3 + len(l)]`).\r\n\r\nPiperOrigin-RevId: 387200206\r\nChange-Id: I162f4feba12d547c3a4340833ae682016a2ebfab", "comments": []}, {"number": 51320, "title": "Prevent an OOB read in `expand_dims.cc`", "body": "The for loop that follows this check assumes that `axis` is between `0` and `input_dims.size`. If user supplied `axis` is negative, the if code before this check is supposed to bring it back to positive (similar to how in Python one can do `l[-3]` to mean `l[-3 + len(l)]`).\r\n\r\nPiperOrigin-RevId: 387200206\r\nChange-Id: I162f4feba12d547c3a4340833ae682016a2ebfab", "comments": []}, {"number": 51319, "title": "Prevent a division by 0 in average ops.", "body": "PiperOrigin-RevId: 385184660\r\nChange-Id: I7affd4554f9b336fca29ac68f633232c094d0bd3", "comments": []}, {"number": 51318, "title": "Prevent a division by 0 in average ops.", "body": "PiperOrigin-RevId: 385184660\r\nChange-Id: I7affd4554f9b336fca29ac68f633232c094d0bd3", "comments": []}, {"number": 51317, "title": "Prevent a division by 0 in average ops.", "body": "PiperOrigin-RevId: 385184660\r\nChange-Id: I7affd4554f9b336fca29ac68f633232c094d0bd3", "comments": []}, {"number": 51316, "title": "Prevent a division by 0 in division ops.", "body": "PiperOrigin-RevId: 385223169\r\nChange-Id: Ia4228960b5d2aa44480385f74bdd70d21a3613c3", "comments": []}, {"number": 51315, "title": "Prevent a division by 0 in division ops.", "body": "PiperOrigin-RevId: 385223169\r\nChange-Id: Ia4228960b5d2aa44480385f74bdd70d21a3613c3", "comments": []}, {"number": 51314, "title": "Prevent a division by 0 in division ops.", "body": "PiperOrigin-RevId: 385223169\r\nChange-Id: Ia4228960b5d2aa44480385f74bdd70d21a3613c3", "comments": []}, {"number": 51313, "title": "Fix a null pointer exception caused by branching on uninitialized data.", "body": "This is due to not checking that the params for the quantization exists. If there is no quantization, we should not access the `.params` field.\r\n\r\nPiperOrigin-RevId: 385173491\r\nChange-Id: I8fc476c4b274fdb21ba741caa0fbc6d1b8840663", "comments": []}, {"number": 51312, "title": "Fix a null pointer exception caused by branching on uninitialized data.", "body": "This is due to not checking that the params for the quantization exists. If there is no quantization, we should not access the `.params` field.\r\n\r\nPiperOrigin-RevId: 385173491\r\nChange-Id: I8fc476c4b274fdb21ba741caa0fbc6d1b8840663", "comments": []}, {"number": 51311, "title": "Fix a null pointer exception caused by branching on uninitialized data.", "body": "This is due to not checking that the params for the quantization exists. If there is no quantization, we should not access the `.params` field.\r\n\r\nPiperOrigin-RevId: 385173491\r\nChange-Id: I8fc476c4b274fdb21ba741caa0fbc6d1b8840663", "comments": []}, {"number": 51310, "title": "Fix a null pointer exception caused by branching on uninitialized data.", "body": "This is due to not checking that the params for the quantization exists. If there is no quantization, we should not access the `.params` field.\r\n\r\nPiperOrigin-RevId: 385168337\r\nChange-Id: I28661e4f12ba1c92cfeae23d22a3fb2df2a2c6a4", "comments": []}, {"number": 51309, "title": "Fix a null pointer exception caused by branching on uninitialized data.", "body": "This is due to not checking that the params for the quantization exists. If there is no quantization, we should not access the `.params` field.\r\n\r\nPiperOrigin-RevId: 385168337\r\nChange-Id: I28661e4f12ba1c92cfeae23d22a3fb2df2a2c6a4", "comments": []}, {"number": 51308, "title": "Fix a null pointer exception caused by branching on uninitialized data.", "body": "This is due to not checking that the params for the quantization exists. If there is no quantization, we should not access the `.params` field.\r\n\r\nPiperOrigin-RevId: 385163909\r\nChange-Id: I2beb8d50649b6542db224c163033fbcbaa49314f", "comments": []}, {"number": 51307, "title": "Fix a null pointer exception caused by branching on uninitialized data.", "body": "This is due to not checking that the params for the quantization exists. If there is no quantization, we should not access the `.params` field.\r\n\r\nPiperOrigin-RevId: 385163909\r\nChange-Id: I2beb8d50649b6542db224c163033fbcbaa49314f", "comments": []}, {"number": 51306, "title": "Fix a null pointer exception caused by branching on uninitialized data.", "body": "This is due to not checking that the params for the quantization exists. If there is no quantization, we should not access the `.params` field.\r\n\r\nPiperOrigin-RevId: 385163909\r\nChange-Id: I2beb8d50649b6542db224c163033fbcbaa49314f", "comments": []}, {"number": 51305, "title": "Fix a null pointer exception in SVDF", "body": "This is due to not checking that `GetVariableInput` returns non-null tensor.\r\n\r\nAlso fix a potential null pointer exception in `GetVariableInput`.\r\n\r\nPiperOrigin-RevId: 385160147\r\nChange-Id: Iadf3f0705b036a9014d27caa5a8bbd91f4c4c401", "comments": []}]