[{"number": 54010, "title": "Fix memory leak when a graph node is invalid.", "body": "If a graph node is invalid but a kernel is created then we set the kernel back to `nullptr` but we forget to delete it. Hence, we get a memory leak.\r\n\r\nPiperOrigin-RevId: 408968108\r\nChange-Id: I1d8a9d0d8988ed5e08be8b9f2004ce1b4cd11b7c", "comments": []}, {"number": 54009, "title": "Fix memory leak when a graph node is invalid.", "body": "If a graph node is invalid but a kernel is created then we set the kernel back to `nullptr` but we forget to delete it. Hence, we get a memory leak.\r\n\r\nPiperOrigin-RevId: 408968108\r\nChange-Id: I1d8a9d0d8988ed5e08be8b9f2004ce1b4cd11b7c", "comments": []}, {"number": 54008, "title": "Prevent null dereference read in `GetInitOp`.", "body": "We have a map of maps. We test that the key exists in the first map but then we don't have any validation that this also means the second map has the needed key. In the scenarios where this is not the case, we'll dereference a nullptr, if we don't have this check\r\n\r\nPiperOrigin-RevId: 408739325\r\nChange-Id: If9bb7ed759aba1f3b56a34913f209508dbaf65ce", "comments": []}, {"number": 54007, "title": "Prevent null dereference read in `GetInitOp`.", "body": "We have a map of maps. We test that the key exists in the first map but then we don't have any validation that this also means the second map has the needed key. In the scenarios where this is not the case, we'll dereference a nullptr, if we don't have this check\r\n\r\nPiperOrigin-RevId: 408739325\r\nChange-Id: If9bb7ed759aba1f3b56a34913f209508dbaf65ce", "comments": []}, {"number": 54006, "title": "Prevent null dereference read in `GetInitOp`.", "body": "We have a map of maps. We test that the key exists in the first map but then we don't have any validation that this also means the second map has the needed key. In the scenarios where this is not the case, we'll dereference a nullptr, if we don't have this check\r\n\r\nPiperOrigin-RevId: 408739325\r\nChange-Id: If9bb7ed759aba1f3b56a34913f209508dbaf65ce", "comments": []}, {"number": 54005, "title": "Prevent integer overflow in `CalculateTensorSize`.", "body": "In order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.\r\n\r\nPiperOrigin-RevId: 408714915\r\nChange-Id: I110ec4e1c5bbf4d7ca7ef7c068dfd3e8bc7190cd", "comments": []}, {"number": 54004, "title": "Prevent integer overflow in `OpLevelCostEstimator::CalculateOutputSize`.", "body": "In order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.\r\n\r\nPiperOrigin-RevId: 408701427\r\nChange-Id: Idf31e7f0bf18ca824d084fdd355e1f653f145c20", "comments": []}, {"number": 54003, "title": "Prevent integer overflow in `OpLevelCostEstimator::CalculateOutputSize`.", "body": "In order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.\r\n\r\nPiperOrigin-RevId: 408701427\r\nChange-Id: Idf31e7f0bf18ca824d084fdd355e1f653f145c20", "comments": []}, {"number": 54002, "title": "Prevent integer overflow in `OpLevelCostEstimator::CalculateOutputSize`.", "body": "In order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.\r\n\r\nPiperOrigin-RevId: 408701427\r\nChange-Id: Idf31e7f0bf18ca824d084fdd355e1f653f145c20", "comments": []}, {"number": 54000, "title": "Prevent integer overflow in `OpLevelCostEstimator::CalculateTensorSize`.", "body": "In order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.\r\n\r\nPiperOrigin-RevId: 408713061\r\nChange-Id: I3771475b0c72a2844a3854086966562fd33f2da5", "comments": []}, {"number": 53999, "title": "Prevent integer overflow in `OpLevelCostEstimator::CalculateTensorSize`.", "body": "In order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.\r\n\r\nPiperOrigin-RevId: 408713061\r\nChange-Id: I3771475b0c72a2844a3854086966562fd33f2da5", "comments": []}, {"number": 53998, "title": "Prevent integer overflow in `OpLevelCostEstimator::CalculateTensorSize`.", "body": "In order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.\r\n\r\nPiperOrigin-RevId: 408713061\r\nChange-Id: I3771475b0c72a2844a3854086966562fd33f2da5", "comments": []}, {"number": 53997, "title": "Prevent copying uninitialized data in `AssignOp`.", "body": "This prevents harder to debug undefined behaviors that cannot be traced back to the original tensor after assignments occur earlier in the graph execution. Several of these undefined behaviors are just reference bindings to null pointers, which are caught when running under ubsan/asan.\r\n\r\nPiperOrigin-RevId: 408654780\r\nChange-Id: Iad2ec40d43f5fd7ea016c20283356c12d5ddeab1", "comments": []}, {"number": 53996, "title": "Prevent copying uninitialized data in `AssignOp`.", "body": "This prevents harder to debug undefined behaviors that cannot be traced back to the original tensor after assignments occur earlier in the graph execution. Several of these undefined behaviors are just reference bindings to null pointers, which are caught when running under ubsan/asan.\r\n\r\nPiperOrigin-RevId: 408654780\r\nChange-Id: Iad2ec40d43f5fd7ea016c20283356c12d5ddeab1", "comments": []}, {"number": 53995, "title": "Prevent copying uninitialized data in `AssignOp`.", "body": "This prevents harder to debug undefined behaviors that cannot be traced back to the original tensor after assignments occur earlier in the graph execution. Several of these undefined behaviors are just reference bindings to null pointers, which are caught when running under ubsan/asan.\r\n\r\nPiperOrigin-RevId: 408654780\r\nChange-Id: Iad2ec40d43f5fd7ea016c20283356c12d5ddeab1", "comments": []}, {"number": 53994, "title": "Add cmake configuration to mlir-hlo for external projects", "body": "Add cmake configuration for mlir-hlo so that external projects that want\r\nto depend on it can import its cmake targets using `find_package` and \r\n`-DMHLO_DIR=...`.", "comments": ["CC: @stellaraccident ", "Can you update the description to refer to `find_package`?", "> Can you update the description to refer to `find_package`?\r\n\r\nDone.", "CI failures (at least the one that I can see) is unrelated to this PR."]}, {"number": 53993, "title": "Fix heap OOB read/write due to incorrect indexing.", "body": "PiperOrigin-RevId: 408578046\r\nChange-Id: Ifc9ffea49e5890f55fcb2c27568611052c3ddcfa", "comments": []}, {"number": 53992, "title": "Fix heap OOB read/write due to incorrect indexing.", "body": "PiperOrigin-RevId: 408578046\r\nChange-Id: Ifc9ffea49e5890f55fcb2c27568611052c3ddcfa", "comments": []}, {"number": 53991, "title": "Properly handle the case where `SpecializeType()` returns an error `S\u2026", "body": "\u2026tatus`.\r\n\r\nIf the error case in `SpecializeType()` is reached, then we would get a crash when trying to access the value of an errorenous `StatusOr` object\r\n\r\nPiperOrigin-RevId: 408380069\r\nChange-Id: If3c3fc876dcf9384d5ec7a4985adc68c23ea7318", "comments": []}, {"number": 53990, "title": "Properly handle the case where `SpecializeType()` returns an error `S\u2026", "body": "\u2026tatus`.\r\n\r\nIf the error case in `SpecializeType()` is reached, then we would get a crash when trying to access the value of an errorenous `StatusOr` object\r\n\r\nPiperOrigin-RevId: 408380069\r\nChange-Id: If3c3fc876dcf9384d5ec7a4985adc68c23ea7318", "comments": []}, {"number": 53989, "title": "Prevent null dereference read in `SpecializeType()`", "body": "For some adversarial protos, the attribute for a key might not exist.\r\n\r\nPiperOrigin-RevId: 408382090\r\nChange-Id: Ie7eabe532c9ff280fce5dce1f6cdb93c76c2e040", "comments": []}, {"number": 53988, "title": "Prevent null dereference read in `SpecializeType()`", "body": "For some adversarial protos, the attribute for a key might not exist.\r\n\r\nPiperOrigin-RevId: 408382090\r\nChange-Id: Ie7eabe532c9ff280fce5dce1f6cdb93c76c2e040", "comments": []}, {"number": 53987, "title": "Validate `proto.dtype()` before calling `set_dtype()`.", "body": "This prevents a `DCHECK`-fail when the proto contains an invalid dtype for a tensor shape with 0 elements or for an incomplete tensor shape.\r\n\r\nPiperOrigin-RevId: 408369083\r\nChange-Id: Ia21a3e3d62a90d642a4561f08f3b543e5ad00c46", "comments": []}, {"number": 53986, "title": "Validate `proto.dtype()` before calling `set_dtype()`.", "body": "This prevents a `DCHECK`-fail when the proto contains an invalid dtype for a tensor shape with 0 elements or for an incomplete tensor shape.\r\n\r\nPiperOrigin-RevId: 408369083\r\nChange-Id: Ia21a3e3d62a90d642a4561f08f3b543e5ad00c46", "comments": []}, {"number": 53985, "title": "Validate `proto.dtype()` before calling `set_dtype()`.", "body": "This prevents a `DCHECK`-fail when the proto contains an invalid dtype for a tensor shape with 0 elements or for an incomplete tensor shape.\r\n\r\nPiperOrigin-RevId: 408369083\r\nChange-Id: Ia21a3e3d62a90d642a4561f08f3b543e5ad00c46", "comments": []}, {"number": 53984, "title": "Prevent a crash due to heap OOB write in grappler.", "body": "PiperOrigin-RevId: 408318417\r\nChange-Id: If095feb8c001e3a8ac4a85b7387b81e8309df47d", "comments": []}, {"number": 53983, "title": "Prevent a crash due to heap OOB write in grappler.", "body": "PiperOrigin-RevId: 408318417\r\nChange-Id: If095feb8c001e3a8ac4a85b7387b81e8309df47d", "comments": []}, {"number": 53982, "title": "Fix `mktemp` usage", "body": null, "comments": []}, {"number": 53981, "title": "Fix `mktemp` usage", "body": null, "comments": []}, {"number": 53980, "title": "Fix `mktemp` usage", "body": null, "comments": []}]