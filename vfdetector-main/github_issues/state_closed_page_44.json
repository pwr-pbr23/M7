[{"number": 54040, "title": "Eliminate debug `CHECK`-fail from `function.cc`", "body": "PiperOrigin-RevId: 409416119\r\nChange-Id: I8376ee464d434e9b970ff0ad49edfdaa2a273cfe", "comments": []}, {"number": 54039, "title": "Eliminate debug `CHECK`-fail from `function.cc`", "body": "PiperOrigin-RevId: 409416119\r\nChange-Id: I8376ee464d434e9b970ff0ad49edfdaa2a273cfe", "comments": []}, {"number": 54038, "title": "Eliminate debug `CHECK`-fail from `function.cc`", "body": "PiperOrigin-RevId: 409416119\r\nChange-Id: I8376ee464d434e9b970ff0ad49edfdaa2a273cfe", "comments": []}, {"number": 54037, "title": "Prevent memory leak in decoding PNG images.", "body": "PiperOrigin-RevId: 409300653\r\nChange-Id: I6182124c545989cef80cefd439b659095920763b", "comments": []}, {"number": 54036, "title": "Prevent memory leak in decoding PNG images.", "body": "PiperOrigin-RevId: 409300653\r\nChange-Id: I6182124c545989cef80cefd439b659095920763b", "comments": []}, {"number": 54035, "title": "Prevent memory leak in decoding PNG images.", "body": "PiperOrigin-RevId: 409300653\r\nChange-Id: I6182124c545989cef80cefd439b659095920763b", "comments": []}, {"number": 54034, "title": "In case of error in `DecodePng`, end kernel execution immediately.", "body": "There are scenarios where we detect an error in `DecodePng` kernel, yet the execution continues for a while longer before an error is thrown. This is not safe.\r\n\r\nPiperOrigin-RevId: 409299935\r\nChange-Id: Ife488b410148032ae777f59bc51864e172553fdf", "comments": []}, {"number": 54033, "title": "In case of error in `DecodePng`, end kernel execution immediately.", "body": "There are scenarios where we detect an error in `DecodePng` kernel, yet the execution continues for a while longer before an error is thrown. This is not safe.\r\n\r\nPiperOrigin-RevId: 409299935\r\nChange-Id: Ife488b410148032ae777f59bc51864e172553fdf", "comments": []}, {"number": 54032, "title": "In case of error in `DecodePng`, end kernel execution immediately.", "body": "There are scenarios where we detect an error in `DecodePng` kernel, yet the execution continues for a while longer before an error is thrown. This is not safe.\r\n\r\nPiperOrigin-RevId: 409299935\r\nChange-Id: Ife488b410148032ae777f59bc51864e172553fdf", "comments": []}, {"number": 54031, "title": "Prevent use after free in `DecodePng` kernel.", "body": "We are cleaning up the memory in `decode` and then we are using an `OP_REQUIRES` to check an invariant on the `decode` data.\r\n\r\nPiperOrigin-RevId: 409299145\r\nChange-Id: I4eb93aaca52483eb202e89b78df07fbb2f6cb254", "comments": []}, {"number": 54030, "title": "Prevent use after free in `DecodePng` kernel.", "body": "We are cleaning up the memory in `decode` and then we are using an `OP_REQUIRES` to check an invariant on the `decode` data.\r\n\r\nPiperOrigin-RevId: 409299145\r\nChange-Id: I4eb93aaca52483eb202e89b78df07fbb2f6cb254", "comments": []}, {"number": 54029, "title": "Prevent use after free in `DecodePng` kernel.", "body": "We are cleaning up the memory in `decode` and then we are using an `OP_REQUIRES` to check an invariant on the `decode` data.\r\n\r\nPiperOrigin-RevId: 409299145\r\nChange-Id: I4eb93aaca52483eb202e89b78df07fbb2f6cb254", "comments": []}, {"number": 54028, "title": "Validate real and expected type of arguments to cwise ops.", "body": "Without this validation, it is possible to trigger a `CHECK`-fail denial of service.\r\n\r\nThis is a rollforward of a previous commit which was rolled back as it was relying on RTTI. This time we don't use RTTI, we replace `typeid(Tin).name()` with a double function call, `DataTypeString(DataTypeToEnum<Tin>::v())`.\r\n\r\nPiperOrigin-RevId: 409340416\r\nChange-Id: I96080b2796729a3a9b65e7c68307ac276070f2f0", "comments": []}, {"number": 54027, "title": "Validate real and expected type of arguments to cwise ops.", "body": "Without this validation, it is possible to trigger a `CHECK`-fail denial of service.\r\n\r\nThis is a rollforward of a previous commit which was rolled back as it was relying on RTTI. This time we don't use RTTI, we replace `typeid(Tin).name()` with a double function call, `DataTypeString(DataTypeToEnum<Tin>::v())`.\r\n\r\nPiperOrigin-RevId: 409340416\r\nChange-Id: I96080b2796729a3a9b65e7c68307ac276070f2f0", "comments": []}, {"number": 54026, "title": "Validate real and expected type of arguments to cwise ops.", "body": "Without this validation, it is possible to trigger a `CHECK`-fail denial of service.\r\n\r\nThis is a rollforward of a previous commit which was rolled back as it was relying on RTTI. This time we don't use RTTI, we replace `typeid(Tin).name()` with a double function call, `DataTypeString(DataTypeToEnum<Tin>::v())`.\r\n\r\nPiperOrigin-RevId: 409340416\r\nChange-Id: I96080b2796729a3a9b65e7c68307ac276070f2f0", "comments": []}, {"number": 54025, "title": "Use `PartialTensorShape` instead of `TensorShape`.", "body": "`TensorShape` constructor throws a CHECK-fail if shape is partial/overflows which the other doesn't. We are only determining the number of elements in the shape and partial shape should be used as it returns negative number when needed.\r\n\r\nPiperOrigin-RevId: 409205384\r\nChange-Id: Ia56542ff9ec758f2c9ffc7e4dcc9fa7eecd86e7b", "comments": []}, {"number": 54024, "title": "Prevent a null-pointer dereference / `CHECK`-fail in grappler.", "body": "PiperOrigin-RevId: 409187354\r\nChange-Id: I369c249cca32e6c56ec193f0ebbf2f2768fc7d43", "comments": []}, {"number": 54023, "title": "Prevent a null-pointer dereference / `CHECK`-fail in grappler.", "body": "PiperOrigin-RevId: 409187354\r\nChange-Id: I369c249cca32e6c56ec193f0ebbf2f2768fc7d43", "comments": []}, {"number": 54022, "title": "Prevent a null-pointer dereference / `CHECK`-fail in grappler.", "body": "PiperOrigin-RevId: 409187354\r\nChange-Id: I369c249cca32e6c56ec193f0ebbf2f2768fc7d43", "comments": []}, {"number": 54021, "title": "Make `IsSimplifiableReshape` return `Status` instead of `bool`.", "body": "This is to allow remove `CHECK`-fails in subsequent commits.\r\n\r\nPiperOrigin-RevId: 409160987\r\nChange-Id: I3f050218a3832271395c4372a0b8ea05f1c03d80", "comments": []}, {"number": 54020, "title": "Remove `CHECK`-fails from `IsSimplifiableReshape`", "body": "PiperOrigin-RevId: 409164987\r\nChange-Id: I58c7dd459ff348c3dbae95e00c4c5e63b30a4e65", "comments": []}, {"number": 54019, "title": "Remove `CHECK`-fails from `IsSimplifiableReshape`", "body": "PiperOrigin-RevId: 409164987\r\nChange-Id: I58c7dd459ff348c3dbae95e00c4c5e63b30a4e65", "comments": []}, {"number": 54018, "title": "Remove `CHECK`-fails from `IsSimplifiableReshape`", "body": "PiperOrigin-RevId: 409164987\r\nChange-Id: I58c7dd459ff348c3dbae95e00c4c5e63b30a4e65", "comments": []}, {"number": 54017, "title": "Eliminate `CHECK`-fails from `IsSimplifiableReshape` via `MakeShape(<\u2026", "body": "\u2026invalid shape>)`\r\n\r\nPiperOrigin-RevId: 409166738\r\nChange-Id: I7f0a3590b8acae3f3e3e2fe636e1f5ef285693cf", "comments": []}, {"number": 54016, "title": "Eliminate `CHECK`-fails from `IsSimplifiableReshape` via `MakeShape(<\u2026", "body": "\u2026invalid shape>)`\r\n\r\nPiperOrigin-RevId: 409166738\r\nChange-Id: I7f0a3590b8acae3f3e3e2fe636e1f5ef285693cf", "comments": []}, {"number": 54015, "title": "Eliminate `CHECK`-fails from `IsSimplifiableReshape` via `MakeShape(<\u2026", "body": "\u2026invalid shape>)`\r\n\r\nPiperOrigin-RevId: 409166738\r\nChange-Id: I7f0a3590b8acae3f3e3e2fe636e1f5ef285693cf", "comments": []}, {"number": 54014, "title": "Fix abort caused by allocating a too large vector.", "body": "We need to make sure that the number of dimensions in a shape is within limits.\r\n\r\nPiperOrigin-RevId: 408997911\r\nChange-Id: If59e1c23f2ec9c2d4ff4d8632fd62b2a7773a4eb", "comments": []}, {"number": 54013, "title": "Fix abort caused by allocating a too large vector.", "body": "We need to make sure that the number of dimensions in a shape is within limits.\r\n\r\nPiperOrigin-RevId: 408997911\r\nChange-Id: If59e1c23f2ec9c2d4ff4d8632fd62b2a7773a4eb", "comments": []}, {"number": 54012, "title": "Fix abort caused by allocating a too large vector.", "body": "We need to make sure that the number of dimensions in a shape is within limits.\r\n\r\nPiperOrigin-RevId: 408997911\r\nChange-Id: If59e1c23f2ec9c2d4ff4d8632fd62b2a7773a4eb", "comments": []}, {"number": 54011, "title": "Fix memory leak when a graph node is invalid.", "body": "If a graph node is invalid but a kernel is created then we set the kernel back to `nullptr` but we forget to delete it. Hence, we get a memory leak.\r\n\r\nPiperOrigin-RevId: 408968108\r\nChange-Id: I1d8a9d0d8988ed5e08be8b9f2004ce1b4cd11b7c", "comments": []}]