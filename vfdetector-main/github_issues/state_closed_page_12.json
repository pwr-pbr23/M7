[{"number": 55125, "title": "Change call sites from deprecated `mlir::parseSourceFile()` to `mlir::parseSourceFile<::mlir::ModuleOp>()`.", "body": "Change call sites from deprecated `mlir::parseSourceFile()` to `mlir::parseSourceFile<::mlir::ModuleOp>()`.\n", "comments": []}, {"number": 55124, "title": "[NNAPI] Allow dequantizing fp16 scalar input", "body": "[NNAPI] Allow dequantizing fp16 scalar input\n", "comments": []}, {"number": 55122, "title": "Set print_operand_shape=false for HloPrintOptions::Fingerprint(). This reduces fingerprint computation time by 10-100x.", "body": "Set print_operand_shape=false for HloPrintOptions::Fingerprint(). This reduces fingerprint computation time by 10-100x.\n", "comments": []}, {"number": 55121, "title": "[NFC] Reformat shape_inference.mlir test to only check for partial types of dataset functions.", "body": "[NFC] Reformat shape_inference.mlir test to only check for partial types of dataset functions.\n", "comments": []}, {"number": 55120, "title": "Add optimization method enum to select quantization algorithm", "body": "Add optimization method enum to select quantization algorithm\n\nCurrently, the static range quantization is enabled in the TF quantization.\nLater, automatic quantization and dynamic range quantization will be\nimplemented.\n", "comments": []}, {"number": 55119, "title": "[tf][tfg] Control-Flow Sink", "body": "[tf][tfg] Control-Flow Sink\n\nIntroduce a control-flow sink pass for TFG region-based control-flow operations. Control-flow sink moves operations whose only users are in a region into that region so that they aren't executed on paths where their results are not needed.\n", "comments": []}, {"number": 55117, "title": "Update PyYAML dependency version to 6.0 for Python 3.10 compatibility", "body": "Update PyYAML dependency version to 6.0 for Python 3.10 compatibility\n", "comments": []}, {"number": 55116, "title": "[JAX] Update ann to use XLA based fallback ApproxTopK.", "body": "[JAX] Update ann to use XLA based fallback ApproxTopK.\nAlso polished the document.\n", "comments": []}, {"number": 55115, "title": "[XLA:TPU] Pull ApproxTopK shape inference to its own file.", "body": "[XLA:TPU] Pull ApproxTopK shape inference to its own file.\nAlso implemented a dummy fallback function for non-TPU ApproxTopK,\nso that both Jax and TF can use the same fallback instead of re-implementing\nthe fallback in python/TF-kernel.\nThis is a precursor to support ApproxTopK in TF.\n", "comments": []}, {"number": 55114, "title": "[XLA] Simplify `ShapeIndex` and `ShapeIndexView`.", "body": "[XLA] Simplify `ShapeIndex` and `ShapeIndexView`.\n\nThe encapsulation doesn't really gain anything except more code.\n", "comments": []}, {"number": 55113, "title": "Instantiating a `tf.keras.applications` Model Nullifies Augmentation Layers", "body": "Hi! \ud83d\udc4b \r\n\r\nI'm having a very weird problem which I couldn't find in the Issues tab, so I hope I'm not duplicating anything.\r\n\r\nFirst, I'm using TensorFlow v2.8.0 on Google Colab (Python v3.7.12).\r\n\r\nWhen creating an augmentation layer, be it a single layer, or a `tf.keras.Sequential` collection of them, they work as expected.\r\nHowever, right after instantiating a model from `tf.keras.applications` (I've seen it happen with EfficientNetB0 and ResNet152V2), the augmentation layers become a no-op. This behavior does not occur with TensorFlow v2.7.0 on Colab.\r\n\r\nA Colab notebook showing this behavior can be found here: https://colab.research.google.com/drive/14K2-OgcPjkHRk2aeOMnW1CnaThow6Fia?usp=sharing\r\n\r\nThank you for your time and patience,\r\nBen\r\n", "comments": ["@beneyal, Thanks for opening this issue. Development of keras moved to separate repository https://github.com/keras-team/keras/issues\r\n\r\nPlease post this issue on keras-team/keras repo.\r\nTo know more see;\r\nhttps://discuss.tensorflow.org/t/keras-project-moved-to-new-repository-in-https-github-com-keras-team-keras/1999\r\nThank you!", "Thank you, will do \ud83d\ude42 \r\n\r\nEDIT: For others having the same issue, I opened the issue over at Keras' GitHub: https://github.com/keras-team/keras/issues/16189", "@beneyal,\r\n\r\nCan you please close this issue, since it is tracked [there](https://github.com/keras-team/keras/issues/16189). Thanks!", "Are you satisfied with the resolution of your issue?\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/55113\">Yes</a>\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&entry.2137816233=https://github.com/tensorflow/tensorflow/issues/55113\">No</a>\n"]}, {"number": 55112, "title": "Export Ftrl optimizer.", "body": "Export Ftrl optimizer.\n", "comments": []}, {"number": 55111, "title": "mutate xplane for kernel launch flows, not enabled in OSS, because missing event and json support.", "body": "mutate xplane for kernel launch flows, not enabled in OSS, because missing event and json support.\n", "comments": []}, {"number": 55110, "title": "Create parameterized test for future implementation of PjRT client using coordination service.", "body": "Create parameterized test for future implementation of PjRT client using coordination service.\n", "comments": []}, {"number": 55109, "title": "Turn on OptimizationBarrierExpander passes for GPU and CPU.", "body": "Turn on OptimizationBarrierExpander passes for GPU and CPU.\n", "comments": []}, {"number": 55108, "title": "Change absl::flat_hash_map to std::unordered_map.", "body": "Change absl::flat_hash_map to std::unordered_map.\n", "comments": []}, {"number": 55107, "title": "Update container hash for manylinux2014 RBE container.", "body": "Update container hash for manylinux2014 RBE container.\n", "comments": []}, {"number": 55106, "title": "Add XlaOptimizationBarrier tensorflow op.", "body": "Add XlaOptimizationBarrier tensorflow op.\n\nSee https://www.tensorflow.org/xla/operation_semantics#optimizationbarrier.\n\nThe use case for this is to support the new XLA remat op in jax2tf.\n", "comments": []}, {"number": 55105, "title": "[tf][tfg] Control-Flow Sink", "body": "[tf][tfg] Control-Flow Sink\n\nIntroduce a control-flow sink pass for TFG region-based control-flow operations. Control-flow sink moves operations whose only users are in a region into that region so that they aren't executed on paths where their results are not needed.\n", "comments": []}, {"number": 55104, "title": "Rename quantized concatenation tests to include quantization in test name", "body": "Rename quantized concatenation tests to include quantization in test name\n", "comments": []}, {"number": 55103, "title": "fix broken microcontroller link.", "body": null, "comments": []}, {"number": 55102, "title": "Wrap CclCreate()'s lambda captures in tfrt::gpu::DestroyCapturesOnInvoke().", "body": "Wrap CclCreate()'s lambda captures in tfrt::gpu::DestroyCapturesOnInvoke().\n", "comments": []}, {"number": 55101, "title": "Adds use_auto_spmd_partitioning and propagate its value down the stack", "body": "Adds use_auto_spmd_partitioning and propagate its value down the stack\n", "comments": []}, {"number": 55100, "title": "Update tf.py_function and tf.numpy_function docstring.", "body": "Update tf.py_function and tf.numpy_function docstring.\n", "comments": []}, {"number": 55099, "title": "Turn on OptimizationBarrierExpander passes for GPU and CPU.", "body": "Turn on OptimizationBarrierExpander passes for GPU and CPU.\n", "comments": []}, {"number": 55098, "title": "Set the incarnation within the service instead of the rpc handler.", "body": "Set the incarnation within the service instead of the rpc handler.\n", "comments": []}, {"number": 55097, "title": "[oneDNN] Fix Windows build failure due to OpenMP linking error in Bazel 5", "body": "Prior to this PR, Windows builds were failing with this error:\r\nomp_dll.def : error LNK2001: unresolved external symbol __kmp_invoke_microtask bazel-out/x64_windows-opt/bin/external/llvm_openmp/libiomp5md.dll.if.lib : fatal error LNK1120: 1 unresolved externals\r\n\r\nIt was root caused to a commit# 8871926 fails (needs bazel 5.0 to run).\r\nThe immediately previous commit# e135db1 passes (needs bazel 4.2.2).\r\nWe also noticed that Bazel 5.0 was not adding some symbol defines in the z_Windows_NT-586_asm.obj.params file when assembling the file z_Windows_NT-586_asm.S\r\n\r\nIt was further analyzed and it seems Bazel 5 behaves differently than Bazel 4 in this linking context. We made a successful build with Bazel 4.x on commit# e135db1. Changed to Bazel 5.x. Build failed. Then added a 'defines' field under cc_binary in the ...\\third_party\\llvm_openmp\\openmp.bzl file. The assembler picked up the correct Windows specific defines. So it appears, in Bazel 5.x copts options are only used for C/C++ compilations, but not for assembler (unlike in Bazel 4.x).", "comments": []}, {"number": 55096, "title": "Deprecate most_specific_compatible_type for most_specific_common_supertype", "body": "Deprecate most_specific_compatible_type for most_specific_common_supertype\n", "comments": []}, {"number": 55095, "title": "[XNNPACK] Support split into 3 outputs", "body": "[XNNPACK] Support split into 3 outputs\n\nUpdate delegate to support splitting to 3 outputs. Tests are updated to specify number of splits. Added some more helpers to check a range of number of outputs for each node.\n", "comments": []}, {"number": 55094, "title": "Refactor device propagation to use a barrier internally.", "body": "Refactor device propagation to use a barrier internally.\n", "comments": []}]